stuff.list
({
	"../UVS/App.Data.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'Math',\r\n		'Math.Geometry',\r\n		'System.Data',\r\n	],\r\n	\r\n	'UVS.Data' : \r\n	 {\r\n		DefaultFlight : \"SSPF1K1\",\r\n\r\n		\"SSPF1K1\" : \r\n		 {\r\n			Table : \r\n			 {\r\n				Original : \r\n				 {\r\n					get once()\r\n					{\r\n						var oTable =\r\n						[\r\n							-17101,  -2000, 20789,  -67.2,  13.3, 1.725, 617, 65,\r\n							-16562,  -1708, 20588,  -63.5,  13.3, 1.725, 613, 65,\r\n							-16024,  -1375, 20387,  -59.9,  12.9, 1.725, 608, 65,\r\n\r\n							//-20101,  -2000, 20789,  -167.2,  13.3, 1.725, 617, 65,\r\n							//-18562,  -1708, 20588,  -63.5,  13.3, 1.725, 613, 65,\r\n							//-16024,  -1375, 20387,  -59.9,  12.9, 1.725, 608, 65,\r\n\r\n\r\n							-15444,  -1042, 20186,  -58.3,   7.1, 1.708, 600, 66,\r\n							-14864,   -708, 19985,  -56.8,  -0.8, 1.683, 598, 66,\r\n							-14367,   -417, 19784,  -58.9, -10.0, 1.683, 594, 67,\r\n							-13787,    -42, 19583,  -62.0, -21.2, 1.667, 590, 67,\r\n							-12959,    417, 19521,  -67.2, -38.7, 1.642, 585, 68,\r\n							-12048,    875, 19313,  -73.4, -49.2, 1.600, 577, 68,\r\n							-11219,   1292, 19125,  -77.1, -50.0, 1.567, 573, 69,\r\n							-10308,   1708, 18896,  -79.7, -50.0, 1.525, 565, 70,\r\n							 -9604,   2000, 18792,  -82.3, -50.0, 1.500, 556, 71,\r\n							 -8734,   2292, 18625,  -84.4, -50.0, 1.479, 558, 71,\r\n							 -8154,   2458, 18500,  -85.9, -49.6, 1.463, 554, 72,\r\n							 -7492,   2667, 18375,  -88.0, -49.6, 1.450, 552, 72,\r\n							 -6746,   2875, 18229,  -90.6, -49.2, 1.429, 554, 73,\r\n							 -6332,   2958, 18146,  -91.7, -49.6, 1.425, 552, 73,\r\n							 -5586,   3125, 17979,  -93.7, -49.6, 1.396, 548, 74,\r\n							 -5048,   3167, 17854,  -95.3, -49.2, 1.375, 544, 74,\r\n							 -4178,   3292, 17646,  -95.8, -48.7, 1.338, 533, 75,\r\n							 -3474,   3333, 17479,  -95.8, -49.2, 1.308, 527, 75,\r\n							 -2811,   3375, 17313,  -96.9, -50.8, 1.283, 519, 75,\r\n							 -1983,   3333, 17104,  -99.0, -48.7, 1.250, 519, 75,\r\n							 -1652,   3333, 17021, -100.0, -48.7, 1.250, 517, 75,\r\n							 -1196,   3292, 16896, -101.0, -48.7, 1.229, 515, 75,\r\n							  -741,   3250, 16771, -102.1, -48.7, 1.204, 508, 75,\r\n							  -409,   3208, 16688, -103.1, -48.7, 1.188, 502, 75,\r\n								-36,   3167, 16563, -104.2, -48.7, 1.183, 502, 75,\r\n								295,   3083, 16479, -104.7, -49.2, 1.183, 508, 75,\r\n								626,   3000, 16375, -105.7, -50.0, 1.179, 508, 75,\r\n							  1082,   2875, 16229, -105.7, -50.0, 1.163, 506, 75,\r\n							  1413,   2792, 16104, -104.2, -49.6, 1.150, 500, 75,\r\n							  1786,   2667, 15979, -102.6, -49.6, 1.125, 494, 75,\r\n							  2159,   2500, 15854, -101.0, -49.6, 1.096, 485, 75,\r\n							  2449,   2375, 15771, -102.1, -48.7, 1.079, 475, 75,\r\n							  2656,   2292, 15708, -102.1, -47.9, 1.058, 467, 75,\r\n							  2946,   2167, 15604, -102.1, -47.9, 1.038, 463, 75,\r\n							  3194,   2042, 15521, -102.6, -47.9, 1.029, 458, 75,\r\n							  3526,   1833, 15417, -103.6, -48.7, 1.025, 458, 75,\r\n							  3774,   1708, 15313, -103.6, -49.2, 1.013, 458, 75,\r\n							  4105,   1500, 15188, -104.2, -49.6, 1.000, 456, 75,\r\n							  4395,   1292, 15063, -104.7, -49.6, 1.000, 460, 75,\r\n							  4644,   1083, 14979, -104.7, -49.2, 0.996, 460, 75,\r\n							  4934,    875, 14833, -105.2, -48.3, 0.979, 456, 75,\r\n							  5265,    583, 14667, -105.2, -48.7, 0.963, 448, 75,\r\n							  5514,    375, 14542, -105.2, -48.7, 0.958, 452, 75,\r\n							  5845,      0, 14375, -105.7, -47.9, 0.946, 452, 75,\r\n							  6052,   -250, 14271, -106.2, -48.3, 0.929, 448, 75,\r\n							  6425,   -708, 14042, -105.2, -51.2, 0.904, 438, 75,\r\n							  6715,  -1167, 13979, -100.0, -47.5, 0.904, 444, 75,\r\n							  6963,  -1667, 13833,  -97.4, -42.1, 0.900, 450, 75,\r\n							  7212,  -2167, 13563,  -94.8, -24.6, 0.896, 450, 75,\r\n							  7295,  -2375, 13500,  -93.7, -18.3, 0.892, 450, 75,\r\n							  7419,  -2708, 13438,  -92.2, -10.0, 0.888, 450, 73,\r\n							  7543,  -3083, 13313,  -90.6,  -7.9, 0.883, 452, 71,\r\n							  7667,  -3375, 13167,  -88.5,  -5.4, 0.875, 452, 70,\r\n							  7833,  -3792, 13063,  -85.9,  -1.7, 0.871, 452, 68,\r\n							  7999,  -4208, 12917,  -82.8,  -5.8, 0.867, 454, 67,\r\n							  8164,  -4792, 12771,  -77.6,  -4.6, 0.863, 458, 66,\r\n							  8289,  -5167, 12646,  -76.0,  -3.7, 0.854, 456, 66,\r\n							  8413,  -5625, 12563,  -72.4,  -3.7, 0.850, 456, 65,\r\n							  8496,  -5833, 12521,  -70.3,  -3.7, 0.846, 456, 63,\r\n							  8661,  -6167, 12396,  -66.1,  -4.2, 0.833, 454, 62,\r\n							  8703,  -6375, 12354,  -64.6,  -4.2, 0.829, 454, 60,\r\n							  8910,  -7042, 12208,  -60.4,  -4.6, 0.817, 450, 59,\r\n							  9076,  -7500, 12083,  -55.2,  -5.4, 0.808, 454, 58,\r\n							  9241,  -8042, 12000,  -51.6,  -6.2, 0.813, 454, 58,\r\n							  9365,  -8375, 11938,  -47.9,  -1.2, 0.804, 452, 57,\r\n\r\n							  9448,  -8667, 11917,  -47.4,   4.6, 0.804, 456, 56,\r\n							  9573,  -9083, 11854,  -47.9,  17.1, 0.804, 458, 52,\r\n							  9614,  -9208, 11813,  -49.5,  22.9, 0.804, 460, 45,\r\n							  9697,  -9417, 11771,  -50.5,  30.8, 0.804, 460, 38,\r\n							  9821,  -9792, 11708,  -52.1,  42.1, 0.800, 460, 31,\r\n							  9904, -10000, 11667,  -52.1,  47.1, 0.796, 456, 25,\r\n							 10028, -10208, 11604,  -52.1,  47.5, 0.788, 452, 19,\r\n							 10111, -10375, 11542,  -52.1,  47.1, 0.783, 450, 14,\r\n							 10194, -10542, 11521,  -51.6,  47.5, 0.775, 448, 11,\r\n							 10360, -10792, 11438,  -51.6,  48.3, 0.758, 440,  9,\r\n							 10442, -10917, 11396,  -51.6,  47.9, 0.754, 440,  6,\r\n							 10525, -11000, 11375,  -52.1,  47.5, 0.746, 435,  4,\r\n							 10649, -11167, 11333,  -52.6,  47.5, 0.742, 433,  2,\r\n							 10732, -11292, 11292,  -52.6,  47.9, 0.738, 431,  1,\r\n							 10898, -11500, 11250,  -53.6,  47.5, 0.733, 433,  0,\r\n							 11064, -11667, 11208,  -55.2,  46.7, 0.733, 433,  0,\r\n							 11146, -11708, 11167,  -56.2,  47.5, 0.738, 433,  1,\r\n							 11229, -11833, 11125,  -56.8,  47.5, 0.733, 435,  2,\r\n							 11312, -11917, 11125,  -57.3,  47.5, 0.733, 435,  1,\r\n							 11643, -12167, 11042,  -59.9,  47.1, 0.733, 438,  3,\r\n							 11892, -12333, 11042,  -62.0,  47.5, 0.733, 438,  3,\r\n							 12140, -12500, 10938,  -63.5,  47.9, 0.742, 448,  5,\r\n							 12223, -12625, 10896,  -64.1,  47.5, 0.742, 448,  8,\r\n							 12389, -12708, 10854,  -65.1,  47.1, 0.742, 448, 10,\r\n							 12555, -12792, 10813,  -66.1,  47.1, 0.733, 450, 12,\r\n							 12720, -12875, 10750,  -67.7,  47.5, 0.742, 452, 14,\r\n							 12969, -13000, 10688,  -69.3,  47.5, 0.742, 452, 18,\r\n							 13135, -13083, 10646,  -69.8,  47.5, 0.733, 452, 19,\r\n							 13383, -13208, 10563,  -70.8,  47.1, 0.729, 454, 20,\r\n							 13590, -13292, 10500,  -71.4,  47.1, 0.725, 452, 20,\r\n							 13880, -13375, 10417,  -72.4,  47.9, 0.717, 448, 20,\r\n							 14087, -13458, 10375,  -72.9,  47.5, 0.708, 446, 18,\r\n							 14211, -13500, 10313,  -72.9,  47.1, 0.717, 450, 17,\r\n							 14460, -13542, 10250,  -73.4,  46.7, 0.717, 454, 16,\r\n							 14626, -13583, 10208,  -73.4,  46.7, 0.721, 460, 19,\r\n							 14791, -13625, 10167,  -74.0,  46.7, 0.729, 465, 23,\r\n							 14957, -13625, 10125,  -74.0,  46.7, 0.738, 473, 27,\r\n							 15123, -13625, 10063,  -74.0,  46.7, 0.738, 475, 31,\r\n							 15247, -13625, 10021,  -74.0,  46.7, 0.738, 479, 34,\r\n							 15413, -13625,  9979,  -75.0,  46.7, 0.742, 481, 39,\r\n							 15578, -13625,  9958,  -74.5,  47.1, 0.742, 483, 43,\r\n							 15785, -13667,  9896,  -74.5,  47.1, 0.746, 488, 47,\r\n							 15951, -13708,  9833,  -74.0,  46.7, 0.746, 490, 50,\r\n							 16241, -13625,  9771,  -74.0,  47.1, 0.750, 496, 54,\r\n							 16448, -13583,  9708,  -73.4,  47.1, 0.750, 500, 57,\r\n							 16655, -13542,  9646,  -72.9,  47.1, 0.750, 502, 59,\r\n							 16821, -13500,  9604,  -72.4,  46.7, 0.750, 502, 60,\r\n							 17069, -13417,  9521,  -71.9,  46.7, 0.754, 504, 60,\r\n							 17235, -13375,  9458,  -70.8,  46.7, 0.750, 506, 59,\r\n							 17442, -13333,  9396,  -69.8,  46.7, 0.750, 510, 60,\r\n							 17649, -13208,  9333,  -68.2,  46.7, 0.750, 510, 62,\r\n							 17815, -13125,  9250,  -67.2,  46.7, 0.746, 513, 62,\r\n							 18022, -13042,  9188,  -66.1,  46.7, 0.746, 513, 62,\r\n							 18105, -12958,  9167,  -66.1,  46.3, 0.746, 513, 63,\r\n							 18229, -12917,  9104,  -65.1,  45.8, 0.742, 513, 62,\r\n							 18395, -12750,  9042,  -64.1,  46.3, 0.738, 513, 63,\r\n							 18685, -12583,  8917,  -61.5,  46.3, 0.729, 510, 60,\r\n							 18809, -12417,  8854,  -60.9,  46.3, 0.725, 508, 58,\r\n							 18933, -12333,  8771,  -58.9,  46.3, 0.721, 504, 57,\r\n							 19016, -12208,  8750,  -57.3,  45.4, 0.717, 502, 55,\r\n							 19140, -12083,  8646,  -55.2,  37.9, 0.713, 500, 53,\r\n							 19223, -11958,  8646,  -53.1,  29.6, 0.708, 502, 50,\r\n							 19264, -11875,  8604,  -51.6,  25.8, 0.700, 502, 48,\r\n							 19430, -11583,  8542,  -49.0,   9.6, 0.700, 500, 47,\r\n							 19596, -11292,  8438,  -42.2,  -0.8, 0.700, 500, 48,\r\n							 19761, -11000,  8375,  -40.6,   3.8, 0.692, 500, 50,\r\n							 19886, -10708,  8313,  -40.1,  11.3, 0.688, 498, 49,\r\n							 20051, -10417,  8250,  -38.0,  20.8, 0.688, 496, 50,\r\n							 20176, -10125,  8167,  -37.5,  23.3, 0.683, 498, 48,\r\n							 20300,  -9875,  8104,  -35.4,  24.2, 0.675, 496, 46,\r\n							 20341,  -9667,  8063,  -34.9,  23.3, 0.671, 496, 44,\r\n							 20507,  -9167,  7958,  -33.3,  20.8, 0.667, 494, 44,\r\n							 20548,  -8958,  7917,  -33.9,  20.4, 0.663, 492, 41,\r\n							 20714,  -8208,  7771,  -33.3,  19.2, 0.646, 490, 40,\r\n							 \r\n							 20797,  -7208,  7667,  -33.9,  18.3, 0.638, 483, 37,\r\n							 20880,  -6542,  7500,  -34.9,  15.0, 0.629, 483, 35,\r\n							 20880,  -6042,  7454,  -35.9,   6.7, 0.625, 483, 34,\r\n\r\n							 20880,  -5667,  7324,  -37.0,  -2.1, 0.617, 483, 26,\r\n							 20880,  -5208,  7283,  -36.5,  -1.2, 0.613, 483, 23,\r\n							 20838,  -4875,  7262,  -35.9,  -0.4, 0.608, 485, 26,\r\n							 20838,  -4750,  7158,  -35.4,   2.5, 0.608, 488, 33,\r\n							 20714,  -4500,  6930,  -35.9,  17.9, 0.604, 483, 34,\r\n							 20673,  -4250,  6834,  -36.5,  20.8, 0.596, 481, 38,\r\n							 20590,  -4125,  6771,  -35.9,  19.6, 0.596, 479, 33,\r\n							 20424,  -3625,  6646,  -35.9,  12.9, 0.592, 479, 34,\r\n							 20341,  -3542,  6583,  -35.4,  12.1, 0.592, 481, 35,\r\n							 20217,  -3208,  6500,  -36.5,  12.1, 0.592, 483, 36,\r\n							 20134,  -3083,  6438,  -37.0,  13.3, 0.588, 483, 41,\r\n							 20093,  -3000,  6417,  -37.0,  13.8, 0.588, 483, 42,\r\n							 19927,  -2708,  6313,  -35.9,  15.4, 0.583, 485, 39,\r\n							 19803,  -2583,  6250,  -36.5,  13.8, 0.575, 479, 38,\r\n							 19720,  -2417,  6208,  -36.5,  12.5, 0.575, 475, 34,\r\n							 19637,  -2375,  6167,  -36.5,  12.9, 0.575, 477, 28,\r\n							 19596,  -2292,  6146,  -35.9,  12.9, 0.575, 479, 23,\r\n							 19554,  -2208,  6104,  -35.9,  12.5, 0.571, 479, 20,\r\n							 19513,  -2167,  6104,  -37.0,  12.9, 0.575, 481, 20,\r\n							 19389,  -2000,  6042,  -35.9,  13.3, 0.571, 479, 22,\r\n							 19347,  -2000,  6021,  -37.0,  15.0, 0.571, 481, 28,\r\n							 19223,  -1833,  5958,  -37.5,  13.8, 0.571, 481, 30,\r\n							 19140,  -1708,  5958,  -37.5,  13.3, 0.571, 483, 33,\r\n							 19016,  -1667,  5875,  -37.5,  12.9, 0.571, 483, 35,\r\n							 18933,  -1542,  5854,  -37.5,  12.9, 0.571, 488, 39,\r\n							 18809,  -1417,  5813,  -37.5,  12.9, 0.563, 483, 42,\r\n							 18726,  -1333,  5771,  -38.0,  13.3, 0.563, 483, 37,\r\n							 18602,  -1208,  5729,  -38.0,  13.8, 0.563, 481, 30,\r\n							 18519,  -1208,  5688,  -37.5,  13.3, 0.558, 479, 23,\r\n							 18436,  -1167,  5625,  -37.5,  13.3, 0.554, 479, 13,\r\n							 18312,  -1042,  5646,  -37.0,  13.3, 0.558, 477, 12,\r\n							 18188,   -958,  5646,  -36.5,  12.9, 0.554, 477, 10,\r\n							 18146,   -917,  5563,  -36.5,  12.1, 0.554, 479,  7,\r\n							 18022,   -833,  5500,  -35.9,  10.8, 0.554, 481, 10,\r\n							 17898,   -750,  5458,  -35.9,  10.8, 0.554, 485, 15,\r\n							 17815,   -750,  5438,  -36.5,  12.5, 0.554, 483, 21,\r\n							 17691,   -708,  5417,  -37.5,  13.8, 0.554, 485, 27,\r\n							 17608,   -625,  5375,  -38.0,  14.2, 0.554, 483, 30,\r\n							 17442,   -542,  5313,  -39.1,  13.8, 0.554, 485, 27,\r\n							 17359,   -500,  5292,  -40.1,  14.2, 0.554, 488, 30,\r\n							 17235,   -458,  5271,  -41.1,  14.6, 0.554, 490, 33,\r\n							 17111,   -417,  5208,  -42.2,  16.3, 0.550, 490, 40,\r\n							 16986,   -375,  5167,  -42.7,  16.3, 0.546, 492, 45,\r\n							 16862,   -333,  5125,  -43.2,  15.4, 0.546, 492, 50,\r\n							 16738,   -292,  5083,  -43.2,  14.6, 0.550, 494, 55,\r\n							 16696,   -250,  5063,  -43.2,  13.3, 0.533, 494, 60,\r\n							 16489,   -208,  5021,  -42.7,   0.0, 0.550, 492, 65,\r\n							 16365,   -167,  5000,  -42.2,  -4.6, 0.542, 490, 59,\r\n							 16241,   -125,  4958,  -42.2,  -0.8, 0.533, 488, 54,\r\n							 16158,    -83,  4917,  -41.7,   6.7, 0.533, 488, 47,\r\n							 16075,    -42,  4896,  -42.2,  12.9, 0.525, 485, 43,\r\n							 16034,      0,  4875,  -42.2,  18.3, 0.525, 483, 40,\r\n							 15910,      0,  4833,  -43.2,  28.3, 0.525, 481, 33,\r\n							 15785,      0,  4750,  -43.2,  30.4, 0.521, 477, 28,\r\n							 15661,      0,  4688,  -43.2,  31.7, 0.521, 477, 22,\r\n							 15537,      0,  4625,  -42.2,  30.8, 0.521, 475, 17,\r\n							 15413,      0,  4583,  -42.2,  27.1, 0.517, 475, 10,\r\n							 15371,      0,  4563,  -42.2,  24.6, 0.517, 477,  6,\r\n							 15247,      0,  4542,  -41.1,  18.8, 0.517, 479,  2,\r\n							 15205,      0,  4521,  -41.7,  16.3, 0.521, 481,  1,\r\n							 14957,      0,  4438,  -41.1,   5.4, 0.525, 485,  0,\r\n							 14791,      0,  4375,  -41.7,   2.5, 0.525, 490,  0,\r\n							 14626,      0,  4313,  -42.2,  -2.9, 0.521, 492,  0,\r\n							 14418,      0,  4250,  -44.3,  -0.8, 0.521, 496,  0,\r\n							 14211,      0,  4188,  -44.3,  -1.7, 0.529, 496,  0,\r\n\r\n							 13963,      0,  4146,  -54.7,  -3.3, 0.538, 506,  0,\r\n							 13797,      0,  4063,  -65.1,  -3.7, 0.538, 510,  0,\r\n							 13632,      0,  3979,  -73.4,  -4.2, 0.542, 521,  0,\r\n							 13466,      0,  3833,  -79.2,  -2.9, 0.550, 529,  1,\r\n							 13383,      0,  3792,  -80.7,  -2.5, 0.550, 533,  3,\r\n							 13300,      0,  3750,  -80.7,  -1.7, 0.558, 538,  6,\r\n							 13259,      0,  3708,  -79.2,  -2.1, 0.563, 542,  9,\r\n							 13135,      0,  3625,  -77.1,  -0.4, 0.567, 548, 13,\r\n							 13052,      0,  3563,  -74.5,  -0.8, 0.567, 554, 16,\r\n							 12969,      0,  3521,  -72.4,   0.0, 0.567, 558, 20,\r\n							 12927,      0,  3500,  -70.8,   0.0, 0.571, 560, 23,\r\n							 12803,      0,  3458,  -69.8,   0.4, 0.575, 565, 26,\r\n							 12762,      0,  3417,  -68.2,   0.8, 0.575, 569, 28,\r\n							 12638,      0,  3375,  -66.7,   0.8, 0.579, 573, 33,\r\n							 12555,      0,  3354,  -64.6,   0.8, 0.579, 575, 37,\r\n							 12430,      0,  3292,  -61.5,   1.3, 0.583, 579, 41,\r\n							 12306,      0,  3229,  -59.4,   0.8, 0.583, 581, 46,\r\n							 12223,      0,  3188,  -57.8,   0.8, 0.583, 583, 51,\r\n							 12099,      0,  3167,  -54.7,   0.8, 0.579, 583, 56,\r\n							 11975,      0,  3104,  -53.1,   0.8, 0.579, 583, 61,\r\n							 11809,      0,  3063,  -52.1,   0.0, 0.575, 579, 67,\r\n							 11685,      0,  3021,  -50.5,  -0.4, 0.571, 577, 71,\r\n							 11602,      0,  3000,  -50.0,  -1.7, 0.567, 575, 74,\r\n							 11519,      0,  2958,  -49.0,  -2.1, 0.563, 571, 78,\r\n							 11395,      0,  2896,  -48.4,  -2.9, 0.554, 569, 82,\r\n							 11271,      0,  2875,  -47.4,  -2.9, 0.550, 565, 86,\r\n							 11146,      0,  2833,  -46.9,  -2.9, 0.546, 560, 87,\r\n							 10939,      0,  2750,  -46.9,  -2.9, 0.538, 554, 87,\r\n							 10815,      0,  2708,  -46.9,  -2.9, 0.533, 548, 87,\r\n							 10649,      0,  2667,  -46.4,  -2.5, 0.529, 542, 86,\r\n							 10567,      0,  2646,  -47.4,  -1.2, 0.525, 542, 83,\r\n							 10525,      0,  2625,  -47.9,  -1.7, 0.521, 540, 80,\r\n							 10442,      0,  2604,  -47.9,  -1.7, 0.517, 538, 75,\r\n							 10318,      0,  2542,  -47.9,  -2.5, 0.517, 538, 71,\r\n							 10235,      0,  2500,  -48.4,  -2.9, 0.513, 531, 68,\r\n							 10152,      0,  2458,  -47.9,  -2.9, 0.513, 533, 66,\r\n							  9945,      0,  2396,  -47.4,  -2.5, 0.508, 540, 65,\r\n							  9738,      0,  2333,  -46.9,  -0.4, 0.504, 535, 64,\r\n							  9573,      0,  2250,  -46.9,   0.0, 0.508, 533, 66,\r\n							  9407,      0,  2208,  -46.9,   0.0, 0.500, 531, 63,\r\n							  9241,      0,  2167,  -47.4,   0.0, 0.500, 531, 61,\r\n							  9076,      0,  2083,  -46.9,  -1.2, 0.496, 529, 59,\r\n							  8910,      0,  2021,  -46.4,  -2.9, 0.488, 529, 58,\r\n							  8868,      0,  2000,  -46.4,  -2.1, 0.492, 529, 55,\r\n							  8744,      0,  1979,  -46.4,  -2.1, 0.492, 529, 55,\r\n							  8579,      0,  1896,  -45.8,  -2.9, 0.492, 527, 56,\r\n							  8454,      0,  1854,  -45.8,  -2.1, 0.488, 531, 58,\r\n							  8413,      0,  1833,  -45.8,  -2.5, 0.488, 529, 60,\r\n							  8371,      0,  1813,  -45.8,  -2.5, 0.488, 529, 62,\r\n							  8247,      0,  1771,  -44.8,  -2.1, 0.483, 529, 63,\r\n							  8123,      0,  1750,  -44.3,  -0.4, 0.483, 527, 60,\r\n							  7999,      0,  1688,  -44.3,  -0.4, 0.479, 523, 58,\r\n							  7916,      0,  1667,  -43.7,  -0.4, 0.479, 527, 52,\r\n							  7792,      0,  1625,  -44.8,  -0.8, 0.479, 529, 52,\r\n							  7709,      0,  1583,  -43.7,  -0.4, 0.479, 529, 55,\r\n							  7460,      0,  1500,  -43.2,   1.7, 0.479, 525, 55,\r\n							  7336,      0,  1458,  -42.7,   0.8, 0.479, 529, 57,\r\n							  7253,      0,  1417,  -42.7,  -0.4, 0.479, 525, 59,\r\n							  7087,      0,  1375,  -42.2,  -0.8, 0.475, 529, 60,\r\n							  6963,      0,  1333,  -42.7,   0.0, 0.471, 525, 62,\r\n							  6839,      0,  1292,  -42.2,   0.0, 0.471, 527, 62,\r\n							  6756,      0,  1271,  -42.7,  -0.4, 0.463, 525, 60,\r\n							  6632,      0,  1229,  -42.7,  -0.8, 0.463, 527, 58,\r\n							  6549,      0,  1188,  -42.2,  -0.4, 0.467, 523, 56,\r\n							  6508,      0,  1167,  -42.7,  -0.4, 0.467, 525, 54,\r\n							  6508,      0,  1167,  -42.2,  -0.4, 0.467, 523, 53,\r\n							  6383,      0,  1125,  -42.2,  -0.4, 0.467, 527, 54,\r\n							  6301,      0,  1104,  -42.7,  -0.8, 0.467, 523, 57,\r\n							  6259,      0,  1083,  -42.2,  -0.4, 0.463, 525, 59,\r\n							  6135,      0,  1042,  -42.7,  -0.4, 0.458, 523, 62,\r\n							  6011,      0,  1000,  -42.7,  -0.4, 0.454, 527, 59,\r\n							  5886,      0,   938,  -42.7,  -0.8, 0.458, 523, 57,\r\n							  5845,      0,   917,  -42.7,  -0.8, 0.454, 523, 55,\r\n							  5762,      0,   896,  -42.7,  -1.2, 0.454, 521, 54,\r\n							  5679,      0,   875,  -42.7,  -2.1, 0.454, 521, 52,\r\n							  5638,      0,   854,  -43.2,  -2.5, 0.450, 519, 49,\r\n							  5555,      0,   833,  -42.7,  -2.9, 0.450, 517, 45,\r\n							  5472,      0,   792,  -42.2,  -2.1, 0.450, 519, 43,\r\n							  5431,      0,   771,  -42.2,  -2.5, 0.450, 523, 41,\r\n							  5348,      0,   750,  -42.2,  -2.5, 0.446, 525, 40,\r\n							  5141,      0,   667,  -42.2,  -1.2, 0.446, 529, 41,\r\n							  5099,      0,   646,  -41.7,  -1.7, 0.446, 529, 44,\r\n							  5058,      0,   625,  -41.1,  -1.7, 0.446, 529, 51,\r\n							  5017,      0,   604,  -41.1,  -1.2, 0.446, 527, 54,\r\n							  4934,      0,   583,  -41.1,  -0.8, 0.446, 525, 58,\r\n							  4809,      0,   542,  -41.1,  -0.4, 0.446, 521, 59,\r\n							  4685,      0,   521,  -40.6,  -1.7, 0.446, 519, 56,\r\n							  4644,      0,   500,  -40.6,  -2.1, 0.442, 523, 53,\r\n\r\n							  4561,      0,   458,  -40.6,  -3.7, 0.446, 515, 49, //~~1.1547;\r\n							  4478,      0,   438,  -41.7,  -2.9, 0.442, 521, 44,\r\n							  4395,      0,   396,  -43.2,  -2.1, 0.442, 519, 42,\r\n							  4395,      0,   375,  -43.7,  -2.5, 0.438, 517, 40,\r\n							  4230,      0,   313,  -42.7,  -3.7, 0.433, 513, 40,\r\n							  4147,      0,   292,  -40.6,  -3.7, 0.429, 510, 36,\r\n							  4023,      0,   229,  -36.5,  -3.3, 0.425, 508, 34,\r\n							  3940,      0,   208,  -31.8,   0.4, 0.421, 506, 38,\r\n							  3815,      0,   188,  -28.6,   1.3, 0.417, 502, 35,\r\n							  3733,      0,   167,  -26.0,   1.3, 0.413, 498, 33,\r\n							  3691,      0,   146,  -25.0,   0.4, 0.408, 496, 38,\r\n							  3567,      0,   125,  -22.9,  -0.8, 0.404, 485, 38,\r\n							  3484,      0,   104,  -19.3,  -1.2, 0.404, 479, 35,\r\n							  3401,      0,   104,  -16.1,  -0.4, 0.396, 473, 31,\r\n							  3360,      0,    83,  -14.6,  -0.8, 0.392, 471, 28,\r\n							  3318,      0,    83,  -13.5,  -1.2, 0.392, 467, 26,\r\n							  3153,      0,    63,   -9.4,  -2.1, 0.379, 458, 25,\r\n							  3070,      0,    63,   -8.9,  -2.5, 0.375, 448, 24,\r\n							  3028,      0,    63,   -7.8,  -1.7, 0.371, 444, 22,\r\n							  2987,      0,    63,   -6.8,  -1.7, 0.367, 438, 19,\r\n							  2946,      0,    63,   -6.8,  -2.1, 0.367, 435, 16,\r\n							  2904,      0,    63,   -5.2,  -2.5, 0.363, 433, 14,\r\n							  2821,      0,    42,   -5.2,  -3.3, 0.363, 429, 13,\r\n							  2739,      0,    42,   -5.2,  -2.5, 0.363, 425, 15,\r\n							  2697,      0,    42,   -5.2,  -0.4, 0.350, 421, 17,\r\n							  2573,      0,    42,   -4.7,   0.4, 0.346, 417, 24,\r\n							  2449,      0,    42,   -4.7,  -1.7, 0.333, 404, 32,\r\n							  2407,      0,    42,   -4.2,  -2.1, 0.333, 402, 37,\r\n							  2283,      0,    42,   -4.2,  -2.9, 0.321, 385, 42,\r\n							  2200,      0,    42,   -4.2,  -2.5, 0.317, 373, 50,\r\n							  2159,      0,    42,   -4.2,  -2.5, 0.308, 369, 56,\r\n							  2117,      0,     5,   -4.2,  -2.5, 0.304, 367, 63,\r\n							  \r\n							  1952,      0,     4,   -3.0,  -1.7, 0.296, 360, 64,\r\n							  1910,      0,     3,   -2.0,  -0.8, 0.296, 352, 65,\r\n							  1662,      0,     2,   -1.0,  -2.1, 0.267, 317, 65,\r\n							  1537,    -10,     1,   -0.5,  -2.9, 0.254, 308, 65,\r\n							  1413,   -9.4,     0,   -0.3,   0.4, 0.246, 304, 65,\r\n							  \r\n							  1372,   -9.4,     0,      0,   0.4, 0.242, 300, 58,\r\n							  1330,      0,     0,      0,   0.0, 0.233, 294, 53,\r\n							  1248,      0,     0,      0,   0.0, 0.233, 288, 47,\r\n							  1206,      0,     0,      0,   0.0, 0.221, 285, 42,\r\n							  1123,      0,     0,      0,   0.0, 0.221, 281, 36,\r\n							  1040,      0,     0,      0,   0.4, 0.213, 273, 31,\r\n							  1040,      0,     0,      0,   0.4, 0.217, 271, 28,\r\n								999,      0,     0,      0,   0.8, 0.217, 269, 25,\r\n								958,      0,     0,      0,   1.3, 0.217, 267, 20,\r\n								916,      0,     0,      0,   2.1, 0.217, 265, 16,\r\n								916,      0,     0,      0,   2.1, 0.217, 263, 10,\r\n								875,      0,     0,      0,   2.1, 0.217, 260,  5,\r\n								792,      0,     0,      0,   2.1, 0.213, 256,  2,\r\n								750,      0,     0,      0,   1.7, 0.213, 254,  1,\r\n								543,      0,     0,      0,   0.8, 0.200, 250,  0,\r\n								\r\n								419,      0,     0,      0,   0.0, 0.196, 217,  0,\r\n								295,      0,     0,      0,   0.4, 0.171, 188,  0,\r\n								171,      0,     0,      0,   0.0, 0.142, 165,  0,\r\n								  5,      0,     0,      0,   0.0, 0.129, 125,  0,\r\n							  -119,      0,     0,      0,   0.0, 0.017,  46,  0,\r\n							  -180,      5,     0,      0,   0.0, 0.008,   4,  0,\r\n						];\r\n						//for(var cV,Vi = 0; cV = gTable[Vi], Vi < gTable.Length; Vi++)\r\n						//{\r\n							//switch(Vi % 8)\r\n							//{\r\n								//case 0 : case 1 : case 2 : case 6 : case 7 :  cV = (Round(cV));                          break;\r\n								//case 3 : case 4 :                             cV = (Round(cV * 10) / 10).ToFixed(1);     break;\r\n								//case 5 :                                      cV = (Round(cV * 1000) / 1000).ToFixed(3); break;\r\n							//}\r\n							//gTable[Vi] = cV;\r\n						//}\r\n						//gTable = gTable.ToString().Replace(/.*?,/g,\"\\t$&\");\r\n						//gTable = gTable.ToString().Replace(/.*?,.*?,.*?,.*?,.*?,.*?,.*?,.*?,/g,\"$&\\r\\n\");\r\n						\r\n\r\n						return oTable;\r\n					}\r\n				 },\r\n				Fixed    : \r\n				 {\r\n					get : function()\r\n					{\r\n						return localStorage[\"PathFixes\"] ? JSON.parse(localStorage[\"PathFixes\"]) : this.Original;\r\n					}\r\n				 },\r\n			 },\r\n			Series : \r\n			 {\r\n				Original : \r\n				 {\r\n					get once()\r\n					{\r\n						return UVS.Data.GetSeriesFromTable(UVS.Data[DefaultFlight].Table.Original);\r\n					}\r\n				 },\r\n				Fixed    : \r\n				 {\r\n					///get : function()\r\n					get once()\r\n					{\r\n						return UVS.Data.GetSeriesFromTable(UVS.Data[DefaultFlight].Table.Fixed);\r\n					},\r\n				 }\r\n			 },\r\n			//Series : \r\n			\r\n			SyncD2S : function()\r\n			{\r\n				\r\n			},\r\n			SyncS2D : function()\r\n			{\r\n				\r\n			},\r\n		 },\r\n		\r\n		GetSeriesFromTable : function(iTable)\r\n		 {\r\n			//~~ smoothing position, vspeed and the bank angle data;\r\n			var _AvgPP = [], _AvgVV = [], _AvgBB = [];\r\n			{\r\n				for(var Pi = 0; Pi < iTable.Length; Pi += 8)\r\n				{\r\n					_AvgPP.Add(new Vector3(iTable[Pi + 1], iTable[Pi],iTable[Pi + 2])); //~~ reordered coordinates;\r\n					_AvgVV.Add(iTable[Pi + 3]);\r\n					_AvgBB.Add(iTable[Pi + 4]);\r\n				}\r\n				\r\n				if(0)\r\n				{\r\n\r\n					Position : for(var cI = 0; cI <  0; cI++){var cP = _AvgPP[0], pP = cP.Clone(), nP = cP.Clone();  for(var Pi = 0; Pi < _AvgPP.Length; Pi ++) {pP = cP; cP = nP; nP = _AvgPP[Pi + 1] || nP;   _AvgPP[Pi] = pP.Add(cP).Add(nP).MultiplyScalar(1 / 3);}}\r\n					VSpd     : for(var cI = 0; cI <  1; cI++){var cV = _AvgVV[0], pV = cV,         nV = cV;          for(var Pi = 0; Pi < _AvgPP.Length; Pi ++) {pV = cV; cV = nV; nV = _AvgVV[Pi + 1] || nV;   _AvgVV[Pi] = (pV + cV + nV) / 3;}}\r\n					//Bank     : for(var cI = 0; cI < 5; cI++){var cB = _AvgBB[0], pB = cB,         nB = cB;          for(var Pi = 0; Pi < _AvgPP.Length; Pi ++) {pB = cB; cB = nB; nB = _AvgBB[Pi + 1] || nB;   _AvgBB[Pi] = (pB + cB + nB) / 3;}}\r\n\r\n\r\n						//for(var cI = 0; cI < 20; cI++) for(var Pi = 0; Pi < _AvgPP.Length; Pi ++) {}\r\n					//{\r\n						//pP = cP; cP = nP; nP = _AvgPP[Pi + 1] || nP;\r\n						//pV = cV; cV = nV; nV = _AvgVV[Pi + 1] || nV;\r\n						//pB = cB; cB = nB; nB = _AvgBB[Pi + 1] || nB;\r\n\r\n\r\n						//_AvgPP[Pi] = pP.Add(cP).Add(nP).MultiplyScalar(1 / 3);\r\n						//_AvgVV[Pi] = (pV + cV + nV) / 3;\r\n						//_AvgBB[Pi] = (pB + cB + nB) / 3;\r\n					//}\r\n				\r\n				}\r\n				\r\n				\r\n				//debugger;\r\n			}\r\n			\r\n			//~~ source series input;\r\n\r\n			//debugger;\r\n			var _SrcData = new TimeSeries.Set();\r\n			{\r\n				for(var cVal,pVal, cPos,Pi = 0; Pi < iTable.Length; Pi += 8, pVal = cVal)\r\n				{\r\n					cPos = _AvgPP[Pi / 8];\r\n					var cMSpd = iTable[Pi + 5];\r\n\r\n					cVal = {};\r\n					{\r\n					\r\n\r\n						//cVal.Time = pVal.Time.\r\n						\r\n						\r\n						//cVal.VSpd = iTable[Pi + 3];\r\n						//cVal.Bank = iTable[Pi + 4];\r\n						cVal.VSpd = _AvgVV[Pi / 8];\r\n						cVal.Bank = _AvgBB[Pi / 8];\r\n						\r\n						cVal.MSpd = cMSpd;\r\n						cVal.IAS  = iTable[Pi + 6];\r\n						cVal.SpdB = iTable[Pi + 7];\r\n\r\n\r\n						cVal.Position = cPos;\r\n						{\r\n							//pVal.\r\n							if(Pi == 0)\r\n							{\r\n								cVal.BwdV  = new Vector3;\r\n								cVal.FwdV  = new Vector3;\r\n\r\n								cVal.TimeD = 0;\r\n								cVal.TimeV = 0;\r\n							}\r\n							else\r\n							{\r\n								\r\n								pVal.FwdV = cPos.Subtract(pVal.Position);\r\n\r\n\r\n\r\n								//if(Pi == 1)\r\n								//{\r\n								//	pVal.TimeD = 0;///cVal.FwdV.Z / cVal.VSpd;\r\n								//	pVal.TimeV = 0;//cVal.TimeV + cVal.TimeD;\r\n								//}\r\n\r\n								cVal.BwdV  = pVal.FwdV.Inverse();\r\n\r\n								//cVal.BwdV = pVal.FwdV;.pVal.Position.Subtract(cPos);\r\n								//pVal.FwdV  = cPos.Subtract(pVal.Position);\r\n\r\n								cVal.TimeD = pVal.FwdV.Z / cVal.VSpd;\r\n								cVal.TimeV = pVal.TimeV + cVal.TimeD;\r\n							}\r\n						}\r\n\r\n						cVal.Velocity = cVal.BwdV.Inverse().MultiplyScalar(1 / (cVal.TimeD || 1));\r\n						cVal.Vel      = undefined; //~~ disabled for approach diagram;//cVal.Velocity.Length;\r\n\r\n						if(Pi == 8)\r\n						{\r\n							pVal.Velocity = cVal.Velocity;\r\n							pVal.Vel      = cVal.Vel;\r\n						}\r\n\r\n						//cVal.Acceleration = cVal.BwdV.Inverse().MultiplyScalar(1 / (cVal.TimeD || 1));\r\n						cVal.Acc          = pVal ? cVal.Velocity.Length - pVal.Velocity.Length : 0;\r\n\r\n					};\r\n				\r\n					_SrcData.CreateEntry(Pi / 8, cVal);\r\n				}\r\n				//for(var cE,Ei = 0\r\n			}\r\n			//$.gTable = _SrcData;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n			return _SrcData;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n	\r\n			//~~ output regular series;\r\n			var oSeries = new TimeSeries.Set(), _Step = 0.1;\r\n			{\r\n				var _FstV = _SrcData.Entries[0].Value;\r\n				var _SndV = _SrcData.Entries[1].Value;\r\n				{\r\n					\r\n					var cEntry, pEntry = {Value : _FstV};\r\n					//var _DoUseZ = true;\r\n					{\r\n						for(var cPos = _SndV.Position.Set(0,0,null), _DoUseZ = true, _DoUseY = false; _DoUseZ || _DoUseY; _DoUseZ = cPos.Z >= 5000, _DoUseY = false && (!_DoUseZ && cPos.Y > -180))\r\n						{\r\n							if(_DoUseZ)\r\n							{\r\n								cPos = cPos.Set(0,0,cPos.Z + (pEntry.Value.VSpd * _Step));\r\n							}\r\n							else\r\n							{\r\n								if(cPos.Z != 0) //~~ switching to Y axis: f(z) -> f(y);\r\n								{\r\n									cPos = pEntry.Value.Position.Set(0,null,0);\r\n								}\r\n								\r\n								cPos = cPos.Set(0, cPos.Y - (pEntry.Value.MSpd * 250 * _Step), 0);\r\n							}\r\n\r\n							\r\n							cEntry = GetNearestEntry(cPos, _SrcData, false);\r\n							{\r\n								if(cEntry.Value.Position.Z > pEntry.Value.Position.Z)\r\n								{\r\n									GetNearestEntry(cPos, _SrcData, false, true);\r\n								}\r\n\r\n								cEntry.Value.Velocity = cEntry.Value.Position.Subtract(pEntry.Value.Position).MultiplyScalar(1 / _Step);\r\n								cEntry.Value.Vel      = cEntry.Value.Velocity.Length;\r\n\r\n								var _XXX = cEntry.Value.Vel;\r\n\r\n								//if(_XXX > 1000) debugger;\r\n\r\n								//if(cEntry.Time < pEntry.Time)\r\n								//{\r\n									////debugger;\r\n									//DataX.GetNearestEntry(cPos, _SrcData, false, true);\r\n								//}\r\n\r\n								//if(cPos.Z < 18000) debugger;\r\n							}\r\n							oSeries.Add(cEntry); \r\n\r\n							pEntry = cEntry;\r\n						}\r\n					}\r\n				}\r\n				\r\n				\r\n				for(var cE,Ei = 0; cE = oSeries.Entries[Ei]; Ei++)\r\n				{\r\n					if(!cE.Value.Velocity) debugger;\r\n				}\r\n\r\n				//~~ smooth velocity;\r\n				if(0) for(var cI = 0; cI < 100; cI++)\r\n				{\r\n					//debugger;\r\n					var cE = oSeries.Entries[0], pE = cE, nE = cE;\r\n				\r\n					for(var Ei = 0; Ei < oSeries.Entries.Length; Ei ++)\r\n					{\r\n						pE = cE;\r\n						cE = nE;\r\n						nE = oSeries.Entries[Ei + 1] || nE;\r\n						\r\n						cE.Value.Vel = (pE.Value.Vel + cE.Value.Vel + nE.Value.Vel) / 3;\r\n					}\r\n				}\r\n			}\r\n			return oSeries;\r\n		 },\r\n		//LastComputedEntry  : undefined, \r\n		//SkippedRequests    : 0,\r\n		\r\n		GetNearestEntry  : function(iPos, iSrcSeries, iDoOpt, iDoDebug, oEntry$obj)\r\n		 {\r\n			var iFlightData = this[DefaultFlight];\r\n\r\n			//if(iDoDebug) debugger;\r\n			//debugger;\r\n			if(iDoOpt == undefined) iDoOpt = true;\r\n\r\n			if(iDoOpt)\r\n			{\r\n				var self = GetNearestEntry; \r\n\r\n				if(self.SkipRRc == undefined || self.SkipRRc >= 10) self.SkipRRc = 0;\r\n				else\r\n				{\r\n					self.SkipRRc++;\r\n					return self.Last;\r\n				}\r\n			}\r\n			if(iDoOpt && !iPos) iPos = gSIM.Vehicle.Position;\r\n			\r\n			//if(iDoOpt && iAlt_Pos == undefined)  iAlt_Pos = gSIM.Vehicle.Position;\r\n			//if( typeof(iAlt_Pos) == \"object\") debugger;\r\n\r\n			///if(!iSrcTable) iSrcTable = this[DefaultFlight].Table.Fixed;\r\n \r\n			if(!iSrcSeries) iSrcSeries = this[DefaultFlight].Series.Fixed;\r\n			\r\n			//if(iPos.X == 0 && iPos.Y != 0 && iPos.Z == 0)\r\n			//{\r\n				//debugger;\r\n			//}\r\n			var _Stack = [], _TimeStack = [];\r\n			var _Time1, _Time2, _Val1, _Val2, _Err1 = 1e99, _Err2 = 1e99; for(var _EE = iSrcSeries.Entries, cEntry,Ei = 0; cEntry = _EE[Ei], Ei < (330 || _EE.Length); Ei++) //~~ HERE;\r\n			{\r\n				\r\n				//var cErr = iDoOpt ? cEntry.Value.Position.Z - iAlt_Pos : cEntry.Value.Position.DistanceTo(iAlt_Pos);\r\n				var cErr, cPos = cEntry.Value.Position;\r\n				{\r\n					if(iPos.Length != 0 && iPos.Length == Abs(iPos.Y) && cPos.Z > 5000) continue;\r\n\r\n\r\n					if     (iPos.Length == 0) cErr = 0;\r\n					else if(iPos.Length != Max(Abs(iPos.X),Abs(iPos.Y),Abs(iPos.Z))) cErr = cPos.DistanceTo(iPos);\r\n					\r\n					//else if(iPos.X != 0) cErr = cPos.X - iPos.X;\r\n					else if(iPos.Y != 0) cErr = Abs(cPos.Y - iPos.Y);\r\n					else if(iPos.Z != 0) cErr = Abs(cPos.Z - iPos.Z);\r\n\r\n					else throw \"WTF\";\r\n				}\r\n				//if(_Err1 == undefined)\r\n				if(_Stack.Length == 0 || cErr < _Stack[0].Err)\r\n				{\r\n					_Stack.unshift({Err : cErr, Time : Ei, Val : cEntry.Value});\r\n					_TimeStack.unshift(cEntry.Time);\r\n				}\r\n				//if(_Val1 == undefined || (cErr < _Err1 && cErr != _Err2))                 {_Err1  = cErr; _Time1 = Ei; _Val1  = cEntry.Value;}\r\n				//if(_Val2 == undefined || (cErr < _Err2 && cErr != _Err1)){_Err2  = cErr; _Time2 = Ei; _Val2  = cEntry.Value;}\r\n\r\n				//if(cErr < _Err1)\r\n				//{\r\n					//_Err2  = _Err1;  _Time2 = _Time1;  _Val2  = _Val1;\r\n					//_Err1  = cErr;   _Time1 = Ei;      _Val1  = cEntry.Value;\r\n				//}\r\n			}\r\n			//if(iDoDebug) debugger;\r\n			//if(_Err1\r\n\r\n			var _S1 = _Stack[0], _S2 = _Stack[1];\r\n			{\r\n				if(_S1){ _Err1  = _S1.Err;  _Time1 = _S1.Time;  _Val1  = _S1.Val;}\r\n				if(_S2){ _Err2  = _S2.Err;  _Time2 = _S2.Time;  _Val2  = _S2.Val;}\r\n			}\r\n			\r\n			\r\n			var _Val2W = (_Err1 / (_Err1 + _Err2)) || 0;\r\n			\r\n			//if\r\n			//if(_Val2W < 0 || _Val2W > 1) debugger;\r\n\r\n			oEntry =  GetNearestEntry.Last = new TimeSeries.Entry();\r\n			{\r\n				if(_Val1 && _Val2)\r\n				{\r\n					//if(Abs(_Time1 - _Time2) > 1)\r\n					//{\r\n						////console.info(_TimeStack);\r\n						//debugger;\r\n					//}\r\n\r\n					\r\n					oEntry.Time  = Mix(_Time1, _Time2, _Val2W);\r\n					oEntry.Value =\r\n					{\r\n						Position : Vector3.Mix(_Val1.Position, _Val2.Position, _Val2W),\r\n						Velocity : Vector3.Mix(_Val1.Velocity, _Val2.Velocity, _Val2W),\r\n						Vel      :    Math.Mix(_Val1.Vel,      _Val2.Vel,      _Val2W),\r\n						Acc      :    Math.Mix(_Val1.Acc,      _Val2.Acc,      _Val2W),\r\n\r\n						VSpd     :    Math.Mix(_Val1.VSpd, _Val2.VSpd, _Val2W),\r\n						Bank     :    Math.Mix(_Val1.Bank, _Val2.Bank, _Val2W),\r\n						MSpd     :    Math.Mix(_Val1.MSpd, _Val2.MSpd, _Val2W),\r\n						IAS      :    Math.Mix(_Val1.IAS,  _Val2.IAS,  _Val2W),\r\n						SpdB     :    Math.Mix(_Val1.SpdB, _Val2.SpdB, _Val2W),\r\n\r\n						BA       : [_Time1, _Time2]\r\n					}\r\n					\r\n					//if($.gAlgoCns)\r\n					//{\r\n						//gAlgoCns.Clear();\r\n						//gAlgoCns.WriteLine([\"Time1\", _Time1]);\r\n						//gAlgoCns.WriteLine([\"Time2\", _Time2]);\r\n						//gAlgoCns.WriteLine([\"Div\",   Abs(_Time1 - _Time2)]);\r\n					//}\r\n				}\r\n				else if(_Val1 == undefined ^ _Val2 == undefined)\r\n				{\r\n					//debugger;\r\n					oEntry.Time  = _Val1 ? _Time1 : _Time2;\r\n					oEntry.Value = _Val1 || _Val2;\r\n				}\r\n				else throw \"WTF\";\r\n			}\r\n\r\n			var _V = oEntry.Value; if(isNaN(_V.IAS) || isNaN(_V.MSpd) || isNaN(_V.VSpd) || isNaN(_V.SpdB) || isNaN(_V.Position.Z)) debugger;\r\n\r\n			//throw \"WW\";\r\n			return oEntry;\r\n		 },\r\n		//GetNearestEntry  : function(iPos, iSrcTable$arr, iDoOpt, iDoDebug, oEntry$obj)\r\n		 //{\r\n			//var iFlightData = this[\"1K1\"];\r\n\r\n			////if(iDoDebug) debugger;\r\n			////debugger;\r\n			//if(iDoOpt == undefined) iDoOpt = true;\r\n\r\n			//if(iDoOpt)\r\n			//{\r\n				//var self = GetNearestEntry; \r\n\r\n				//if(self.SkipRRc == undefined || self.SkipRRc >= 10) self.SkipRRc = 0;\r\n				//else\r\n				//{\r\n					//self.SkipRRc++;\r\n					//return self.Last;\r\n				//}\r\n			//}\r\n			//if(iDoOpt && !iPos) iPos = gSIM.Vehicle.Position;\r\n			\r\n			////if(iDoOpt && iAlt_Pos == undefined)  iAlt_Pos = gSIM.Vehicle.Position;\r\n			////if( typeof(iAlt_Pos) == \"object\") debugger;\r\n\r\n			//if(!iSrcData) iSrcData = gApp.ApproachDiagram.VymData;\r\n			\r\n			////if(iPos.X == 0 && iPos.Y != 0 && iPos.Z == 0)\r\n			////{\r\n				////debugger;\r\n			////}\r\n			//var _Stack = [], _TimeStack = [];\r\n			//var _Time1, _Time2, _Val1, _Val2, _Err1 = 1e99, _Err2 = 1e99; for(var _EE = iSrcData.Entries, cEntry,Ei = 0; cEntry = _EE[Ei], Ei < _EE.Length; Ei++)\r\n			//{\r\n				\r\n				////var cErr = iDoOpt ? cEntry.Value.Position.Z - iAlt_Pos : cEntry.Value.Position.DistanceTo(iAlt_Pos);\r\n				//var cErr, cPos = cEntry.Value.Position;\r\n				//{\r\n					//if(iPos.Length != 0 && iPos.Length == Abs(iPos.Y) && cPos.Z > 5000) continue;\r\n\r\n\r\n					//if     (iPos.Length == 0) cErr = 0;\r\n					//else if(iPos.Length != Max(Abs(iPos.X),Abs(iPos.Y),Abs(iPos.Z))) cErr = cPos.DistanceTo(iPos);\r\n					\r\n					////else if(iPos.X != 0) cErr = cPos.X - iPos.X;\r\n					//else if(iPos.Y != 0) cErr = Abs(cPos.Y - iPos.Y);\r\n					//else if(iPos.Z != 0) cErr = Abs(cPos.Z - iPos.Z);\r\n\r\n					//else throw \"WTF\";\r\n				//}\r\n				////if(_Err1 == undefined)\r\n				//if(_Stack.Length == 0 || cErr < _Stack[0].Err)\r\n				//{\r\n					//_Stack.unshift({Err : cErr, Time : Ei, Val : cEntry.Value});\r\n					//_TimeStack.unshift(cEntry.Time);\r\n				//}\r\n				////if(_Val1 == undefined || (cErr < _Err1 && cErr != _Err2))                 {_Err1  = cErr; _Time1 = Ei; _Val1  = cEntry.Value;}\r\n				////if(_Val2 == undefined || (cErr < _Err2 && cErr != _Err1)){_Err2  = cErr; _Time2 = Ei; _Val2  = cEntry.Value;}\r\n\r\n				////if(cErr < _Err1)\r\n				////{\r\n					////_Err2  = _Err1;  _Time2 = _Time1;  _Val2  = _Val1;\r\n					////_Err1  = cErr;   _Time1 = Ei;      _Val1  = cEntry.Value;\r\n				////}\r\n			//}\r\n			////if(iDoDebug) debugger;\r\n			////if(_Err1\r\n\r\n			//var _S1 = _Stack[0], _S2 = _Stack[1];\r\n			//{\r\n				//if(_S1){ _Err1  = _S1.Err;  _Time1 = _S1.Time;  _Val1  = _S1.Val;}\r\n				//if(_S2){ _Err2  = _S2.Err;  _Time2 = _S2.Time;  _Val2  = _S2.Val;}\r\n			//}\r\n			\r\n			\r\n			//var _Val2W = (_Err1 / (_Err1 + _Err2)) || 0;\r\n			\r\n			////if\r\n			////if(_Val2W < 0 || _Val2W > 1) debugger;\r\n\r\n			//oEntry =  GetNearestEntry.Last = new TimeSeries.Entry();\r\n			//{\r\n				//if(_Val1 && _Val2)\r\n				//{\r\n					////if(Abs(_Time1 - _Time2) > 1)\r\n					////{\r\n						//////console.info(_TimeStack);\r\n						////debugger;\r\n					////}\r\n\r\n					\r\n					//oEntry.Time  = Mix(_Time1, _Time2, _Val2W);\r\n					//oEntry.Value =\r\n					//{\r\n						//Position : Vector3.Mix(_Val1.Position, _Val2.Position, _Val2W),\r\n						//Velocity : Vector3.Mix(_Val1.Velocity, _Val2.Velocity, _Val2W),\r\n						//Vel      :    Math.Mix(_Val1.Vel,      _Val2.Vel,      _Val2W),\r\n\r\n						////Velocity : iDoOpt ? Vector3.Mix(_Val1.Velocity, _Val2.Velocity, _Val2W) : undefined,\r\n						////Vel      : iDoOpt ?    Math.Mix(_Val1.Vel,      _Val2.Vel,      _Val2W) : undefined,\r\n\r\n\r\n						////cV.Vel  = cV.Velocity.Length;\r\n						//VSpd     : Math.Mix(_Val1.VSpd, _Val2.VSpd, _Val2W),\r\n						//Bank     : Math.Mix(_Val1.Bank, _Val2.Bank, _Val2W),\r\n						//MSpd     : Math.Mix(_Val1.MSpd, _Val2.MSpd, _Val2W),\r\n						//IAS      : Math.Mix(_Val1.IAS,  _Val2.IAS,  _Val2W),\r\n						//SpdB     : Math.Mix(_Val1.SpdB, _Val2.SpdB, _Val2W),\r\n\r\n						//BA : [_Time1, _Time2]\r\n					//}\r\n					\r\n					////if($.gAlgoCns)\r\n					////{\r\n						////gAlgoCns.Clear();\r\n						////gAlgoCns.WriteLine([\"Time1\", _Time1]);\r\n						////gAlgoCns.WriteLine([\"Time2\", _Time2]);\r\n						////gAlgoCns.WriteLine([\"Div\",   Abs(_Time1 - _Time2)]);\r\n					////}\r\n				//}\r\n				//else if(_Val1 == undefined ^ _Val2 == undefined)\r\n				//{\r\n					////debugger;\r\n					//oEntry.Time  = _Val1 ? _Time1 : _Time2;\r\n					//oEntry.Value = _Val1 || _Val2;\r\n				//}\r\n				//else throw \"WTF\";\r\n			//}\r\n\r\n			//var _V = oEntry.Value; if(isNaN(_V.IAS) || isNaN(_V.MSpd) || isNaN(_V.VSpd) || isNaN(_V.SpdB) || isNaN(_V.Position.Z)) debugger;\r\n\r\n\r\n			//return oEntry;\r\n		 //},\r\n		//GetNearestEntries  : function(iAlt_Pos$any, iSrcData$arr, oEE$obj)\r\n		 //{\r\n			//oEE = {};\r\n			//{\r\n				//var _UpVal, _LoVal, _UpErr, _LoErr; for(var cVal,Vi = 0; cVal = iSrcData[Vi], Vi < iSrcData.Length; Vi++)\r\n				//{\r\n					//var cErr = typeof(iAlt_Pos) == \"number\" ? cVal.Position.Z - iAlt_Pos : cVal.Position.DistanceTo(iAlt_Pos);\r\n\r\n					//if(cErr > 0)\r\n					//{\r\n						//if(_UpVal == undefined || cErr <= _UpErr)\r\n						//{\r\n							//_UpVal = cVal;\r\n							//_UpErr = Abs(cErr);\r\n						//}\r\n					//}\r\n					//else if(cErr < 0)\r\n					//{\r\n						//if(_LoVal == undefined || Abs(cErr) <= _LoErr)\r\n						//{\r\n							//_LoVal = cVal;\r\n							//_LoErr = Abs(cErr);\r\n						//}\r\n					//}\r\n				//}\r\n\r\n				//oEE.UpV = _UpVal;\r\n				//oEE.LoV = _LoVal;\r\n\r\n				//oEE.UpE = _UpErr;\r\n				//oEE.LoE = _LoErr;\r\n				\r\n				//oEE.UpW = _LoErr / (_UpErr + _LoErr);\r\n				//oEE.LoW = 1 - oEE.UpW;\r\n			//}\r\n			//return oEE;\r\n		 //},\r\n	 }\r\n});",
	"../UVS/App.Events.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n	],\r\n	\r\n	gfInitEvents          : function(iApp)\r\n	 {\r\n		window.onresize = function()\r\n		{\r\n			//if($.iApp.Screen)   iApp.Screen   .UpdateSize();\r\n			//if($.iApp.Renderer) iApp.Renderer .UpdateSize();\r\n			//if($.iApp.FogLayer) iApp.FogLayer .UpdateSize();\r\n		};\r\n		$.gMouse = {X : 0, Y : 0, DX : 0, DY : 0, B1 : false, B2 : false, B3 : false};\r\n		{\r\n			window.onmousemove = function(iEvt)\r\n			{\r\n				gMouse.DX = iEvt.x - gMouse.X;\r\n				gMouse.DY = iEvt.y - gMouse.Y;\r\n\r\n				gMouse.X  = iEvt.x;\r\n				gMouse.Y  = iEvt.y;\r\n			};\r\n			window.onmousedown = function(iEvt)\r\n			{\r\n				if(iEvt.button == 0) gMouse.B1 = true;\r\n				if(iEvt.button == 1) gMouse.B2 = true;\r\n				if(iEvt.button == 2) gMouse.B3 = true;\r\n\r\n			};\r\n			window.onmouseup = function(iEvt)\r\n			{\r\n				if(iEvt.button == 0) gMouse.B1 = false;\r\n				if(iEvt.button == 1) gMouse.B2 = false;\r\n				if(iEvt.button == 2) gMouse.B3 = false;\r\n			};\r\n\r\n		};\r\n\r\n		$.gKeys = {};\r\n		{\r\n			\r\n			window.addEventListener(\"keydown\", function(iEvt)\r\n			{\r\n				switch(iEvt.keyCode)\r\n				{\r\n					case 17 : $.gKeys.Control   = true; break;\r\n					case 18 : $.gKeys.Alt       = true; break;\r\n\r\n					//case 67 : $.gW3D && gW3D.Cameras.CurrentViewMode++;    break; //~~ Impulse;\r\n					case 13 : $.gKeys.Enter     = true; break;\r\n					case 16 : $.gKeys.Shift     = true; break;\r\n					case 32 : $.gKeys.Space     = true; break;\r\n					\r\n					case 33 : $.gKeys.PageUp    = true; break;\r\n					case 34 : $.gKeys.PageDown  = true; break;\r\n					case 45 : $.gKeys.Insert    = true; break;\r\n					case 46 : $.gKeys.Delete    = true; break;\r\n					case 36 : $.gKeys.Home      = true; break;\r\n					case 35 : $.gKeys.End       = true; break;\r\n\r\n\r\n\r\n					case 38 : $.gKeys.Up        = true; break;\r\n					case 40 : $.gKeys.Down      = true; break;\r\n					case 37 : $.gKeys.Left      = true; break;\r\n					case 39 : $.gKeys.Right     = true; break;\r\n\r\n					case 65 : $.gKeys.A         = true; break;\r\n					case 66 : $.gKeys.B         = true; break;\r\n					case 67 : $.gKeys.C         = true; break;\r\n					case 68 : $.gKeys.D         = true; break;\r\n					case 69 : $.gKeys.E         = true; break;\r\n					case 70 : $.gKeys.F         = true; break;\r\n					case 71 : $.gKeys.G         = true; break;\r\n					case 72 : $.gKeys.H         = true; break;\r\n					case 73 : $.gKeys.I         = true; break;\r\n					case 74 : $.gKeys.J         = true; break;\r\n					case 75 : $.gKeys.K         = true; break;\r\n					case 76 : $.gKeys.L         = true; break;\r\n					case 77 : $.gKeys.M         = true; break;\r\n					case 78 : $.gKeys.N         = true; break;\r\n					case 79 : $.gKeys.O         = true; break;\r\n					case 80 : $.gKeys.P         = true; break;\r\n					case 81 : $.gKeys.Q         = true; break;\r\n					case 82 : $.gKeys.R         = true; break;\r\n					case 83 : $.gKeys.S         = true; break;\r\n					case 84 : $.gKeys.T         = true; break;\r\n					case 85 : $.gKeys.U         = true; break;\r\n					case 86 : $.gKeys.V         = true; break;\r\n					case 87 : $.gKeys.W         = true; break;\r\n					case 88 : $.gKeys.X         = true; break;\r\n					case 89 : $.gKeys.Y         = true; break;\r\n					case 90 : $.gKeys.Z         = true; break;\r\n\r\n\r\n					//case 219 : if($.gAP) gAP.Heading -= 1; break; //~~ [;\r\n					//case 221 : if($.gAP) gAP.Heading += 1; break; //~~ ];\r\n					////case 189 : if($.gAP) gAP.VSpeed  -= 1; break; //~~ -;\r\n					////case 187 : if($.gAP) gAP.VSpeed  += 1; break; //~~ +;\r\n					//case 220 : if($.gAP) gAP.VSpeed  = gSIM.Vehicle.PDelta.Z; break; //~~ \\;\r\n\r\n					////case 220 : if($.gAP) gAP.VSpeed  = gSIM.Vehicle.PDelta.Z; break; //~~ \\;\r\n\r\n					case 187 : $.gKeys.Equals   = true; break;\r\n					case 189 : $.gKeys.Minus    = true; break;\r\n\r\n					case 188 : $.gKeys.Comma    = true; break;\r\n					case 190 : $.gKeys.Period   = true; break;\r\n					case 191 : $.gKeys.Question = true; break;\r\n					//case 192 : $.gKeys.Tilda    = true; break;\r\n\r\n				}\r\n				\r\n\r\n				switch(iEvt.keyCode)\r\n				{\r\n					case 13 :\r\n					{\r\n						//gSIM.Vehicle.Autopilot.Toggle();\r\n						gSIM.Vehicle.Control.Inputs.BalRate = -gSIM.Vehicle.Control.Inputs.BalRate || (gSIM.Vehicle.Control.Inputs.Balance > 0.5 ? -1 : +1);\r\n						\r\n						break;\r\n					}\r\n\r\n					case 72 : iApp.HUD.ToggleVisibility(); localStorage[\"HUD.IsVisible\"] = gApp.HUD.IsVisible; break;\r\n					\r\n\r\n					case 96 : case 97 : case 98 : case 99 : case 100 : case 101 : case 102 : case 103 : case 104 : case 105 :\r\n					{\r\n						if(iApp.Renderer) iApp.Renderer.Camera.Mode = localStorage[\"Camera.Mode\"] = \"Num\" + (iEvt.keyCode - 96);\r\n\r\n						$.gLastCamP = undefined;\r\n\r\n						break;\r\n					}\r\n\r\n					case  19 : if(iApp.Simulator) iApp.Simulator.IsActive =! iApp.Simulator.IsActive; break;\r\n					case 192 : iApp.ApproachDiagram.ToggleVisibility(); localStorage[\"Info(ApproachDiagram)\"] = gApp.ApproachDiagram.IsVisible; break;\r\n\r\n					case  82 :\r\n					{\r\n						if(iEvt.altKey)\r\n						{\r\n							localStorage[\"IsWebGL\"] = !gApp.Renderer.IsWebGL;\r\n							window.location.reload();\r\n							iEvt.preventDefault();\r\n						}\r\n						break;\r\n					}\r\n\r\n					case  48 : case 49 : case 50 : case  51 : case  52 :\r\n					case  53 : case 54 : case 55 : case  56 : case  57 : \r\n					{\r\n						if(iEvt.altKey)\r\n						{\r\n							var _Cns = iApp.Consoles[iEvt.keyCode - 48];\r\n\r\n							if(_Cns)\r\n							{\r\n								_Cns.ToggleVisibility();\r\n								localStorage[\"Info(\" + _Cns.Title + \")\"] = _Cns.IsVisible;\r\n							}\r\n						}\r\n						else\r\n						{\r\n							if(iEvt.ctrlKey) AppState.Save(iEvt.keyCode - 48);\r\n							else             AppState.Load(iEvt.keyCode - 48);\r\n\r\n							iEvt.preventDefault();\r\n						}\r\n						break;\r\n					}\r\n				}\r\n				//iEvt.preventDefault();\r\n				\r\n				if($.gKeys.Control || $.gKeys.Shift || $.gKeys.Alt) \r\n				{\r\n					iEvt.preventDefault();\r\n				}\r\n			});\r\n\r\n			window.addEventListener(\"keyup\", function(iEvt)\r\n			{\r\n				switch(iEvt.keyCode)\r\n				{\r\n					case 17 : $.gKeys.Control   = false; break;\r\n					case 18 : $.gKeys.Alt       = false; break;\r\n\r\n					case 13 : $.gKeys.Enter     = false; break;\r\n					case 16 : $.gKeys.Shift     = false; break;\r\n					case 32 : $.gKeys.Space     = false; break;\r\n					\r\n					case 33 : $.gKeys.PageUp    = false; break;\r\n					case 34 : $.gKeys.PageDown  = false; break;\r\n					case 45 : $.gKeys.Insert    = false; break;\r\n					case 46 : $.gKeys.Delete    = false; break;\r\n					case 36 : $.gKeys.Home      = false; break;\r\n					case 35 : $.gKeys.End       = false; break;\r\n\r\n					case 38 : $.gKeys.Up        = false; break;\r\n					case 40 : $.gKeys.Down      = false; break;\r\n					case 37 : $.gKeys.Left      = false; break;\r\n					case 39 : $.gKeys.Right     = false; break;\r\n\r\n					case 65 : $.gKeys.A         = false; break;\r\n					case 66 : $.gKeys.B         = false; break;\r\n					case 67 : $.gKeys.C         = false; break;\r\n					case 68 : $.gKeys.D         = false; break;\r\n					case 69 : $.gKeys.E         = false; break;\r\n					case 70 : $.gKeys.F         = false; break;\r\n					case 71 : $.gKeys.G         = false; break;\r\n					case 72 : $.gKeys.H         = false; break;\r\n					case 73 : $.gKeys.I         = false; break;\r\n					case 74 : $.gKeys.J         = false; break;\r\n					case 75 : $.gKeys.K         = false; break;\r\n					case 76 : $.gKeys.L         = false; break;\r\n					case 77 : $.gKeys.M         = false; break;\r\n					case 78 : $.gKeys.N         = false; break;\r\n					case 79 : $.gKeys.O         = false; break;\r\n					case 80 : $.gKeys.P         = false; break;\r\n					case 81 : $.gKeys.Q         = false; break;\r\n					case 82 : $.gKeys.R         = false; break;\r\n					case 83 : $.gKeys.S         = false; break;\r\n					case 84 : $.gKeys.T         = false; break;\r\n					case 85 : $.gKeys.U         = false; break;\r\n					case 86 : $.gKeys.V         = false; break;\r\n					case 87 : $.gKeys.W         = false; break;\r\n					case 88 : $.gKeys.X         = false; break;\r\n					case 89 : $.gKeys.Y         = false; break;\r\n					case 90 : $.gKeys.Z         = false; break;\r\n\r\n					case 187 : $.gKeys.Equals   = false; break;\r\n					case 189 : $.gKeys.Minus    = false; break;\r\n\r\n					case 188 : $.gKeys.Comma    = false; break;\r\n					case 190 : $.gKeys.Period   = false; break;\r\n					case 191 : $.gKeys.Question = false; break;\r\n					case 192 : $.gKeys.Tilda    = false; break;\r\n\r\n					//default  : console.info(iEvt.keyCode);\r\n				}\r\n				//iEvt.preventDefault();\r\n				//console.info(iEvt.keyCode);\r\n			});\r\n		}\r\n		window.onresize();\r\n	 },\r\n});",
	"../UVS/App.Main.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'Math'           ,\r\n		'Math.Geometry'  ,\r\n		'System.Data'    ,\r\n		'System.Drawing' ,\r\n		'UVS'            ,\r\n		'THREE (T*)'     ,\r\n	],\r\n	\r\n	main : function()\r\n	 {\r\n		$.Q = Math.Geometry.Quaternion;\r\n		$.V = Math.Geometry.Vector3;\r\n		$.D090 = Math.D090;\r\n\r\n		$.gApp = new function Application(){};\r\n		 {\r\n			\r\n				$.gTable  = Data[\"SSPF1K1\"].Table.Fixed;\r\n				$.gSeries = Data[\"SSPF1K1\"].Series.Fixed;\r\n\r\n			if(0)\r\n			{\r\n				//gApp.PlotGrabber = new PlotGrabber({ZIndex : 8});\r\n				gApp.PathFixer   = new PathFixer({Table : gTable,  ZIndex : 9});\r\n				gApp.DataLeveler = new DataLeveler({Table : gTable, Series : gSeries, ZIndex : 10});\r\n			}\r\n			//return;\r\n			//return;\r\n			//return;\r\n			//window.addEventListener(\"keypress\", function(iEvt){console.info(iEvt.keyCode);}.Bind(this));\r\n\r\n\r\n			gApp.ApproachDiagram      = new Imaging.ApproachDiagram ({VymData : Data[\"SSPF1K1\"].Series.Original, ZIndex : 5, IsVisible : localStorage[\"Info(ApproachDiagram)\"] == \"true\"});\r\n			gApp.Simulator            = new Simulation.Engine       ({});\r\n\r\n			gApp.HUD                  = new Equipment.HUD.Screen    ({Type : \"Aircraft\", Color : \"#ffaa00\", ZIndex : 2, IsVisible : localStorage[\"HUD.IsVisible\"] != \"false\"});\r\n			\r\n			if(1)if(1) gApp.Renderer  = new Imaging.Renderer3D      ({IsWebGL : localStorage[\"IsWebGL\"] == \"true\"});\r\n			else       gApp.Fog       = new Imaging.FogLayer        ({});\r\n\r\n			gfInitConsoles(gApp);\r\n		 }\r\n		\r\n		$.gSIM = new function SimulatorObjects(){};\r\n		 {\r\n\r\n			gSIM.Vehicle = new Simulation.Vehicles.Buran();\r\n			\r\n			gApp.Simulator.Objects.Add(gSIM.Vehicle);\r\n\r\n			if(gApp.HUD)\r\n			{\r\n				gApp.HUD.DataSource = gSIM.Vehicle;\r\n			}\r\n		 }\r\n		\r\n		gfInitW3D();\r\n		gfInitEvents(gApp);\r\n		\r\n		window.onresize();\r\n\r\n\r\n		if(1 && gApp.ApproachDiagram) gfCyclicUpdateALD();\r\n		if(1 && gApp.HUD)         gfCyclicUpdateHUD();\r\n		if(1 && gApp.Fog)         gfCyclicUpdateFOG();\r\n		if(1 && gApp.Renderer)    gfCyclicUpdateR3D();\r\n\r\n		setTimeout\r\n		(\r\n			function()\r\n			{\r\n				if    (0)                    gfCyclicUpdateALL();\r\n				else\r\n				{\r\n					if(gApp.Simulator && 1) 1 ? gfCyclicUpdateSIM() : gfStartUpdateSIM();\r\n\r\n\r\n					//gApp.Simulator.IsActive = true;\r\n				}\r\n			},\r\n			1000\r\n		);\r\n\r\n\r\n		AppState.Load();\r\n	 },\r\n	gUpdateSpeed      : 1,\r\n	gfStartUpdateSIM  : function()\r\n	 {\r\n		//gApp.ApproachDiagram.Series.Entries.Length = 360;//.Clear();\r\n\r\n		var _StepC = 0;\r\n		var _StepF = function()\r\n		{\r\n			if(gSIM.Vehicle.Position.Z < -7000) gApp.Simulator.IsActive = false;\r\n			//if(gSIM.Vehicle.Velocity.Length < 10000) gApp.Simulator.IsActive = false;\r\n\r\n			for(var cI = 0; cI < 10; cI++)\r\n			{\r\n				gApp.Simulator.Update(0.03);\r\n\r\n				gfApplyKinematics(gApp.Simulator.LastDelta);\r\n				gfApplyControl(gApp.Simulator.LastDelta);\r\n			};\r\n			//if(_StepC % 10 == 0) gApp.ApproachDiagram.Invalidate();\r\n			if(_StepC % 1 == 0) gfUpdateDiagram();\r\n			//if(_StepC % 10 == 0) gApp.ApproachDiagram.Invalidate();\r\n\r\n			_StepC++;\r\n		};\r\n		setInterval(_StepF, 0);\r\n	 },\r\n	gfCyclicUpdateSIM : function(){setTimeout(gfCyclicUpdateSIM,  10 / gUpdateSpeed); 1 && gApp.Simulator.Update(); gfApplyKinematics(gApp.Simulator.LastDelta); gfApplyControl(gApp.Simulator.LastDelta); gfUpdateDiagram(true);},\r\n	gfCyclicUpdateALL : function(){setTimeout(gfCyclicUpdateALL,  50 / gUpdateSpeed);                                           gApp.Simulator.Update(); gApp.HUD.Validate(); gApp.Renderer.Render(); },\r\n	gfCyclicUpdateALD : function(){setTimeout(gfCyclicUpdateALD, 100 / gUpdateSpeed);                                         gApp.ApproachDiagram.Invalidate();},\r\n	gfCyclicUpdateHUD : function(){setTimeout(gfCyclicUpdateHUD,  10 / gUpdateSpeed); if(gApp.ApproachDiagram.IsVisible) return;  gApp.HUD.Invalidate();},\r\n	gfCyclicUpdateR3D : function(){setTimeout(gfCyclicUpdateR3D,  30 / gUpdateSpeed); if(gApp.ApproachDiagram.IsVisible) return;  gfSyncGraphics3D(); gApp.Renderer.Render();},\r\n	gfCyclicUpdateFOG : function(){setTimeout(gfCyclicUpdateFOG,  50 / gUpdateSpeed); gApp.Fog.Render();},\r\n	\r\n	gfApplyKinematics : function(iDeltaT)\r\n	 {\r\n	 	//return;\r\n		//if($.gApp.PathFixer) gApp.PathFixer.Update(iDeltaT);\r\n\r\n\r\n		//gfApplyFixes(iDeltaT);\r\n		//if(!gfApplyKinematics.FixRate) gfApplyKinematics.FixRate = 0;\r\n\r\n		\r\n		var _VehP = gSIM.Vehicle.Position;\r\n		\r\n		//if(isNaN(_VehP.Z)) debugger;\r\n		if(1)\r\n		{\r\n			var _ActP = gSIM.Vehicle.Position;\r\n			var _TgtP = UVS.Data.GetNearestEntry(_ActP).Value.Position.Clone();\r\n\r\n			if(isNaN(_TgtP.Z)) debugger;\r\n\r\n			var _PosD =  _TgtP.Subtract(_ActP).Rotate(gSIM.Vehicle.Rotation.Inverse()).Set(null,0,null).Rotate(gSIM.Vehicle.Rotation);\r\n\r\n			var _AltF = Clamp01(Scale01(_ActP.Z,  500, 1000));\r\n			var _AuPF = gSIM.Vehicle.Control.Inputs.Balance;\r\n\r\n			//gMagic = \r\n\r\n			gSIM.Vehicle.Velocity.Linear.Add(_PosD.MultiplyScalar(0.1 * _AltF * _AuPF * iDeltaT), self);\r\n			gSIM.Vehicle.Position       .Add(_PosD.MultiplyScalar(1   * _AltF * _AuPF * iDeltaT), self);\r\n		}\r\n\r\n\r\n		//return;\r\n	 },\r\n	gfApplyControl    : function(iDeltaT)\r\n	 {\r\n		if(gKeys.Control)\r\n		{\r\n			if(gKeys.Q)        {gSIM.Vehicle.Position.Z += 10;}\r\n			if(gKeys.Period)   {gSIM.Vehicle.Velocity.Linear  = new Vector3; gSIM.Vehicle.Velocity.Angular = new Vector3;}\r\n			if(gKeys.Question) {gSIM.Vehicle.Velocity.Angular = new Vector3;}\r\n			\r\n\r\n		}\r\n		else\r\n		{\r\n			if(gKeys.Period)   gSIM.Vehicle.Cockpit.AttRates.MultiplyScalar(1.0 + (1 * iDeltaT), self);\r\n			if(gKeys.Comma)    gSIM.Vehicle.Cockpit.AttRates.MultiplyScalar(1.0 - (1 * iDeltaT), self);\r\n		}\r\n\r\n		\r\n\r\n		if(gKeys.Space) AppState.Load();\r\n		\r\n		if(!$.gWindV) $.gWindV = new Vector3(-5,+15,0);\r\n		///if(!$.gWindV) $.gWindV = new Vector3(0,0,0);\r\n\r\n		if(1)\r\n		{\r\n			var _Alt = gSIM.Vehicle.Position.Z;\r\n			\r\n			//var _V1 = new Vector3(-30, +50, 0).MultiplyScalar(1 - Abs(Clamp(Scale(_Alt, 10000, 17000))));\r\n			//var _V2 = new Vector3( -0, +50, 0).MultiplyScalar(1 - Abs(Clamp(Scale(_Alt, 10000, 13000))));\r\n			//var _V3 = new Vector3(  0,   0, 0).MultiplyScalar(1 - Abs(Clamp(Scale(_Alt,  5000, 10000))));\r\n\r\n			//var _V1 = new Vector3(-5,+15,0);\r\n			var _V1 = new Vector3(0,+75,0);\r\n			//var _V2 = new Vector3(0, +10000, 0).MultiplyScalar(1 - Abs(Clamp(Scale(_Alt, 100000, 100))));;\r\n			var _V2 = new Vector3(+10000, +10000, 0).MultiplyScalar(Clamp(Scale01(_Alt, 0, 100000)));\r\n			var _V3 = new Vector3;\r\n\r\n\r\n			//gWindV = _V1.Add(_V2).Add(_V3);\r\n			//gWindV = _V1.Add(_V2);\r\n		}\r\n		if(1)\r\n		{\r\n			gSIM.Vehicle.LocTorqX.Factor *= 0.5;\r\n			gSIM.Vehicle.LocTorqY.Factor *= 0.5;\r\n			gSIM.Vehicle.LocTorqZ.Factor *= 0.5;\r\n			//gSIM.Vehicle.GloTorqX.Factor *= 0.5;\r\n			//gSIM.Vehicle.GloTorqY.Factor *= 0.5;\r\n			//gSIM.Vehicle.GloTorqZ.Factor *= 0.5;\r\n			\r\n			\r\n\r\n			if(gKeys.Shift)\r\n			{\r\n				var _Att = gSIM.Vehicle.Data.Attitude, _HdgF = Sign(Cos((_Att.Heading - _Att.HdgFix) * DTR));\r\n				var _Inc  = 5 * iDeltaT;\r\n\r\n				if(gKeys.Delete)   gWindV.X -= _Inc * _HdgF;\r\n				if(gKeys.PageDown) gWindV.X += _Inc * _HdgF;\r\n\r\n				if(gKeys.Home)     gWindV.Y += _Inc * _HdgF;\r\n				if(gKeys.End)      gWindV.Y -= _Inc * _HdgF;\r\n				\r\n				if(gKeys.Insert)   gWindV.Z -= _Inc;\r\n				if(gKeys.PageUp)   gWindV.Z += _Inc;\r\n			}\r\n			else\r\n			{\r\n				if(gKeys.Home)     gSIM.Vehicle.LocTorqX.Factor = -100;// * iDeltaT;\r\n				if(gKeys.End)      gSIM.Vehicle.LocTorqX.Factor = +100;// * iDeltaT;\r\n\r\n				if(gKeys.Insert)   gSIM.Vehicle.LocTorqZ.Factor = +100;// * iDeltaT;\r\n				if(gKeys.PageUp)   gSIM.Vehicle.LocTorqZ.Factor = -100;// * iDeltaT;\r\n\r\n				if(gKeys.Delete)   gSIM.Vehicle.LocTorqY.Factor =  -50;// * iDeltaT;\r\n				if(gKeys.PageDown) gSIM.Vehicle.LocTorqY.Factor =  +50;// * iDeltaT;\r\n			}\r\n		}\r\n		var _CPit = gSIM.Vehicle.Cockpit;\r\n		{\r\n			_CPit.Joystick.Set(0,0,0, self);\r\n\r\n			\r\n			\r\n			if(gKeys.Shift)\r\n			{\r\n				if(gKeys.Up)    _CPit.BodyFlap += 1;\r\n				if(gKeys.Down)  _CPit.BodyFlap -= 1;\r\n			}\r\n			else if(gKeys.Control)\r\n			{\r\n				var _VehC = gSIM.Vehicle.Control;\r\n\r\n				if(gKeys.Minus)  _VehC.Inputs.Balance -= 0.05;\r\n				if(gKeys.Equals) _VehC.Inputs.Balance += 0.05;\r\n\r\n				_VehC.Inputs.Balance = Clamp(_VehC.Inputs.Balance);\r\n			}\r\n			else\r\n			{\r\n				//var _ManAngR = 90;\r\n				\r\n\r\n				if(gKeys.Up)      _CPit.Joystick.X = -1;\r\n				if(gKeys.Down)    _CPit.Joystick.X = +1;\r\n\r\n				if(gKeys.Left)    _CPit.Joystick.Y = -1;\r\n				if(gKeys.Right)   _CPit.Joystick.Y = +1;\r\n\r\n				var _FlatTurnF = Clamp01(Scale01(gSIM.Vehicle.Data.RAlt, 10, 0));\r\n\r\n				_CPit.Joystick.Z = Mix(_CPit.Joystick.Z, -_CPit.Joystick.Y, _FlatTurnF);\r\n				_CPit.Joystick.Y = Mix(_CPit.Joystick.Y, 0, _FlatTurnF);\r\n\r\n\r\n				//if(gKeys.Left)    _CPit.Joystick.Z = +100;//_ManAngR;\r\n				//if(gKeys.Right)   _CPit.Joystick.Z = -100;//_ManAngR;\r\n\r\n				\r\n				var _AccelF = _CPit.Throttle - (_CPit.SpdBrake / 87.0);\r\n				{\r\n					if(gKeys.Minus)  _AccelF -= 0.5 * iDeltaT;\r\n					if(gKeys.Equals) _AccelF += 0.5 * iDeltaT;\r\n\r\n					_AccelF = Clamp(_AccelF);\r\n\r\n					_CPit.Throttle = +Max(0, _AccelF);\r\n					_CPit.SpdBrake = -Min(0, _AccelF) * 87.0;\r\n				}\r\n			}\r\n		}\r\n		return;\r\n\r\n		//gSIM.Vehicle.Engine.Factor = gKeys.A ? 1 : 0;\r\n		\r\n		\r\n		\r\n		//if(gKeys.Question) gSIM.Vehicle.Velocity.Angular = new Vector3;\r\n\r\n\r\n		//if(0)\r\n		//{\r\n			//gForcesData.Enabled = true;\r\n			//gForcesData.WriteLine(\"-- Linear --\");\r\n			//gForcesData.WriteLine([\"G:Vel\", gSIM.Vehicle.Velocity.Linear]);\r\n			//gForcesData.WriteLine([\"G:Acc\", gSIM.Vehicle.Velocity.Acceleration.Linear]);\r\n			//gForcesData.WriteLine([\"G:Jrk\", gSIM.Vehicle.Velocity.Acceleration.Jerk.Linear]);\r\n			////gForcesData.WriteLine(\"--\");\r\n			////gForcesData.WriteLine([\"L Vel  \", gSIM.Vehicle.Data.Velocity.Linear]);\r\n			////gForcesData.WriteLine([\"L  Acc \", gSIM.Vehicle.Data.Velocity.Acceleration.Linear]);\r\n			////gForcesData.WriteLine([\"L   Jrk\", gSIM.Vehicle.Data.Velocity.Acceleration.Jerk.Linear]);\r\n			//gForcesData.WriteLine();\r\n			//gForcesData.WriteLine(\"-- Angular --\");\r\n			////gForcesData.WriteLine([\"G:Vel\", gSIM.Vehicle.Velocity.Angular]);\r\n			////gForcesData.WriteLine([\"G:Acc\", gSIM.Vehicle.Velocity.Acceleration.Angular]);\r\n			////gForcesData.WriteLine([\"G:Jrk\", gSIM.Vehicle.Velocity.Acceleration.Jerk.Angular]);\r\n			////gForcesData.WriteLine(\"--\");\r\n			//gForcesData.WriteLine([\"L Vel  \", gSIM.Vehicle.Data.Velocity.Angular]);\r\n			//gForcesData.WriteLine([\"L  Acc \", gSIM.Vehicle.Data.Velocity.Acceleration.Angular]);\r\n			//gForcesData.WriteLine([\"L   Jrk\", gSIM.Vehicle.Data.Velocity.Acceleration.Jerk.Angular]);\r\n\r\n		//}\r\n		//if(1)\r\n		//{\r\n			//var _FliC = gSIM.Vehicle.Control;\r\n			//{\r\n				//_FliC.AngRates.Set(0,0,0, self);\r\n				\r\n				//if(gKeys.Shift)\r\n				//{\r\n					//if(gKeys.Up)    _FliC.BodyFlap += 0.01;\r\n					//if(gKeys.Down)  _FliC.BodyFlap -= 0.01;\r\n				//}\r\n				//else\r\n				//{\r\n					//var _ManAngR = 30 * DTR;\r\n\r\n					//if(gKeys.Up)      _FliC.AngRates.X = -_ManAngR;\r\n					//if(gKeys.Down)    _FliC.AngRates.X = +_ManAngR;\r\n\r\n					//if(gKeys.Left)    _FliC.AngRates.Y = -_ManAngR;\r\n					//if(gKeys.Right)   _FliC.AngRates.Y = +_ManAngR;\r\n\r\n					//if(gKeys.Minus)    _FliC.SpdBrake -= 0.05;\r\n					//if(gKeys.Equals)   _FliC.SpdBrake += 0.05;\r\n				//}\r\n			//}\r\n		//}\r\n	 },\r\n	gfUpdateDiagram   : function(iDoOncePerSecond)\r\n	 {\r\n		if(iDoOncePerSecond)\r\n		{\r\n			if(gfUpdateDiagram.LastDiagramUpdate == undefined) gfUpdateDiagram.LastDiagramUpdate = Date.Now - 1000;\r\n			if(Date.Now - gfUpdateDiagram.LastDiagramUpdate < 1000) return;\r\n\r\n			gfUpdateDiagram.LastDiagramUpdate = Date.Now;\r\n		}\r\n		\r\n		if(gApp.PathFixer)\r\n		{\r\n			gApp.ApproachDiagram.SimData = gApp.DataLeveler.Series;\r\n			gApp.ApproachDiagram.Cursor  = gApp.PathFixer.State.CurrRow;\r\n\r\n\r\n			return;\r\n		}\r\n		else\r\n		{\r\n			if(!gApp.Simulator.IsActive || gSIM.Vehicle.Velocity.Linear.Length < 10) return;\r\n\r\n			var _V = gApp.ApproachDiagram.SimData.CreateEntry(Date.Now,{}).Value;\r\n			{\r\n				_V.Time = Date.Now.ValueOf();\r\n\r\n				_V.Position = gSIM.Vehicle.Position.Clone();\r\n				_V.Vel      = gSIM.Vehicle.Velocity.Linear.Length;\r\n\r\n				_V.MSpd = gSIM.Vehicle.Data.MSpd;\r\n				_V.IAS  = gSIM.Vehicle.Data.IAS;\r\n				//_V.IAS  = gSIM.Vehicle.Velocity.Linear.Length;\r\n				//_V.IAS  = Simulation.Planets.Earth.Atmosphere.GetIAS(gSIM.Vehicle.Velocity.Linear.Length, gSIM.Vehicle.Data.BAlt); //~~ not an IAS;\r\n				_V.VSpd = gSIM.Vehicle.Data.VSpd;\r\n				_V.Bank = gSIM.Vehicle.Data.Attitude.Bank;\r\n				_V.SpdB = gSIM.Vehicle.Surfaces.Actuators.SpdBrake.CurrValue;\r\n\r\n				_V.FiEng = gSIM.Vehicle.Engine.Factor;\r\n			}\r\n			gApp.ApproachDiagram.Cursor = gApp.ApproachDiagram.SimData.Entries.Length - 1;\r\n		}\r\n	 },\r\n});\r\nstuff\r\n({\r\n	uses : \r\n	[\r\n		'THREE (T*)',\r\n		'Math',\r\n		'Math.Geometry',\r\n		'UVS',\r\n	],\r\n	gfInitW3D : function()\r\n	 {\r\n		$.gW3D = new function World3DObjects(){}; if(gApp.Renderer)\r\n		 {\r\n			Imaging.Routines.CreateScene(\"LandingSites/Baikonur\");\r\n\r\n			gApp.Renderer.Camera.Mode = localStorage[\"Camera.Mode\"] || \"Num1\";\r\n\r\n			gW3D.Scene        = gApp.Renderer.Scene;\r\n\r\n			gW3D.Stratosphere = gW3D.Scene.getObjectByName(\"Stratosphere\");\r\n			gW3D.Troposphere  = gW3D.Scene.getObjectByName(\"Troposphere\");\r\n			gW3D.Clouds       = gW3D.Scene.getObjectByName(\"Clouds\");\r\n			//gW3D.TerrScreen   = gW3D.Scene.getObjectByName(\"TerrScreen\");\r\n			gW3D.Terrain      = gW3D.Scene.getObjectByName(\"Terrain\");\r\n			gW3D.Camera       = gApp.Renderer.Camera;\r\n			gW3D.Vehicle      = Imaging.Routines.CreateBuran();\r\n			{\r\n\r\n				if(gW3D.Vehicle.getObjectByName(\"Tail\") != undefined)\r\n				{\r\n					gW3D.Tail = gW3D.Vehicle.getObjectByName(\"Tail\");\r\n					{\r\n						gW3D.Tail.position      = gSIM.Vehicle.Tail.Position.ToTHREE();\r\n						gW3D.Tail.quaternion    = gSIM.Vehicle.Tail.Rotation.ToTHREE();\r\n					}\r\n				}\r\n				\r\n				gW3D.RudderL   = gW3D.Vehicle.getObjectByName(\"RudderL\");\r\n				gW3D.RudderR   = gW3D.Vehicle.getObjectByName(\"RudderR\");\r\n\r\n				gW3D.ElevInL   = gW3D.Vehicle.getObjectByName(\"ElevInL\");\r\n				gW3D.ElevOuL   = gW3D.Vehicle.getObjectByName(\"ElevOuL\");\r\n				gW3D.ElevInR   = gW3D.Vehicle.getObjectByName(\"ElevInR\");\r\n				gW3D.ElevOuR   = gW3D.Vehicle.getObjectByName(\"ElevOuR\");\r\n\r\n				gW3D.BodyFlap  = gW3D.Vehicle.getObjectByName(\"BodyFlap\");\r\n\r\n				gW3D.NoseGear  = gW3D.Vehicle.getObjectByName(\"NoseGear\");\r\n				gW3D.MainGearL = gW3D.Vehicle.getObjectByName(\"MainGearL\");\r\n				gW3D.MainGearR = gW3D.Vehicle.getObjectByName(\"MainGearR\");\r\n\r\n				gW3D.LandingGears = gW3D.Vehicle.getObjectByName(\"LandingGears\");\r\n\r\n				gW3D.NoseEngine = gW3D.Vehicle.getObjectByName(\"NoseEngine\",true);\r\n\r\n\r\n				gW3D.Vehicle.Shadow = gW3D.Scene.getObjectByName(\"VehicleShadow\");\r\n				gW3D.EnvFrame       = gW3D.Scene.getObjectByName(\"EnvFrame\");\r\n\r\n				gW3D.ShadowNG = gW3D.Scene.getObjectByName(\"ShadowNG\");\r\n				gW3D.ShadowLG = gW3D.Scene.getObjectByName(\"ShadowLG\");\r\n				gW3D.ShadowRG = gW3D.Scene.getObjectByName(\"ShadowRG\");\r\n			}\r\n			gW3D.Scene.add(gW3D.Vehicle);\r\n\r\n			//~~UVS.Imaging.Routines.UpdateTrajectory();\r\n\r\n			//gApp.Renderer.ThreeRenderer.scene = gW3D.Scene;\r\n			//gApp.Renderer.Scene = gW3D.Scene;\r\n			//gApp.Renderer.Scene\r\n		 };\r\n	 },\r\n	gfSyncGraphics3D  : function()\r\n	 {\r\n		gW3D.PosV = gSIM.Vehicle.Position.ToTHREE();\r\n		gW3D.RotV = gSIM.Vehicle.Rotation.ToTHREE();\r\n\r\n		//gW3D.CamPos = ;\r\n\r\n		gW3D.Vehicle.position    .copy(gW3D.PosV);\r\n		gW3D.Vehicle.quaternion  .copy(gW3D.RotV);\r\n\r\n		gW3D.RudderL.position    .copy(gSIM.Vehicle.RudderL.Position.ToTHREE()  || new TVector3);\r\n		gW3D.RudderL.quaternion  .copy(gSIM.Vehicle.RudderL.Rotation.ToTHREE()  || new TQuaternion);\r\n		gW3D.RudderR.position    .copy(gSIM.Vehicle.RudderR.Position.ToTHREE()  || new TVector3);\r\n		gW3D.RudderR.quaternion  .copy(gSIM.Vehicle.RudderR.Rotation.ToTHREE()  || new TQuaternion);\r\n		\r\n		gW3D.ElevInL.position    .copy(gSIM.Vehicle.ElevInL.Position.ToTHREE()  || new TVector3);\r\n		gW3D.ElevInL.quaternion  .copy(gSIM.Vehicle.ElevInL.Rotation.ToTHREE()  || new TQuaternion);\r\n		gW3D.ElevOuL.position    .copy(gSIM.Vehicle.ElevOuL.Position.ToTHREE()  || new TVector3);\r\n		gW3D.ElevOuL.quaternion  .copy(gSIM.Vehicle.ElevOuL.Rotation.ToTHREE()  || new TQuaternion);\r\n\r\n		gW3D.ElevInR.position    .copy(gSIM.Vehicle.ElevInR.Position.ToTHREE()  || new TVector3);\r\n		gW3D.ElevInR.quaternion  .copy(gSIM.Vehicle.ElevInR.Rotation.ToTHREE()  || new TQuaternion);\r\n		gW3D.ElevOuR.position    .copy(gSIM.Vehicle.ElevOuR.Position.ToTHREE()  || new TVector3);\r\n		gW3D.ElevOuR.quaternion  .copy(gSIM.Vehicle.ElevOuR.Rotation.ToTHREE()  || new TQuaternion);\r\n\r\n		gW3D.BodyFlap.position   .copy(gSIM.Vehicle.BodyFlap.Position.ToTHREE() || new TVector3);\r\n		gW3D.BodyFlap.quaternion .copy(gSIM.Vehicle.BodyFlap.Rotation.ToTHREE() || new TQuaternion);\r\n\r\n		var _GearCmd = 1.001 - ((Clamp(gW3D.PosV.z, 400, 500) - 400) / 100);\r\n		///var _GearCmd = Clamp(Scale01(gW3D.PosV.z, 10,5), 0,1) + 0.001;// 1.001 - ((Clamp(gW3D.PosV.z, 400, 500) - 400) / 100);\r\n\r\n		if(gApp.Renderer.IsWebGL)\r\n		{\r\n			var _Shadow = gW3D.Vehicle.Shadow;\r\n			{\r\n				_Shadow.position.copy(gW3D.PosV.clone().setZ(0));\r\n				_Shadow.rotation.set (0,0,(gSIM.Vehicle.Data.Attitude.HdgFix - gSIM.Vehicle.Data.Attitude.Heading) * DTR);\r\n				\r\n				var _AltF = Clamp(Scale01(gSIM.Vehicle.Data.BAlt, 0, 30), 0,1);\r\n\r\n				_Shadow.scale.set(1 + (_AltF * 1), 1 + (_AltF * 1), 1);\r\n				_Shadow.material.opacity = 0.8 - _AltF;\r\n			}\r\n			\r\n			\r\n			gW3D.LandingGears.scale.z = _GearCmd;\r\n			gW3D.LandingGears.position.z = (4.6 * _GearCmd) -1;\r\n\r\n			Environment :\r\n			{\r\n				gApp.Renderer.UpdateCamera();\r\n\r\n				var _Alt  = gApp.Renderer.Camera.position.z;\r\n				var _Dist = gApp.Renderer.Camera.position.clone().setZ(0).length();\r\n				\r\n\r\n				var _StrMat = gW3D.Stratosphere.material,  _StrOpa = _Alt > 10000 ? 1 : 0;//Clamp01(Scale01(_Alt, 10000, 11000));\r\n				//var _TroMat = gW3D.Troposphere .material,  _TroOpa = Min(Scale01(_Alt, 15000, 10000), Scale01(_Alt, 1500, 1600));\r\n				var _TroMat = gW3D.Troposphere .material,  _TroOpa = Min(Scale01(_Alt, 15000, 10000), Scale01(_Alt, 1000, 1200));\r\n				///var _TroMat = gW3D.Troposphere .material,  _TroOpa = Min(Scale01(_Alt, 15000, 10000), Scale01(_Alt, -100, 0));\r\n				//var _CloMat = gW3D.Clouds      .material,  _CloOpa = 0;//~~Clamp01(Scale01(_Alt, 600, 500));//Max(Min(_TroOpa, Scale01(_Alt, 5000,2000)), Scale01(_Alt, 900, 800));\r\n				var _CloMat = gW3D.Clouds      .material,  _CloOpa = Clamp01(Scale01(_Alt, 1000, 900));//Max(Min(_TroOpa, Scale01(_Alt, 5000,2000)), Scale01(_Alt, 900, 800));\r\n				//var _TScMat = gW3D.TerrScreen  .material,  _TScOpa = _Alt > 1000 ? 0 : 1 - _CloOpa;//Scale01(_Alt, 1200,1100);\r\n				//var _TerMat = gW3D.Terrain     .material,  _TerOpa = 1;//~~_Alt < 1000 ? 1 : 0;//Min(_CloOpa, _Alt > 900 ? 0 : 1);\r\n				var _TerMat = gW3D.Terrain     .material,  _TerOpa = _Alt < 1000 ? 1 : 0;//Min(_CloOpa, _Alt > 900 ? 0 : 1);\r\n\r\n				_StrMat.opacity = _StrOpa;  _StrMat.transparent = false; gW3D.Stratosphere.visible = _StrOpa > 0;\r\n				_TroMat.opacity = _TroOpa;  _TroMat.transparent = true;  gW3D.Troposphere.visible  = _TroOpa > 0;\r\n				_CloMat.opacity = _CloOpa;  _CloMat.transparent = true;  gW3D.Clouds.visible       = _CloOpa > 0;//_CloOpa > 0;\r\n\r\n\r\n				//_TScMat.opacity = _TScOpa;  _TScMat.transparent = _TScOpa < 1;  gW3D.TerrScreen.visible  = _TScOpa > 0;\r\n				_TerMat.opacity = _TerOpa;  _TerMat.transparent = false; gW3D.Terrain.visible      = _TerOpa > 0;\r\n\r\n				gW3D.Stratosphere.position.x = gW3D.Troposphere.position.x = gW3D.Camera.position.x;\r\n				gW3D.Stratosphere.position.y = gW3D.Troposphere.position.y = gW3D.Camera.position.y;\r\n\r\n				//gW3D.Clouds.quaternion       . copy(Quaternion.Rotated(0, _Alt > 1000 ? 0 : D180,0).ToTHREE());\r\n\r\n				gW3D.Scene.fog.far = 10 + (Clamp(Abs(Scale(1000 - _Alt, 200)) * 10000, 100, 100000));// * (_Alt < 1000 ? Clamp01(1 - (_Dist / 30000)) : 1));\r\n				//gW3D.Scene.fog.far = 10000;\r\n				\r\n				var _Signal, _Noise;\r\n				{\r\n					var _DistF  = Clamp01(Scale01(_Dist, 0, 20000));\r\n					var _AltF   = Clamp01(_Dist / (_Alt * 100));\r\n					var _ShakeF = Clamp01(gSIM.Vehicle.Velocity.Acceleration.Linear.Length * 0.005 + gSIM.Vehicle.Velocity.Acceleration.Angular.Length * 0.25);\r\n					var _Noise  = Min(_DistF, _AltF) + _ShakeF;\r\n					\r\n					_Signal = 1 - Clamp01(_Noise);\r\n					\r\n				}\r\n				\r\n				gATVUniforms[\"time\"].value = new Date() / 1000 % 1;\r\n				gATVUniforms[\"sheet\"].value = 1 - Abs(Clamp(Scale(1000 - _Alt, 200)));\r\n				gATVUniforms[\"signal\" ].value = gApp.Renderer.Camera.Mode == \"Num1\" ? _Signal : 1;\r\n\r\n				/*\r\n					\r\n					1300 = 0\r\n					1250 = 0.5\r\n					1200 = 1\r\n					1100\r\n					1000 = 1\r\n					 900\r\n					 800 = 1\r\n					 750 = 0.5\r\n					 700 = 0\r\n				*/\r\n\r\n				gATVUniforms[\"signal\"].value = gApp.Renderer.Camera.Mode == \"Num1\" ? _Signal : 1;\r\n			}\r\n		}\r\n		else\r\n		{\r\n			var _GearOffsV = new TVector3(0,0, 2.5 - (_GearCmd * 2.5));\r\n\r\n			gW3D.NoseGear  .position   .copy((gSIM.Vehicle.NoseGear .Position || new Vector3)     .ToTHREE().add(_GearOffsV));\r\n			gW3D.NoseGear  .quaternion .copy((gSIM.Vehicle.NoseGear .Rotation || new Quaternion)  .ToTHREE()                );\r\n			gW3D.MainGearL .position   .copy((gSIM.Vehicle.MainGearL.Position || new Vector3)     .ToTHREE().add(_GearOffsV));\r\n			gW3D.MainGearR .position   .copy((gSIM.Vehicle.MainGearR.Position || new Vector3)     .ToTHREE().add(_GearOffsV));\r\n\r\n			gW3D.ShadowNG  .position   .copy(gSIM.Vehicle.LocalToGlobal(gSIM.Vehicle.NoseGear.Position) .ToTHREE().setZ(0));\r\n			gW3D.ShadowLG  .position   .copy(gSIM.Vehicle.LocalToGlobal(gSIM.Vehicle.MainGearL.Position).ToTHREE().setZ(0));\r\n			gW3D.ShadowRG  .position   .copy(gSIM.Vehicle.LocalToGlobal(gSIM.Vehicle.MainGearR.Position).ToTHREE().setZ(0));\r\n\r\n			if(1)\r\n			{\r\n				var _EnvP = gSIM.Vehicle.Position.Add(new Vector3(0,0,-200).Rotate(Quaternion.FromTHREE(gW3D.Camera.quaternion)));\r\n				{\r\n					_EnvP.X = Round(_EnvP.X / 200) * 200;\r\n					_EnvP.Y = Round(_EnvP.Y / 200) * 200;\r\n					_EnvP.Z = Round(_EnvP.Z / 200) * 200;\r\n\r\n					_EnvP.Z = Max(_EnvP.Z, 500);\r\n				}\r\n				gW3D.EnvFrame.position.copy(_EnvP.ToTHREE());\r\n			}\r\n		}\r\n	 },\r\n});",
	"../UVS/App.Routines.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'System.Drawing',\r\n		'Math.Geometry',\r\n		//'THREE: *, -Math'     ,\r\n		//'THREE.Math (Math3D)' ,\r\n		'Math'                ,\r\n	],\r\n	gfInitConsoles : function(iApp)\r\n	 {\r\n		var _BackColor = new Color(127,95,0,0.5);\r\n		//return;\r\n		//$.gAPCns = new GraphicsConsole({Title : \"Autopilot\", Dock : DockStyle.Right, Bounds : new Rectangle(0,0,300,0), ZIndex : 10, ForeColor : Colors.White, BackColor : new Color(255,255,0,0.25)});\r\n		//{\r\n			//gAPCns.ToggleVisibility(true);\r\n		//}\r\n		$.gSysCns   = new GraphicsConsole({Title : \"Systems\",     IsVisible : localStorage[\"Info(Systems)\"]    == \"true\", Dock : DockStyle.Right, Bounds : new Rectangle(0,0,300,0), ZIndex : 10, ForeColor : Colors.White, BackColor : _BackColor});\r\n		//$.localStorage[\"Info(Systems)\"]    != \"true\" && gSysCns .ToggleVisibility(false);\r\n		\r\n		$.gPhysCns  = new GraphicsConsole({Title : \"Physics\",     IsVisible : localStorage[\"Info(Physics)\"]    == \"true\", Dock : DockStyle.Left,  Bounds : new Rectangle(0,0,300,0), ZIndex : 10, ForeColor : Colors.White, BackColor : _BackColor});\r\n		//$.localStorage[\"Info(Physics)\"]    != \"true\" && gPhysCns.ToggleVisibility(false);\r\n		\r\n		$.gAlgoCns  = new GraphicsConsole({Title : \"Algorithms\",  IsVisible : localStorage[\"Info(Algorithms)\"] == \"true\", Dock : DockStyle.Left,  Bounds : new Rectangle(0,0,300,0), ZIndex : 10, ForeColor : Colors.White, BackColor : _BackColor});\r\n		//$.localStorage[\"Info(Algorithms)\"] != \"true\" && gAlgoCns.ToggleVisibility(false);\r\n		\r\n\r\n		iApp.Consoles =\r\n		[\r\n			//gApp.Diagram,\r\n			gPhysCns,\r\n			gAlgoCns,\r\n			gSysCns,\r\n		];\r\n		\r\n\r\n\r\n	 },\r\n	\r\n	gfApplyFixes : function(iDeltaT)\r\n	 {\r\n		//var self = gfApplyFixes;\r\n\r\n		if(!$.gfApplyFixes.Data) $.gfApplyFixes.Data = {UpdDelay : 0, CurrRow : 0};\r\n		var _Data = gfApplyFixes.Data;\r\n\r\n\r\n		if(gKeys.Minus)  _Data.CurrRow -= 0.3;\r\n		if(gKeys.Equals) _Data.CurrRow += 0.3;\r\n\r\n		//_Data.CurrRow = Clamp(_Data.CurrRow, 0, gSeries.Entries.Length);\r\n		//_Data.CurrRow = Clamp(_Data.CurrRow, 0, gSeries.Entries.Length);\r\n\r\n\r\n		\r\n		\r\n		\r\n		var _CurrIndex = Round(_Data.CurrRow) * 8;\r\n		var _NextIndex = _CurrIndex + 8;\r\n\r\n\r\n		\r\n\r\n\r\n		var _CurrPos   = new Vector3(gTable[_CurrIndex + 1], gTable[_CurrIndex], gTable[_CurrIndex + 2]);\r\n		var _NextPos   = new Vector3(gTable[_NextIndex + 1], gTable[_NextIndex], gTable[_NextIndex + 2]);\r\n		\r\n		var _LookVec   = _CurrPos.Subtract(_NextPos);\r\n		var _Angle     = Atan2(+_LookVec.X, -_LookVec.Y);\r\n		var _RotQuat   = Quaternion.Rotated(0,0,_Angle);\r\n\r\n		if(gKeys.Left || gKeys.Right || gKeys.Up || gKeys.Down)\r\n		{\r\n			if(gKeys.Left ^ gKeys.Right)\r\n			{\r\n				_NextPos.Add(new Vector3(gKeys.Left ? -5 : +5,0,0).Rotate(_RotQuat), self);\r\n			}\r\n			\r\n			gTable[_NextIndex + 1] = _NextPos.X;\r\n			gTable[_NextIndex    ] = _NextPos.Y;\r\n			gTable[_NextIndex + 2] = _NextPos.Z;\r\n		}\r\n\r\n\r\n\r\n		_Data.UpdDelay += 0.1; if(_Data.UpdDelay > 1)\r\n		{\r\n			UVS.Imaging.Routines.UpdateTrajectory();\r\n			_Data.UpdDelay = 0;\r\n		}\r\n		//if(gKeys.Left || gKeys.Right || gKeys.Up || gKeys.Down)\r\n		//{\r\n			//if(gKeys.Left ^ gKeys.Right)\r\n			//{\r\n				//_CurrPos.Add(new Vector3(gKeys.Left ? -5 : +5,0,0).Rotate(_RotQuat), self);\r\n			//}\r\n			\r\n			//gTable[_CurrIndex + 1] = _CurrPos.X;\r\n			//gTable[_CurrIndex    ] = _CurrPos.Y;\r\n			//gTable[_CurrIndex + 2] = _CurrPos.Z;\r\n\r\n			//UVS.Imaging.Routines.UpdateTrajectory();\r\n		//}\r\n\r\n		gSIM.Vehicle.Position = _CurrPos;\r\n		gSIM.Vehicle.Rotation = _RotQuat;\r\n		\r\n		gfSyncGraphics3D();\r\n\r\n\r\n		\r\n		//if(isNaN(_VehP.Z)) debugger;\r\n		//if(0)\r\n		//{\r\n			//var _ActP = gSIM.Vehicle.Position;\r\n			//var _TgtP = UVS.Simulation.DataX.GetNearestEntry(_ActP).Value.Position.Clone();\r\n\r\n			//if(isNaN(_TgtP.Z)) debugger;\r\n\r\n			//var _PosD =  _TgtP.Subtract(_ActP).Rotate(gSIM.Vehicle.Rotation.Inverse()).Set(null,0,null).Rotate(gSIM.Vehicle.Rotation);\r\n\r\n			//var _AltF = Clamp01(Scale01(_ActP.Z,  500, 1000));\r\n			//var _AuPF = gSIM.Vehicle.Control.Inputs.Balance;\r\n\r\n			////gMagic = \r\n\r\n			//gSIM.Vehicle.Velocity.Linear.Add(_PosD.MultiplyScalar(0.1 * _AltF * _AuPF * iDeltaT), self);\r\n			//gSIM.Vehicle.Position       .Add(_PosD.MultiplyScalar(1   * _AltF * _AuPF * iDeltaT), self);\r\n		//}\r\n		\r\n		\r\n	 },\r\n	\r\n	'AppState' : \r\n	 {\r\n		//LastStateID : 0,\r\n\r\n		//Default : \r\n		 //{\r\n			//\"State0\" : {Vehicle : {PosV : \"0,-10000,1000\", RotQ : \"0,0,0,1\", VelL : \"0,150,0\", VelA : \"0,0,0\"}},\r\n			////\"State2\" : {Vehicle : {PosV : \"0,-10000,1000\", RotQ : \"0,0,0,1\", VelL : \"0,150,0\", VelA : \"0,0,0\"}},\r\n		 //},\r\n\r\n		Save : function(iStateID)\r\n		 {\r\n			if(iStateID == undefined) iStateID = localStorage[\"LastState\"] || 0;\r\n\r\n			var _Veh   = gSIM.Vehicle;\r\n			var _VehAA = _Veh.Surfaces.Actuators;\r\n\r\n			\r\n			var _StateO =\r\n			{\r\n				Vehicle : \r\n				{\r\n					Position : _Veh.Position         .ToString(),\r\n					Rotation : _Veh.Rotation         .ToString(),\r\n\r\n					Velocity : \r\n					{\r\n						Linear  : _Veh.Velocity.Linear  .ToString(),\r\n						Angular : _Veh.Velocity.Angular .ToString(),\r\n					},\r\n					\r\n					Systems : \r\n					{\r\n						Guidance : \r\n						{\r\n							ApproachDirection : undefined,\r\n							TargetHAC         : 0,\r\n						},\r\n						Control : \r\n						{\r\n							Pitch    : _Veh.Control.Pitch,\r\n							Roll     : _Veh.Control.Roll,\r\n							Yaw      : _Veh.Control.Yaw,\r\n\r\n							SpdBrake : _Veh.Control.SpdBrake,\r\n							BodyFlap : _Veh.Control.BodyFlap,\r\n\r\n							//Ailerons : _Veh.Control.Ailerons,\r\n							//Elevator : _Veh.Control.Elevator,\r\n							//Rudder   : _Veh.Control.Rudder,\r\n							//AirBrake : _Veh.Control.AirBrake,\r\n							//BodyFlap : _Veh.Control.BodyFlap,\r\n\r\n						},\r\n						Surfaces :\r\n						{\r\n							ElevInL  : _VehAA.ElevInL  .CurrValue,\r\n							ElevOuL  : _VehAA.ElevOuL  .CurrValue,\r\n							ElevInR  : _VehAA.ElevInR  .CurrValue,\r\n							ElevOuR  : _VehAA.ElevOuR  .CurrValue,\r\n\r\n							//ElevR  : _VehAA.ElevonR  .CurrValue,\r\n							//RudderL  :_VehAA.RudderL  .CurrValue,\r\n							Rudder   : _VehAA.Rudder   .CurrValue,\r\n							SpdBrake : _VehAA.SpdBrake .CurrValue,\r\n							BodyFlap : _VehAA.BodyFlap .CurrValue,\r\n						},\r\n					}\r\n				},\r\n			};\r\n			localStorage[\"State\" + iStateID] = JSON.stringify(_StateO);\r\n			localStorage[\"LastStateID\"] = iStateID;\r\n		 },\r\n		Load : function(iStateID)\r\n		 {\r\n			if(iStateID == undefined) iStateID = localStorage[\"LastStateID\"] || 0;\r\n\r\n			gApp.ApproachDiagram.SimData.Entries.Length = 0;//360;\r\n\r\n			var _Veh = gSIM.Vehicle;\r\n			var _VehAA = _Veh.Surfaces.Actuators;\r\n\r\n			//debugger;\r\n			gSIM.Vehicle.Reset();\r\n			\r\n			\r\n			//_Veh.Position         = new Vector3;\r\n			//_Veh.Rotation         = new Quaternion;\r\n			//_Veh.Velocity = new Velocity();//.Linear  = new Vector3;\r\n			////_Veh.Velocity.Angular = new Vector3;\r\n\r\n			//_Veh.Data.Update();\r\n			////_Veh.Autopilot.Programs.Clear();\r\n			////_Veh.Guidance.Phase = \"ERROR:ERROR\";\r\n			//_Veh.Guidance .Reset();\r\n			//_Veh.Autopilot.Reset();\r\n			//_Veh.Control.Reset();\r\n			//_Veh.Surfaces.Reset();\r\n\r\n\r\n\r\n			var _StateS = localStorage[\"State\" + iStateID];\r\n			{\r\n				if(_StateS)\r\n				{\r\n					var _StateO = JSON.parse(_StateS);\r\n					{\r\n						_Veh.Position             = Vector3    .FromString(_StateO.Vehicle.Position);\r\n						_Veh.Rotation             = Quaternion .FromString(_StateO.Vehicle.Rotation);\r\n						_Veh.Velocity.Linear      = Vector3    .FromString(_StateO.Vehicle.Velocity.Linear);\r\n						_Veh.Velocity.Angular     = Vector3    .FromString(_StateO.Vehicle.Velocity.Angular);\r\n\r\n						_Veh.Control.Pitch        = _StateO.Vehicle.Systems.Control.Pitch;\r\n						_Veh.Control.Roll         = _StateO.Vehicle.Systems.Control.Roll;\r\n						_Veh.Control.Yaw          = _StateO.Vehicle.Systems.Control.Yaw;\r\n						_Veh.Control.SpdBrake     = _StateO.Vehicle.Systems.Control.SpdBrake;\r\n						_Veh.Control.BodyFlap     = _StateO.Vehicle.Systems.Control.BodyFlap;\r\n\r\n						_VehAA.ElevInL.CurrValue  = _StateO.Vehicle.Systems.Surfaces.ElevInL;\r\n						_VehAA.ElevOuL.CurrValue  = _StateO.Vehicle.Systems.Surfaces.ElevOuL;\r\n						_VehAA.ElevInR.CurrValue  = _StateO.Vehicle.Systems.Surfaces.ElevInR;\r\n						_VehAA.ElevOuR.CurrValue  = _StateO.Vehicle.Systems.Surfaces.ElevOuR;\r\n\r\n						_VehAA.Rudder.CurrValue   = _StateO.Vehicle.Systems.Surfaces.Rudder;\r\n						_VehAA.SpdBrake.CurrValue = _StateO.Vehicle.Systems.Surfaces.SpdBrake;\r\n						_VehAA.BodyFlap.CurrValue = _StateO.Vehicle.Systems.Surfaces.BodyFlap;\r\n					}\r\n					localStorage[\"LastStateID\"] = iStateID;\r\n				}\r\n				else\r\n				{\r\n					console.info(\"Empty state slot: 'State\" + iStateID + \"'\");\r\n					\r\n					var _Mach1 = 295;\r\n\r\n					var _AppA = 76, _HdgDelta = +18, _BnkA = 14,  _Dist = 20000, _Alt  = 20400, _VSpd = -70, _MSpd = 1.8;\r\n					{\r\n						//~~{_AppA = 76, _HdgDelta = +18, _Dist = 20000, _Alt  = 20400, _MSpd = 1.85};\r\n						//{_AppA = 76, _HdgDelta = +18, _Dist = 20000, _Alt  = 20350, _MSpd = 1.87};\r\n						{_AppA = 76, _HdgDelta = +18, _Dist = 20000, _Alt  = 20300, _MSpd = 1.96};\r\n\r\n						//{_AppA = 244, _HdgDelta = 0, _BnkA = 0, _Dist = 20000, _Alt  = 500, _VSpd = 0, _MSpd = 0.3};\r\n\r\n						//{_AppA = 246, _Dist = 20000, _Alt  = 5000, _MSpd = 0.5}\r\n\r\n						//{_AppA = 246; _Dist = 0.001; _Alt  = 500; _VSpd = 0.01;  _MSpd = 0.1};\r\n\r\n						//{_AppA = 66; _HdgDelta = 0; _BnkA = 0; _Dist = 30000; _Alt  = 10000; _VSpd = 0.01;  _MSpd = 0.3};\r\n					}\r\n\r\n					//debugger;\r\n					//var _PosQ = ;\r\n					//var _VelQ = ;\r\n\r\n					var _PosQ = Quaternion.Rotated(0,0, (-_AppA + _Veh.Data.Attitude.HdgFix) * DTR);\r\n					var _VelQ = Quaternion.Rotated(Math.Asin(_VSpd / Max(_MSpd * _Mach1, _VSpd)), _BnkA * DTR, (-_AppA + _Veh.Data.Attitude.HdgFix - _HdgDelta) * DTR, \"ZXY\");\r\n					//var _VelQ = Quaternion.Rotated(0 * Math.DTR, _BnkA * Math.DTR, Math.DegToRad(-_AppA) + _Veh.Data.Attitude.HdgFix - Math.DegToRad(_HdgDelta), \"ZXY\");\r\n\r\n					var _PosV = new Vector3(0,1,0).Rotate(_PosQ).MultiplyScalar(_Dist * -1) .Set(null,null,_Alt);\r\n					var _VelV = new Vector3(0,1,0).Rotate(_VelQ).MultiplyScalar(_MSpd * _Mach1);//.Set(null,null, _VSpd);\r\n					\r\n					var _WindQ = Quaternion.Rotated(0,0, -_VelV.Add(_Veh.Data.Wind.Inverse()).Normalize().AngleTo(_VelV));\r\n\r\n					_Veh.Position         = _PosV;\r\n					_Veh.Rotation         = _VelQ.Multiply(_WindQ);\r\n\r\n					_Veh.Velocity = new UVS.Simulation.Velocity({Linear : _VelV});\r\n\r\n\r\n\r\n\r\n\r\n					\r\n					//_Veh.Velocity.Angular = ;\r\n					\r\n				//debugger;\r\n\r\n					\r\n					//_Veh.Data      .Update();\r\n					//_Veh.Guidance  .Reset();\r\n					//_Veh.Autopilot .Reset();\r\n					//_Veh.Control   .Reset();\r\n					//_Veh.Surfaces  .Reset();\r\n\r\n					//_Veh.Guidance.Phase = {ID : \"ENTRY:ET5\", TransRate : 0.1};\r\n					//debugger;\r\n					//_Veh.Guidance.Update();\r\n					//_Veh.Autopilot.Update(0.001);\r\n						//gSIM.Vehicle.Reset();\r\n\r\n					_Veh.Surfaces.Actuators.SpdBrake.CurrValue =\r\n					_Veh.Surfaces.SpdBrake                     = 70;\r\n\r\n					//_Veh.Position         = new Vector3(+30000,-30000,20000);\r\n					//debugger;\r\n				}\r\n\r\n				//if(1)\r\n				//{\r\n					//_Veh.Position = UVS.Simulation.DataX.GetNearestEntry(_Veh.Position, false).Value.Position.Clone();\r\n				//}\r\n\r\n				//var _Veh   = _Veh;\r\n				//var _VehAA = _Veh.Actuators;\r\n				\r\n				gSIM.Vehicle.Data.Update();\r\n				gApp.Simulator.IsActive = true;\r\n\r\n			}\r\n			\r\n			//gApp.ApproachDiagram.Series.Entries.Clear();\r\n		 },\r\n	 },\r\n	'Routines' : \r\n	 {\r\n	 },\r\n	\r\n	'PathFixer'                     : \r\n	 {\r\n		Table : arr,\r\n		State : obj,\r\n\r\n		constructor : function(iAA)\r\n		{\r\n			this.Table = iAA.Table || error;\r\n			this.State = {UpdDelay : 0, CurrRow : 0};\r\n\r\n			window.addEventListener\r\n			(\r\n				\"keypress\", function(iEvt)\r\n				{\r\n					switch(iEvt.keyCode)\r\n					{\r\n						case 44  : this.State.CurrRow = Math.Round(this.State.CurrRow - 1);     break;\r\n						case 46  : this.State.CurrRow = Math.Round(this.State.CurrRow + 1);     break;\r\n							\r\n						\r\n						\r\n						//case 60  : this.TabPos.Row -= 10;  break;\r\n						//case 62  : this.TabPos.Row += 10;  break;\r\n\r\n						//case 91  : this.TabPos.Col --;     break;\r\n						//case 93  : this.TabPos.Col ++;     break;\r\n\r\n						case 115 : this.SaveData(); break; //~~S;\r\n						case 108 : this.LoadData(); break; //~~L;\r\n\r\n						//default  : console.info(iEvt.keyCode);\r\n					}\r\n					this.Update();\r\n\r\n					if(gApp.DataLeveler) gApp.DataLeveler.Invalidate();\r\n				}\r\n				.Bind(this)\r\n			);\r\n\r\n			this.LoadData();\r\n		},\r\n\r\n		Update : function(iDeltaT)\r\n		 {\r\n			this.State.CurrRow = Clamp(this.State.CurrRow, 0, this.Table.Length / 8);\r\n			//if(gKeys.Minus)  this.State.CurrRow -= 0.3;\r\n			//if(gKeys.Equals) this.State.CurrRow += 0.3;\r\n\r\n			//_Data.CurrRow = Clamp(_Data.CurrRow, 0, gSeries.Entries.Length);\r\n			//_Data.CurrRow = Clamp(_Data.CurrRow, 0, gSeries.Entries.Length);\r\n\r\n			var _CurrIndex = Round(this.State.CurrRow) * 8;\r\n			var _NextIndex = _CurrIndex + 8;\r\n\r\n\r\n			\r\n\r\n\r\n			var _CurrPos   = new Vector3(this.Table[_CurrIndex + 1], this.Table[_CurrIndex], this.Table[_CurrIndex + 2]);\r\n			var _NextPos   = new Vector3(this.Table[_NextIndex + 1], this.Table[_NextIndex], this.Table[_NextIndex + 2]);\r\n			\r\n			var _LookVec   = _CurrPos.Subtract(_NextPos);\r\n			var _Angle     = Atan2(+_LookVec.X, -_LookVec.Y);\r\n			var _RotQuat   = Quaternion.Rotated(0, this.Table[_CurrIndex + 4] * DTR,_Angle, \"ZXY\");\r\n			\r\n			var _AffPos, _AffIndex;\r\n			{\r\n				if(0){_AffPos = _NextPos; _AffIndex = _NextIndex;}\r\n				else {_AffPos = _CurrPos; _AffIndex = _CurrIndex;}\r\n\r\n				if(gKeys.Left || gKeys.Right || gKeys.Up || gKeys.Down)\r\n				{\r\n					if(gKeys.Left ^ gKeys.Right)\r\n					{\r\n						_AffPos.Add(new Vector3(gKeys.Left ? -0.1 : +0.1,0,0).Rotate(_RotQuat), self);\r\n					}\r\n					if(gKeys.Up ^ gKeys.Down)\r\n					{\r\n						_AffPos.Add(new Vector3(0,0,gKeys.Up ? +1 : -1), self);\r\n					}\r\n					\r\n					this.Table[_AffIndex + 1] = _AffPos.X;\r\n					this.Table[_AffIndex    ] = _AffPos.Y;\r\n					this.Table[_AffIndex + 2] = _AffPos.Z;\r\n				}\r\n			}\r\n\r\n\r\n\r\n			this.State.UpdDelay += 0.1; if(this.State.UpdDelay > 1)\r\n			{\r\n				this.State.UpdDelay = 0;\r\n\r\n				gApp.DataLeveler.UpdateData();\r\n				gApp.DataLeveler.Invalidate();\r\n				\r\n				UVS.Imaging.Routines.UpdateTrajectory();\r\n			}\r\n			\r\n\r\n			gSIM.Vehicle.Position = _CurrPos;\r\n			gSIM.Vehicle.Rotation = _RotQuat;\r\n			\r\n			gfSyncGraphics3D();\r\n		 },\r\n\r\n		SaveData       : function()\r\n		 {\r\n			window.localStorage[\"PathFixes\"] = JSON.stringify(this.Table);\r\n		 },\r\n		LoadData       : function()\r\n		 {\r\n			var _Table = JSON.parse(window.localStorage[\"PathFixes\"] || \"[]\");\r\n\r\n			this.Table.Clear();\r\n			this.Table.AddRange(_Table);\r\n		 },\r\n	 },\r\n	'PlotGrabber   : GraphicsLayer' :\r\n	 {\r\n		Data   : arr,\r\n		MouPos : obj,\r\n		TabPos : obj,\r\n\r\n		constructor    : function(iAA)\r\n		 {\r\n			this.MouPos = {AX : 0, AY : 0, RX : 0, RY : 0};\r\n			this.TabPos =\r\n			{\r\n				Row_ : 0, Col_ : 0,\r\n\r\n				get Row(){return this.Row_}, set Row(i0){this.Row_ = Math.Clamp(i0,0,1000)},\r\n				get Col(){return this.Col_}, set Col(i0){this.Col_ = Math.Clamp(i0,0,10)}\r\n			};\r\n\r\n			\r\n			//this.Data = []; for(var Ri = 0; Ri < 1000; Ri++)\r\n			//{\r\n				//this.Data.Add([NaN]);\r\n			//}\r\n			this.Data   = iAA.Data || [];\r\n			this.Series = iAA.Series;\r\n\r\n			window.addEventListener(\"mousemove\", function(iEvt){this.MouPos.AX = iEvt.x; this.MouPos.AY = iEvt.y; this.UpdateForeground(this.Context);}.Bind(this));\r\n			window.addEventListener(\"mousedown\", function(iEvt){this.UpdateData(); this.UpdateForeground(this.Context);}.Bind(this));\r\n			window.addEventListener\r\n			(\r\n				\"keypress\", function(iEvt)\r\n				{\r\n					switch(iEvt.keyCode)\r\n					{\r\n						case 44  : this.TabPos.Row --;     break; //~~ <>;\r\n						case 46  : this.TabPos.Row ++;     break;\r\n\r\n						//case 60  : this.TabPos.Row -= 10;  break;\r\n						//case 62  : this.TabPos.Row += 10;  break;\r\n\r\n						case 91  : this.TabPos.Col --;     break; //~~ [];\r\n						case 93  : this.TabPos.Col ++;     break;\r\n\r\n						case 115 : this.SaveData(); break; //~~S;\r\n						case 108 : this.LoadData(); break; //~~L;\r\n\r\n						default  : console.info(iEvt.keyCode);\r\n					}\r\n					this.UpdateForeground(this.Context);\r\n				}\r\n				.Bind(this)\r\n			);\r\n\r\n			if(window.localStorage[\"PlotData\"]) this.LoadData();\r\n		 },\r\n\r\n		UpdateData     : function(iValue)\r\n		 {\r\n			var _CurrRow = this.Data[this.TabPos.Row]; if(!_CurrRow) _CurrRow = this.Data[this.TabPos.Row] = [];\r\n			{\r\n				if(this.TabPos.Col == 0)\r\n				{\r\n					_CurrRow[0] = this.MouPos.RX;\r\n					_CurrRow[1] = this.MouPos.RY;\r\n				}\r\n				else\r\n				{\r\n					_CurrRow[this.TabPos.Col] = this.MouPos.RY;\r\n				}\r\n			}\r\n			this.TabPos.Row ++;\r\n		 },\r\n		SaveData       : function()\r\n		 {\r\n			window.localStorage[\"PlotData\"] = JSON.stringify(this.Data);\r\n		 },\r\n		LoadData       : function()\r\n		 {\r\n			this.Data = JSON.parse(window.localStorage[\"PlotData\"] || \"[]\");\r\n		 },\r\n		UpdateForeground : function(iCtx)\r\n		 {\r\n			//var _Ctx = this.Context;\r\n\r\n			iCtx.W = window.innerWidth;\r\n			iCtx.H = window.innerHeight;\r\n\r\n			iCtx.FillStyle = \"#000000\";\r\n			\r\n			var _ScaX = 960 * 1.006;\r\n			var _ScaY = 960;\r\n	\r\n\r\n			iCtx.SetTransform(_ScaX, 0,0, _ScaY, 1, 0);\r\n			iCtx.Translate(0.5,0.5);\r\n\r\n			this.MouPos.RX = ((this.MouPos.AX - 1) / _ScaX) - 0.5;\r\n			this.MouPos.RY = ((this.MouPos.AY - 1) / _ScaY) - 0.5;\r\n\r\n			\r\n			iCtx.ClearRect(-0.5,-0.5, 1.5, 1);\r\n			\r\n			this.DrawCursor(iCtx, this.MouPos.RX, this.MouPos.RY);\r\n			this.DrawPlot(iCtx);\r\n			this.DrawInfo(iCtx);\r\n		 },\r\n\r\n		DrawCursor     : function(iCtx,iX,iY)\r\n		 {\r\n			iCtx.StrokeStyle = \"#000000\";\r\n			iCtx.LineWidth   = 0.002;\r\n			iCtx.StrokeStyle = \"rgba(0,0,0,0.3)\";\r\n\r\n			iCtx.StrokeRect(-0.5,-0.5,1.1,1.0);\r\n\r\n			iCtx.BeginPath();\r\n			{\r\n				iCtx.MoveTo(-0.01, -0.01); iCtx.LineTo(+0.01, +0.01);\r\n				iCtx.MoveTo(-0.01, +0.01); iCtx.LineTo(+0.01, -0.01);\r\n\r\n				iCtx.MoveTo(-0.5, iY); iCtx.LineTo(iX - 0.005, iY);\r\n				iCtx.MoveTo(iX + 0.005, iY); iCtx.LineTo(+1.1, iY);\r\n\r\n				iCtx.MoveTo(iX, -0.5); iCtx.LineTo(iX, iY - 0.005);\r\n				iCtx.MoveTo(iX, iY + 0.005); iCtx.LineTo(iX, +0.5);\r\n				\r\n				iCtx.Stroke();\r\n			}\r\n		 },\r\n		DrawInfo       : function(iCtx)\r\n		 {\r\n			iCtx.SetTransform(1,0,0,1,1075,10);\r\n\r\n			iCtx.LineWidth = 1;\r\n			iCtx.Font = \"20px courier\";\r\n			iCtx.TextBaseline = \"top\";\r\n\r\n			iCtx.FillText(\"X = \" + this.MouPos.RX.ToString2(3), 10,0);\r\n			iCtx.FillText(\"Y = \" + this.MouPos.RY.ToString2(3), 10,20);\r\n\r\n			iCtx.FillText(\"R = \" + this.TabPos.Row,             10,60);\r\n			iCtx.FillText(\"C = \" + this.TabPos.Col,             10,80);\r\n		 },\r\n		DrawPlot       : function(iCtx)\r\n		 {\r\n			var _YCol = this.TabPos.Col != 0 ? this.TabPos.Col : 1;\r\n\r\n			iCtx.BeginPath();\r\n			{\r\n				for(var cR,Ri = 0; cR = this.Data[Ri], Ri < this.Data.Length; Ri++)\r\n				{\r\n					var cX = Ri == this.TabPos.Row && this.TabPos.Col == 0 ? this.MouPos.RX : cR[0];\r\n					var cY = Ri == this.TabPos.Row ?  this.MouPos.RY : cR[_YCol];\r\n\r\n					iCtx.LineTo(cX, cY);\r\n				}\r\n				iCtx.StrokeStyle = \"#000000\";\r\n				iCtx.Stroke();\r\n			}\r\n			iCtx.BeginPath();\r\n			{\r\n				var _CrsRow = this.Data[this.TabPos.Row];\r\n				var _CrsX   = _CrsRow[0];\r\n				var _CrsY   = _CrsRow[_YCol];\r\n\r\n				iCtx.MoveTo(_CrsX - 0.01, _CrsY); iCtx.LineTo(_CrsX + 0.01, _CrsY);\r\n				iCtx.MoveTo(_CrsX, _CrsY - 0.01); iCtx.LineTo(_CrsX, _CrsY + 0.01);\r\n\r\n				iCtx.StrokeStyle = \"rgba(255,0,0,0.7)\";\r\n				iCtx.Stroke();\r\n			}\r\n		 },\r\n	 },\r\n	'DataLeveler   : GraphicsLayer' :\r\n	 {\r\n		Table  : arr,\r\n		Series : obj('TimeSeries.Set'),\r\n		//MouPos : obj,\r\n		TabPos : obj,\r\n		Field  : str,\r\n\r\n\r\n		constructor    : function(iAA)\r\n		 {\r\n			//this.MouPos = {AX : 0, AY : 0, RX : 0, RY : 0};\r\n			this.TabPos =\r\n			{\r\n				Row_ : 0, Col_ : 0,\r\n\r\n				get Row(){return this.Row_}, set Row(i0){this.Row_ = Math.Clamp(i0,0,1000)},\r\n				get Col(){return this.Col_}, set Col(i0){this.Col_ = Math.Clamp(i0,0,10)}\r\n			};\r\n\r\n			this.Table  = iAA.Table || error;\r\n			this.Series = iAA.Series;\r\n			\r\n			this.Field = \"PosZ\";\r\n			//this.BackColor = \"#000000\";\r\n			//window.addEventListener(\"mousemove\", function(iEvt){this.MouPos.AX = iEvt.x; this.MouPos.AY = iEvt.y; this.UpdateGraphics();}.Bind(this));\r\n			//window.addEventListener(\"mousedown\", function(iEvt){this.UpdateData(); this.UpdateGraphics();}.Bind(this));\r\n			window.addEventListener\r\n			(\r\n				\"keypress\", function(iEvt)\r\n				{\r\n					switch(iEvt.keyCode)\r\n					{\r\n						//case 44  : this.TabPos.Row --;     break;\r\n						//case 46  : this.TabPos.Row ++;     break;\r\n\r\n						//case 60  : this.TabPos.Row -= 10;  break;\r\n						//case 62  : this.TabPos.Row += 10;  break;\r\n\r\n						//case 91  : this.TabPos.Col --;     break;\r\n						//case 93  : this.TabPos.Col ++;     break;\r\n\r\n						case 115 : this.SaveData(); break; //~~S;\r\n						case 108 : this.LoadData(); break; //~~L;\r\n\r\n						default  : console.info(iEvt.keyCode);\r\n					}\r\n					this.Invalidate();\r\n				}\r\n				.Bind(this)\r\n			);\r\n\r\n			if(window.localStorage[\"DataLevels\"]) this.LoadData();\r\n		 },\r\n		//SyncS2P : function()\r\n		 //{\r\n			\r\n		 //},\r\n		UpdateData     : function(iValue)\r\n		 {\r\n		 \r\n			//debugger;\r\n\r\n			if(!gApp.PathFixer) return;\r\n\r\n\r\n\r\n			this.Table = gApp.PathFixer.Table;\r\n\r\n			//var _Table = gApp.DataFixer.Table;\r\n\r\n			//this.Table.Clear();\r\n			//this.Table.AddRange(_Table);\r\n\r\n			this.Series = UVS.Data.GetSeriesFromTable(this.Table);\r\n		 },\r\n		SaveData       : function()\r\n		 {\r\n			window.localStorage[\"DataLevels\"] = JSON.stringify(this.Table);\r\n		 },\r\n		LoadData       : function()\r\n		 {\r\n			var _Table = JSON.parse(window.localStorage[\"DataLevels\"] || \"[]\");\r\n\r\n			this.Table.Clear();\r\n			this.Table.AddRange(_Table);\r\n		 },\r\n		UpdateForeground : function(iCtx)\r\n		 {\r\n			//iCtx.W = \r\n			//iCtx.FillStyle = \"#������\";\r\n			iCtx.ClearRect(0,0,iCtx.W, iCtx.H);\r\n\r\n			iCtx.FillStyle = \"#ffff00\";\r\n			iCtx.FillText(new Date().ToString(),10,10);\r\n\r\n			\r\n\r\n			//var _Ctx = this.Context;\r\n\r\n			//_Ctx.W = window.innerWidth;\r\n			//_Ctx.H = window.innerHeight;\r\n\r\n			//_Ctx.FillStyle = \"#ffffff\";\r\n			\r\n			//var _ScaX = 960 * 1.006;\r\n			//var _ScaY = 960;\r\n	\r\n\r\n			//_Ctx.SetTransform(_ScaX, 0,0, _ScaY, 1, 0);\r\n			//_Ctx.Translate(0.5,0.5);\r\n\r\n			//this.MouPos.RX = ((this.MouPos.AX - 1) / _ScaX) - 0.5;\r\n			//this.MouPos.RY = ((this.MouPos.AY - 1) / _ScaY) - 0.5;\r\n\r\n			\r\n			//_Ctx.ClearRect(-0.5,-0.5, 1.5, 1);\r\n			\r\n			//this.DrawCursor(_Ctx, this.MouPos.RX, this.MouPos.RY);\r\n			this.DrawPlot(iCtx);\r\n			//this.DrawInfo(_Ctx);\r\n		 },\r\n\r\n		DrawCursor     : function(iCtx,iX,iY)\r\n		 {\r\n			//iCtx.StrokeStyle = \"#ffffff\";\r\n			//iCtx.LineWidth   = 0.002;\r\n			//iCtx.StrokeStyle = \"rgba(255,255,0,0.3)\";\r\n\r\n			//iCtx.StrokeRect(-0.5,-0.5,1.1,1.0);\r\n\r\n			//iCtx.BeginPath();\r\n			//{\r\n				//iCtx.MoveTo(-0.01, -0.01); iCtx.LineTo(+0.01, +0.01);\r\n				//iCtx.MoveTo(-0.01, +0.01); iCtx.LineTo(+0.01, -0.01);\r\n\r\n				//iCtx.MoveTo(-0.5, iY); iCtx.LineTo(iX - 0.005, iY);\r\n				//iCtx.MoveTo(iX + 0.005, iY); iCtx.LineTo(+1.1, iY);\r\n\r\n				//iCtx.MoveTo(iX, -0.5); iCtx.LineTo(iX, iY - 0.005);\r\n				//iCtx.MoveTo(iX, iY + 0.005); iCtx.LineTo(iX, +0.5);\r\n				\r\n				//iCtx.Stroke();\r\n			//}\r\n		 },\r\n		DrawInfo       : function(iCtx)\r\n		 {\r\n			//iCtx.SetTransform(1,0,0,1,1075,10);\r\n\r\n			//iCtx.LineWidth = 1;\r\n			//iCtx.Font = \"20px courier\";\r\n			//iCtx.TextBaseline = \"top\";\r\n\r\n			//iCtx.FillText(\"X = \" + this.MouPos.RX.ToString2(3), 10,0);\r\n			//iCtx.FillText(\"Y = \" + this.MouPos.RY.ToString2(3), 10,20);\r\n\r\n			//iCtx.FillText(\"R = \" + this.TabPos.Row,             10,60);\r\n			//iCtx.FillText(\"C = \" + this.TabPos.Col,             10,80);\r\n		 },\r\n		DrawPlot       : function(iCtx)\r\n		 {\r\n			var fDrawGraph = function(iField,iColor)\r\n			{\r\n				var _W = 0.000014;\r\n\r\n				iCtx.StrokeStyle = iColor;\r\n				iCtx.FillStyle   = iColor;\r\n\r\n				iCtx.BeginPath(); for(var _EE = this.Series.Entries, _CursorI = gApp.PathFixer ? gApp.PathFixer.State.CurrRow : 0, cE,Ei = 0, cX = 0, cY; cE = _EE[Ei]; Ei++)\r\n				{\r\n					cX += cE.Value.Velocity.Set(null,null,0).Length * _W;\r\n					\r\n				\r\n					switch(iField)\r\n					{\r\n						case \"PosZ\" : cY  = Scale01(cE.Value.Position.Z,    0,    21000); break;\r\n						//case \"VSpd\" : cY  = Scale01(cE.Value.VSpd,          0,  -300); break;\r\n						case \"VSpd\" : cY  = Scale01(cE.Value.VSpd,         -300,      0); break;\r\n						//case \"IAS\"  : cY  = Scale01(cE.Value.IAS,           0,   600); break;\r\n						case \"IAS\"  : cY  = Scale01(cE.Value.IAS,           300,   1000); break;\r\n\r\n						case \"MSpd\" : cY  = Scale01(cE.Value.MSpd,          0.25,     2); break;\r\n\r\n						case \"Vel\"  : cY  = Scale01(cE.Value.Vel,           0,  1000); break;\r\n						case \"Acc\"  : cY  = Scale01(cE.Value.Acc,           -1000,  +1000); break;\r\n\r\n						default : throw \"WTF\";\r\n					}\r\n\r\n					var cAX = cX * iCtx.W,  cAY = (1 - cY) * iCtx.H;\r\n					{\r\n						if(isNaN(cAX * cAY)) continue;\r\n\r\n						iCtx.LineTo(cAX, cAY);\r\n						{\r\n							//iCtx.MoveTo(cAX - 5, cAY - 5);\r\n							//iCtx.LineTo(cAX + 5, cAY + 5);\r\n							//iCtx.MoveTo(cAX - 5, cAY + 5);\r\n							//iCtx.LineTo(cAX + 5, cAY - 5);\r\n\r\n							\r\n\r\n							\r\n\r\n							if(Ei == _CursorI) iCtx.FillRect(cAX - 3, cAY - 3, 6,6);\r\n							else               iCtx.FillRect(cAX - 1, cAY - 1, 2,2);\r\n\r\n\r\n							//if()\r\n							//{\r\n								\r\n							//}\r\n\r\n\r\n							//iCtx.LineTo(cAX + 5, cAY + 5);\r\n							//iCtx.MoveTo(cAX - 5, cAY + 5);\r\n							//iCtx.LineTo(cAX + 5, cAY - 5);\r\n						}\r\n						//iCtx.MoveTo(cAX, cAY);\r\n					}\r\n				}\r\n				iCtx.Stroke();\r\n			}\r\n			.Bind(this);\r\n			\r\n			fDrawGraph(\"VSpd\", \"#ff0000\");\r\n			fDrawGraph(\"PosZ\", \"#00aaff\");\r\n\r\n			fDrawGraph(\"Vel\",  \"#ffffff\");\r\n			fDrawGraph(\"Acc\",  \"#00ffff\");\r\n			fDrawGraph(\"MSpd\", \"#00cc00\");\r\n			fDrawGraph(\"IAS\",  \"#cc00cc\");\r\n		 },\r\n	 }\r\n	\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
	"../UVS/Math.Geometry.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'Math',\r\n	],\r\n\r\n	'Math.Geometry' : \r\n	 {\r\n		'Vector2'     : \r\n		 {\r\n			X : num(0),\r\n			Y : num(0),\r\n			\r\n			constructor : function(iX,iY)\r\n			 {\r\n				this << iX || 0;\r\n				this << iY || 0;\r\n			 },\r\n		 },\r\n		'Vector3'     : \r\n		 {\r\n			X : num(0),\r\n			Y : num(0),\r\n			Z : num(0),\r\n			\r\n			constructor : function Vector3(iX,iY,iZ)\r\n			 {\r\n				this << iX || 0;\r\n				this << iY || 0;\r\n				this << iZ || 0;\r\n			 },\r\n			\r\n			Length          : {get : function()    {return Sqrt((this.X * this.X) + (this.Y * this.Y) + (this.Z * this.Z));}},\r\n			\r\n			Set             : function(iX,iY,iZ, oVec)\r\n			 {\r\n				oVec << this || this.Clone();\r\n				{\r\n					if(iX != undefined) oVec.X = iX;\r\n					if(iY != undefined) oVec.Y = iY;\r\n					if(iZ != undefined) oVec.Z = iZ;\r\n				}\r\n				return oVec;\r\n			 },\r\n			Normalize       : function(oVec)\r\n			 {\r\n				oVec << this || this.Clone();\r\n				{\r\n					var _Len = this.Length;\r\n					this.MultiplyScalar(_Len == 0 ? 0 : 1 / _Len, oVec);\r\n				}\r\n				return oVec;\r\n			 },\r\n			\r\n			Add             : function(iVec, oVec)\r\n			 {\r\n				oVec << this || new Vector3;\r\n				{\r\n					oVec.X = this.X + iVec.X;\r\n					oVec.Y = this.Y + iVec.Y;\r\n					oVec.Z = this.Z + iVec.Z;\r\n				}\r\n				return oVec;\r\n			 },\r\n			Subtract        : function(iVec, oVec)\r\n			 {\r\n				oVec << this || new Vector3;\r\n				{\r\n					oVec.X = this.X - iVec.X;\r\n					oVec.Y = this.Y - iVec.Y;\r\n					oVec.Z = this.Z - iVec.Z;\r\n				}\r\n				return oVec;\r\n			 },\r\n			Inverse         : function(oVec)\r\n			 {\r\n				return this.MultiplyScalar(-1, oVec);\r\n			 },\r\n			Multiply        : function(ibVec, oVec)\r\n			 {\r\n				return Vector3.Multiply(this, ibVec, oVec);\r\n			 },\r\n			MultiplyScalar  : function(iScalar$num, oVec)\r\n			 {\r\n				oVec << this || new Vector3;\r\n				{\r\n					oVec.X = this.X * iScalar;\r\n					oVec.Y = this.Y * iScalar;\r\n					oVec.Z = this.Z * iScalar;\r\n				}\r\n				return oVec;\r\n			 },\r\n\r\n			Cross           : function(ibVec, oVec)\r\n			 {\r\n				return Vector3.Cross(this, ibVec, oVec);\r\n			 },\r\n			Dot             : function(ibVec, oVec)\r\n			 {\r\n				return Vector3.Dot(this, ibVec, oVec);\r\n			 },\r\n			\r\n			AngleTo         : function(iVec)\r\n			 {\r\n				var _Theta = this.Dot(iVec) / (this.Length * iVec.Length);\r\n				return Acos(Clamp(_Theta));\r\n			 },\r\n			DistanceTo      : function(iVec)\r\n			 {\r\n				return this.Subtract(iVec).Length;\r\n			 },\r\n			\r\n			Rotate          : function(iQua, oVec)\r\n			 {\r\n				oVec << this || this.Clone();\r\n				return Vector3.ApplyQuaternion(this.X, this.Y, this.Z, iQua, oVec);\r\n			 },\r\n			LookAt          : function(iTgtV, iUpV, oQuat)\r\n			 {\r\n				throw \"NI\";\r\n\r\n				oQuat << this || new Quaternion;\r\n				{\r\n					\r\n				}\r\n				return oQuat;\r\n			 },\r\n\r\n			Clone           : function(){return new Vector3(this.X,this.Y,this.Z)},\r\n			ToString        : function(){return \"(\" + this.X.ToString2() + \",\" + this.Y.ToString2() + \",\" + this.Z.ToString2() + \")\"},\r\n			ToTHREE         : function(){return new THREE.Vector3(this.X,this.Y,this.Z)},\r\n\r\n			static :\r\n			 {\r\n				Dot             : function(iaV, ibV, oDotP$num)\r\n				 {\r\n					return (iaV.X * ibV.X) + (iaV.Y * ibV.Y) + (iaV.Z * ibV.Z);\r\n				 },\r\n				Cross           : function(iaV, ibV, oVec)\r\n				 {\r\n					var _aX = iaV.X,  _bX = ibV.X,\r\n						 _aY = iaV.Y,  _bY = ibV.Y,\r\n						 _aZ = iaV.Z,  _bZ = ibV.Z;\r\n\r\n					oVec << iaV || new Vector3;\r\n					{\r\n						oVec.X = (_aY * _bZ) - (_aZ * _bY);\r\n						oVec.Y = (_aZ * _bX) - (_aX * _bZ);\r\n						oVec.Z = (_aX * _bY) - (_aY * _bX);\r\n					}\r\n					return oVec;\r\n				 },\r\n				Add             : function(iaV, ibV, oVec)\r\n				 {\r\n					oVec << iaV || new Vector3;\r\n					{\r\n						oVec.X = iaV.X + ibV.X;\r\n						oVec.Y = iaV.Y + ibV.Y;\r\n						oVec.Z = iaV.Z + ibV.Z;\r\n					}\r\n					return oVec;\r\n				 },\r\n				Multiply        : function(iaV, ibV, oVec)\r\n				 {\r\n					oVec << iaV || new Vector3;\r\n					{\r\n						oVec.X = iaV.X * ibV.X;\r\n						oVec.Y = iaV.Y * ibV.Y;\r\n						oVec.Z = iaV.Z * ibV.Z;\r\n					}\r\n					return oVec;\r\n				 },\r\n				Mix             : function(iaV, ibV, iA$num, oVec)\r\n				 {\r\n					oVec << iaV || new Vector3;\r\n					{\r\n						oVec.X = (iaV.X * (1 - iA)) + (ibV.X * iA);\r\n						oVec.Y = (iaV.Y * (1 - iA)) + (ibV.Y * iA);\r\n						oVec.Z = (iaV.Z * (1 - iA)) + (ibV.Z * iA);\r\n					}\r\n					return oVec;\r\n				 },\r\n\r\n				ApplyQuaternion : function(iVecX, iVecY, iVecZ, iQua, oVec)\r\n				 {\r\n					var _InvX = +(iQua.W * iVecX) + (iQua.Y * iVecZ) - (iQua.Z * iVecY),\r\n						 _InvY = +(iQua.W * iVecY) + (iQua.Z * iVecX) - (iQua.X * iVecZ),\r\n						 _InvZ = +(iQua.W * iVecZ) + (iQua.X * iVecY) - (iQua.Y * iVecX),\r\n						 _InvW = -(iQua.X * iVecX) - (iQua.Y * iVecY) - (iQua.Z * iVecZ);\r\n\r\n					if(!oVec) oVec = new Vector3;\r\n					{\r\n						oVec.X = (_InvX * iQua.W) + (_InvW * -(iQua.X)) + (_InvY * -(iQua.Z)) - (_InvZ * -(iQua.Y));\r\n						oVec.Y = (_InvY * iQua.W) + (_InvW * -(iQua.Y)) + (_InvZ * -(iQua.X)) - (_InvX * -(iQua.Z));\r\n						oVec.Z = (_InvZ * iQua.W) + (_InvW * -(iQua.Z)) + (_InvX * -(iQua.Y)) - (_InvY * -(iQua.X));\r\n					};\r\n					return oVec;\r\n				 },\r\n				\r\n				Clamp           : function(iVec, iLimV, oVec)\r\n				 {\r\n					if(!iLimV) iLimV = new Vector3(1,1,1);\r\n\r\n					oVec << iVec || new Vector3;\r\n					{\r\n						oVec.X = Clamp(iVec.X, iLimV.X);\r\n						oVec.Y = Clamp(iVec.Y, iLimV.Y);\r\n						oVec.Z = Clamp(iVec.Z, iLimV.Z);\r\n					}\r\n					return oVec;\r\n				 },\r\n				\r\n				Magnitude       : function(iVec, oVec)\r\n				 {\r\n					oVec << iVec || new Vector3;\r\n					{\r\n						oVec.X = Abs(iVec.X);\r\n						oVec.Y = Abs(iVec.Y);\r\n						oVec.Z = Abs(iVec.Z);\r\n					}\r\n					return oVec;\r\n				 },\r\n				ToTHREE         : function(iVec, oVec$ext){return new THREE.Vector3(iVec.X,iVec.Y,iVec.Z)},\r\n				FromTHREE       : function(iVec$ext, oVec){return new Vector3(iVec.x,iVec.y,iVec.z)},\r\n\r\n				FromString : function(iStr){var _StrM = iStr.match(/^\\(([+-\\d\\.e]+),([+-\\d\\.e]+),([+-\\d\\.e]+)\\)$/); return new Vector3(parseFloat(_StrM[1]),parseFloat(_StrM[2]),parseFloat(_StrM[3]))},\r\n			 }\r\n		 },\r\n		'Quaternion'  : \r\n		 {\r\n			X : num(0),\r\n			Y : num(0),\r\n			Z : num(0),\r\n			W : num(1),\r\n\r\n			Axis            : {get : function(oAxisV$Vector3){return new Vector3(this.X, this.Y, this.Z).Normalize(self);}},\r\n			Angle           : {get : function(oAngle$num){return Acos(this.W) * 2}},\r\n			\r\n			constructor     : function Quaternion(iX,iY,iZ,iW)\r\n			 {\r\n				this << iX || 0;\r\n				this << iY || 0;\r\n				this << iZ || 0;\r\n				this << iW || 1;\r\n			 },\r\n			\r\n			Length          : {get : function(){return Sqrt((this.X * this.X) + (this.Y * this.Y) + (this.Z * this.Z) + (this.W * this.W))}},\r\n			\r\n			Inverse         : function (oQua)\r\n			 {\r\n				oQua << this || new Quaternion;\r\n				{\r\n					oQua.X = -this.X;\r\n					oQua.Y = -this.Y;\r\n					oQua.Z = -this.Z;\r\n					oQua.W = +this.W;\r\n				}\r\n				return oQua;\r\n			 },\r\n			Normalize       : function (oQua)\r\n			 {\r\n				var _Len = this.Length, _InvL = 1 / this.Length; if(_Len == 0) throw \"WTF: quaternion zero length\";\r\n\r\n				oQua << this || new Quaternion;\r\n				{\r\n					oQua.X = this.X * _InvL;\r\n					oQua.Y = this.Y * _InvL;\r\n					oQua.Z = this.Z * _InvL;\r\n					oQua.W = this.W * _InvL;\r\n				}\r\n				return oQua;\r\n			 },\r\n			\r\n			//Fraction        : function(iT, oQua)\r\n			 //{\r\n				//return Quaternion.Identity.Slerp(this, iT, oQua);\r\n			 //},\r\n			Slerp           : function(ibQua, iT, oQua)\r\n			 {\r\n				oQua << this || this.Clone();\r\n				return Quaternion.Slerp(this, ibQua, iT, oQua);\r\n			 },\r\n			Add             : function(iRotV, oQua)\r\n			 {\r\n				oQua << this || this.Clone();\r\n				return oQua.Multiply(Quaternion.FromRotationVector(iRotV), self);\r\n			 },\r\n			Multiply        : function(ibQua, oQua)\r\n			 {\r\n				var _aX = this.X,  _bX = ibQua.X,\r\n					 _aY = this.Y,  _bY = ibQua.Y,\r\n					 _aZ = this.Z,  _bZ = ibQua.Z,\r\n					 _aW = this.W,  _bW = ibQua.W;\r\n\r\n				//~~ ov = v1*w2 + v2*w1 + cross(v1,v2);\r\n				//~~ ow = w1*w2 - dot(v1,v2);\r\n\r\n				oQua << this || new Quaternion;\r\n				{\r\n					oQua.X = (_aX * _bW) + (_bX * _aW) + (_aY * _bZ) - (_aZ * _bY);\r\n					oQua.Y = (_aY * _bW) + (_bY * _aW) + (_aZ * _bX) - (_aX * _bZ);\r\n					oQua.Z = (_aZ * _bW) + (_bZ * _aW) + (_aX * _bY) - (_aY * _bX);\r\n					oQua.W = (_aW * _bW) - (_aX * _bX) - (_aY * _bY) - (_aZ * _bZ);\r\n				}\r\n				return oQua;\r\n			 },\r\n			Rotate          : function(iEuX,iEuY,iEuZ,iOrder, oQua)\r\n			 {\r\n				var iQua = Quaternion.FromEuler(new EulerAngles(iEuX,iEuY,iEuZ,iOrder));\r\n				return this.Multiply(iQua, oQua);\r\n			 },\r\n			Clone           : function(){return new Quaternion(this.X,this.Y,this.Z,this.W)},\r\n			ToString        : function(){return \"(\" + this.X.ToString2() + \",\" + this.Y.ToString2() + \",\" + this.Z.ToString2() + \",\" + this.W.ToString2() + \")\"},\r\n			ToTHREE         : function(){return Quaternion.ToTHREE(this)},\r\n\r\n			static :\r\n			 {\r\n				Identity            : {get : function(){return new Quaternion()}},\r\n				Rotated             : function(iX,iY,iZ,iOrder){return new Quaternion().Rotate(iX,iY,iZ,iOrder)},\r\n				Slerp               : function(iaQua, ibQua, iT, oQua)\r\n				 {\r\n					var _aX = iaQua.X, _bX = ibQua.X, _X,\r\n						 _aY = iaQua.Y, _bY = ibQua.Y, _Y,\r\n						 _aZ = iaQua.Z, _bZ = ibQua.Z, _Z,\r\n						 _aW = iaQua.W, _bW = ibQua.W, _W;\r\n\r\n					var _CosHalfT = (_aX * _bX) + (_aY * _bY) + (_aZ * _bZ) + (_aW * _bW);\r\n\r\n					if(!oQua) oQua = new Quaternion;\r\n					{\r\n						if(Abs(_CosHalfT) >= 1)\r\n						{\r\n							oQua.X = _aX;\r\n							oQua.Y = _aY;\r\n							oQua.Z = _aZ;\r\n							oQua.W = _aW;\r\n						}\r\n						else\r\n						{\r\n							if   (_CosHalfT < 0) {_X = -_bX; _Y = -_bY; _Z = -_bZ; _W = -_bW; _CosHalfT = -_CosHalfT;}\r\n							else                 {_X = +_bX; _Y = +_bY; _Z = +_bZ; _W = +_bW;}\r\n							\r\n							var _HalfT    = Acos(_CosHalfT);\r\n							var _SinHalfT = Sqrt(1 - (_CosHalfT * _CosHalfT));\r\n\r\n							if(Abs(_SinHalfT) < 0.001)\r\n							{\r\n								oQua.X = (_aX + _bX) * 0.5;\r\n								oQua.Y = (_aY + _bY) * 0.5;\r\n								oQua.Z = (_aZ + _bZ) * 0.5;\r\n								oQua.W = (_aW + _bW) * 0.5;\r\n							}\r\n							else\r\n							{\r\n								var _aR = Sin((1 - iT) * _HalfT) / _SinHalfT,\r\n									 _bR = Sin(     iT  * _HalfT) / _SinHalfT;\r\n\r\n								oQua.X = (_aX * _aR) + (_bX * _bR);\r\n								oQua.Y = (_aY * _aR) + (_bY * _bR);\r\n								oQua.Z = (_aZ * _aR) + (_bZ * _bR);\r\n								oQua.W = (_aW * _aR) + (_bW * _bR);\r\n							}\r\n						}\r\n					}\r\n					return oQua;\r\n				 },\r\n				\r\n				FromVectors         : function(iFrV, iToV, oQua)\r\n				 {\r\n					var _CroP = Vector3.Cross (iFrV, iToV);\r\n					var _DotP = Vector3.Dot   (iFrV, iToV); \r\n\r\n					if(!oQua) oQua = new Quaternion;\r\n					{\r\n						oQua.X = _CroP.X;\r\n						oQua.Y = _CroP.Y;\r\n						oQua.Z = _CroP.Z;\r\n\r\n						oQua.W = 1 + _DotP;\r\n					}\r\n					return oQua.Normalize(self);\r\n				 },\r\n				FromRotationVector  : function(iRotV, oQua)\r\n				 {\r\n					var _AxisV = iRotV.Normalize();\r\n					var _Angle = iRotV.Length;\r\n					\r\n					return Quaternion.FromAxisAngle(_AxisV, _Angle, oQua);\r\n				 },\r\n				FromEuler           : function(iEuler, oQua)\r\n				 {\r\n					var _CX = Cos(iEuler.X / 2), _SX = Sin(iEuler.X / 2),\r\n						 _CY = Cos(iEuler.Y / 2), _SY = Sin(iEuler.Y / 2),\r\n						 _CZ = Cos(iEuler.Z / 2), _SZ = Sin(iEuler.Z / 2);\r\n\r\n					var _SSS = _SX * _SY * _SZ,  _CCC = _CX * _CY * _CZ,\r\n						 _CSS = _CX * _SY * _SZ,  _SCC = _SX * _CY * _CZ,\r\n						 _SCS = _SX * _CY * _SZ,  _CSC = _CX * _SY * _CZ,\r\n						 _SSC = _SX * _SY * _CZ,  _CCS = _CX * _CY * _SZ;\r\n\r\n					if(!oQua) oQua = new Quaternion; switch(iEuler.Order)\r\n					{\r\n						case \"XYZ\" : oQua.X = _SCC + _CSS; oQua.Y = _CSC - _SCS; oQua.Z = _CCS + _SSC; oQua.W = _CCC - _SSS; break;\r\n						case \"YXZ\" : oQua.X = _SCC + _CSS; oQua.Y = _CSC - _SCS; oQua.Z = _CCS - _SSC; oQua.W = _CCC + _SSS; break;\r\n						case \"ZXY\" : oQua.X = _SCC - _CSS; oQua.Y = _CSC + _SCS; oQua.Z = _CCS + _SSC; oQua.W = _CCC - _SSS; break;\r\n						case \"ZYX\" : oQua.X = _SCC - _CSS; oQua.Y = _CSC + _SCS; oQua.Z = _CCS - _SSC; oQua.W = _CCC + _SSS; break;\r\n						case \"YZX\" : oQua.X = _SCC + _CSS; oQua.Y = _CSC + _SCS; oQua.Z = _CCS - _SSC; oQua.W = _CCC - _SSS; break;\r\n						case \"XZY\" : oQua.X = _SCC - _CSS; oQua.Y = _CSC - _SCS; oQua.Z = _CCS + _SSC; oQua.W = _CCC + _SSS; break;\r\n\r\n						default    : throw \"Invalid euler angles order: '\" + iEuler.Order + \"'\";\r\n					}\r\n					return oQua;\r\n				 },\r\n				FromAxisAngle       : function(iAxisV, iAngle, oQua)\r\n				 {\r\n					 var _SA = Sin(iAngle / 2), _CA = Cos(iAngle / 2);\r\n\r\n					 return new Quaternion(iAxisV.X * _SA, iAxisV.Y * _SA, iAxisV.Z * _SA, _CA).Normalize(self);\r\n				 },\r\n				ToTHREE             : function(iQua, oQua$ext){return new THREE.Quaternion(iQua.X,iQua.Y,iQua.Z,iQua.W)},\r\n				FromTHREE           : function(iQua$ext, oQua){return new Quaternion(iQua.x,iQua.y,iQua.z,iQua.w)},\r\n				\r\n				FromString : function(iStr){var _StrM = iStr.match(/^\\(([+-\\d\\.e]+),([+-\\d\\.e]+),([+-\\d\\.e]+),([+-\\d\\.e]+)\\)$/); return new Quaternion(parseFloat(_StrM[1]),parseFloat(_StrM[2]),parseFloat(_StrM[3]),parseFloat(_StrM[4]))},\r\n			 }\r\n		 },\r\n		'EulerAngles' : \r\n		 {\r\n			X     : num,\r\n			Y     : num,\r\n			Z     : num,\r\n			Order : str,\r\n			\r\n			constructor : function EulerAngles(iX,iY,iZ,iOrder)\r\n			 {\r\n				this << iX     || 0;\r\n				this << iY     || 0;\r\n				this << iZ     || 0;\r\n				this << iOrder || \"XYZ\";\r\n			 },\r\n\r\n			Clone   : function(){return new Euler(this.X,this.Y,this.Z,this.Order)},\r\n			ToTHREE : function(){return new THREE.Euler(this.X,this.Y,this.Z,this.Order)},\r\n\r\n			static :\r\n			 {\r\n				FromQuaternion : function (iQuat, iOrder, oEulerA)\r\n				 {\r\n					// iQuat is assumed to be normalized\r\n					// http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-iQuatuatuaternions-and-euler-vectors/content/SpinCalc.m\r\n\r\n					var sqx = iQuat.X * iQuat.X;\r\n					var sqy = iQuat.Y * iQuat.Y;\r\n					var sqz = iQuat.Z * iQuat.Z;\r\n					var sqw = iQuat.W * iQuat.W;\r\n\r\n					if(oEulerA == undefined) oEulerA = new EulerAngles(); if(!iOrder) iOrder = oEulerA.Order;\r\n					{\r\n						switch(iOrder)\r\n						{\r\n							case \"XYZ\":\r\n\r\n								oEulerA.X = Atan2(2 * (iQuat.X * iQuat.W - iQuat.Y * iQuat.Z), (sqw - sqx - sqy + sqz));\r\n								oEulerA.Y = Asin(Clamp(2 * (iQuat.X * iQuat.Z + iQuat.Y * iQuat.W)));\r\n								oEulerA.Z = Atan2(2 * (iQuat.Z * iQuat.W - iQuat.X * iQuat.Y), (sqw + sqx - sqy - sqz));\r\n								break;\r\n\r\n							case \"YXZ\":\r\n\r\n								oEulerA.X = Asin(Clamp(2 * (iQuat.X * iQuat.W - iQuat.Y * iQuat.Z)));\r\n								oEulerA.Y = Atan2(2 * (iQuat.X * iQuat.Z + iQuat.Y * iQuat.W), (sqw - sqx - sqy + sqz));\r\n								oEulerA.Z = Atan2(2 * (iQuat.X * iQuat.Y + iQuat.Z * iQuat.W), (sqw - sqx + sqy - sqz));\r\n								break;\r\n\r\n							case \"ZXY\":\r\n\r\n								oEulerA.X = Asin(Clamp(2 * (iQuat.X * iQuat.W + iQuat.Y * iQuat.Z)));\r\n								oEulerA.Y = Atan2(2 * (iQuat.Y * iQuat.W - iQuat.Z * iQuat.X), (sqw - sqx - sqy + sqz));\r\n								oEulerA.Z = Atan2(2 * (iQuat.Z * iQuat.W - iQuat.X * iQuat.Y), (sqw - sqx + sqy - sqz));\r\n								break;\r\n\r\n							case \"ZYX\":\r\n\r\n								oEulerA.X = Atan2(2 * (iQuat.X * iQuat.W + iQuat.Z * iQuat.Y), (sqw - sqx - sqy + sqz));\r\n								oEulerA.Y = Asin(Clamp(2 * (iQuat.Y * iQuat.W - iQuat.X * iQuat.Z)));\r\n								oEulerA.Z = Atan2(2 * (iQuat.X * iQuat.Y + iQuat.Z * iQuat.W), (sqw + sqx - sqy - sqz));\r\n								break;\r\n\r\n							case \"YZX\":\r\n\r\n								oEulerA.X = Atan2(2 * (iQuat.X * iQuat.W - iQuat.Z * iQuat.Y), (sqw - sqx + sqy - sqz));\r\n								oEulerA.Y = Atan2(2 * (iQuat.Y * iQuat.W - iQuat.X * iQuat.Z), (sqw + sqx - sqy - sqz));\r\n								oEulerA.Z = Asin(Clamp(2 * (iQuat.X * iQuat.Y + iQuat.Z * iQuat.W)));\r\n								break;\r\n\r\n							case \"XZY\":\r\n\r\n								oEulerA.X = Atan2(2 * (iQuat.X * iQuat.W + iQuat.Y * iQuat.Z), (sqw - sqx + sqy - sqz));\r\n								oEulerA.Y = Atan2(2 * (iQuat.X * iQuat.Z + iQuat.Y * iQuat.W), (sqw + sqx - sqy - sqz));\r\n								oEulerA.Z = Asin(Clamp(2 * (iQuat.Z * iQuat.W - iQuat.X * iQuat.Y)));\r\n								break;\r\n\r\n							default : throw \"Invalid order: '\" + iOrder + \"'\"; \r\n						}\r\n					}\r\n					return oEulerA;\r\n				 },\r\n				FromTHREE      : function(iV){return new Euler(iV.x,iV.y,iV.z,iV.order)},\r\n			 }\r\n		 },\r\n	 }\r\n});",
	"../UVS/Simulation/Sim.Common.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'Math',\r\n		'Math.Geometry'\r\n	],\r\n		\r\n	'UVS.Simulation' : \r\n	 {\r\n		'Engine'                       : \r\n		 {\r\n			Objects    : obj('Object.Collection', self),\r\n			Time       : num(0),\r\n			TimeScale  : num(1.0),\r\n			LastUpdate : nil('Date'),\r\n			LastDelta  : num(0),\r\n			IsActive   : boo(true),\r\n\r\n			//constructor : function(iAA)\r\n			 //{\r\n				//this.Objects    = new Object.Collection(this);\r\n				//this.Time       = 0;\r\n				//this.LastUpdate = undefined;\r\n				//this.LastDelta  = 0;\r\n				//this.IsActive   = true;\r\n			 //},\r\n			\r\n			Update : function(iDeltaT)\r\n			 {\r\n				if(this.LastUpdate == undefined) this.LastUpdate = new Date().ValueOf() - 1;\r\n				if(iDeltaT == undefined) iDeltaT = (Date.Now - this.LastUpdate) / 1000 * this.TimeScale;\r\n				\r\n				iDeltaT = Math.Min(iDeltaT, 0.1);\r\n\r\n				this.Time       += iDeltaT;\r\n				this.LastDelta   = iDeltaT;\r\n				this.LastUpdate  = Date.Now;\r\n				\r\n				if(this.IsActive)\r\n				{\r\n					$.gPhysCns && gPhysCns.Clear();\r\n					////$.gSysData && gAP.Clear();\r\n\r\n					for(var _OO = this.Objects.Items, cO,Oi = 0; cO = _OO[Oi]; Oi++)\r\n					{\r\n						if(cO.Update)\r\n						{\r\n							cO.Update(iDeltaT);\r\n						}\r\n					}\r\n				}\r\n			 },\r\n		 },\r\n		'Object'                       : \r\n		 {\r\n			ID        : str(\"--\"),\r\n			Parent    : nil('Object'),\r\n			\r\n			Position  : obj('Vector3'),\r\n			Rotation  : obj('Quaternion'),\r\n			Scale     : obj('Vector3',1,1,1),\r\n\r\n			Children  : obj('Object.Collection', self),\r\n			\r\n			\r\n			//constructor : function(iAA)\r\n			 //{\r\n				//this << iAA.ID        || \"--\";\r\n				//this << iAA.Parent    || null;\r\n\r\n				//this << iAA.Position  || new Vector3    (0,0,0);\r\n				//this << iAA.Rotation  || new Quaternion (0,0,0,1);\r\n				////this << iAA.Rotation  || new Rotation   (0,0,1,0);\r\n				//this << iAA.Scale     || new Vector3    (1,1,1);\r\n\r\n\r\n				//this.Children = new Object.Collection(this);\r\n			 //},\r\n			\r\n			//this.Owner.Rotate(_Vec);\r\n			LocalToGlobal : function(iVec)\r\n			 {\r\n				//return iVec.Rotate(this.Rotation);\r\n				return iVec.Rotate(this.Rotation).Add(this.Position);\r\n			 },\r\n			GlobalToLocal : function(iVec)\r\n			 {\r\n				//return iVec.Rotate(this.Rotation.Inverse());\r\n				return iVec.Add(this.Position.Inverse()).Rotate(this.Rotation.Inverse());\r\n			 },\r\n\r\n			static : \r\n			 {\r\n				'Collection : PrivateCollection' : {},\r\n			 }\r\n		 },\r\n		'DynamicObject : Object'       : \r\n		 {\r\n			Mass      : obj('Mass'),\r\n			Velocity  : obj('Velocity'),\r\n			Forces    : obj('Force.Collection'),\r\n			\r\n			constructor      : function(iAA)\r\n			 {\r\n				this.Mass     = typeof(iAA.Mass) == \"number\" ? new Mass(iAA.Mass) : iAA.Mass || new Mass(1);\r\n				this.Velocity = new Velocity();\r\n				this.Forces   = new Force.Collection(this, iAA.Forces);\r\n			 },\r\n\r\n			OnBeforeUpdate   : undefined,\r\n			OnAfterUpdate    : undefined,\r\n\r\n			Update           : function(iDeltaT$num)\r\n			 {\r\n				gPhysCns.WriteLine([\"Obj.Pos   \", this.Position]);\r\n				gPhysCns.WriteLine([\"Obj.Rot   \", this.Rotation]);\r\n				gPhysCns.WriteLine();\r\n				\r\n				if(this.OnBeforeUpdate) this.OnBeforeUpdate(iDeltaT);\r\n				{\r\n					this.ApplyForces (iDeltaT);\r\n					this.ApplyMotion (iDeltaT);\r\n				}\r\n				if(this.OnAfterUpdate) this.OnAfterUpdate(iDeltaT);\r\n\r\n				gPhysCns.Enabled = true;\r\n				if(this.Data) this.Data.Update();\r\n			 },\r\n			\r\n			ApplyForces      : function(iDeltaT)\r\n			 {\r\n				var _Mass     =  this.Mass;\r\n				var _InvMass  = _Mass.Inverted;\r\n				var _InvInerV = _InvMass.Distribution.MultiplyScalar(_InvMass.Value);\r\n\r\n				var _GloP     =  this.Position;\r\n				var _GloR     =  this.Rotation;\r\n				var _InvGloP  = _GloP.Inverse();\r\n				var _InvGloR  = _GloR.Inverse();\r\n				\r\n\r\n				var _AccR, _TotMom = new Momentum;\r\n				{\r\n					if(iDeltaT) for(var _OwnFF = this.Forces.Items, cForce,Fi = 0; cForce = _OwnFF[Fi]; Fi++)\r\n					{\r\n						var cForceIsWeak  = Abs(cForce.Factor) < 1e-9; if(cForceIsWeak) continue;\r\n						var cNeedsIntegra = cForce.ProduceMomentum.length == 0; //~~ Specified iDeltaT argument denotes 'custom (or no) integration' intension (e.g: rigid body impact);\r\n\r\n						if(gPhysCns.Enabled = !/^\\s*~/.test(cForce.ID))\r\n						{\r\n							gPhysCns.WriteLine(\"+ \" + cForce.ID + \" ----------------------\");\r\n						}\r\n\r\n						var cMom = cForce.ProduceMomentum(iDeltaT); if(!cMom) continue;\r\n						{\r\n							var _MomLocP = (cMom.Position ? this.GlobalToLocal(cMom.Position) : cForce.Position).Subtract(_Mass.Center);\r\n							var _MomLocR = (cMom.Rotation ? _InvGloR.Multiply(cMom.Rotation)  : cForce.Rotation);\r\n\r\n							var _PriLinV = cMom.Linear, _PriLinL = _PriLinV.Length, _SecAngV = undefined, _SecAngL; if(_PriLinL != 0)\r\n							{\r\n								_PriLinV.Rotate(_MomLocR, self);\r\n\r\n								if(_MomLocP.Length != 0)\r\n								{\r\n									_SecAngV = Vector3.Cross(_MomLocP, _PriLinV);\r\n									_SecAngL = _SecAngV.Length;\r\n								}\r\n							}\r\n\r\n							var _PriAngV = cMom.Angular, _PriAngL = _PriAngV.Length, _SecLinV = undefined, _SecLinL; if(_PriAngL != 0)\r\n							{\r\n								_PriAngV.Rotate(_MomLocR, self);\r\n							}\r\n							\r\n							if(_SecLinV) _PriLinV.Add(_SecLinV, self);\r\n							if(_SecAngV) _PriAngV.Add(_SecAngV, self);\r\n							\r\n							cMom.Linear  = _PriLinV.Rotate(_GloR);\r\n							cMom.Angular = _PriAngV;\r\n\r\n							if(cNeedsIntegra)      cMom.MultiplyScalar(iDeltaT, self);\r\n							if(cForce.Factor != 1) cMom.MultiplyScalar(cForce.Factor, self);\r\n						}\r\n\r\n						if(isNaN(cMom.Linear.Length) || isNaN(cMom.Angular.Length)) debugger;\r\n						_TotMom.Add(cMom);\r\n					}\r\n					_AccR = _TotMom.Accelerate(this);\r\n				}\r\n\r\n				if((iDeltaT || 0) == 0) iDeltaT = 1e-12;\r\n				\r\n				this.Velocity.Acceleration.Jerk .Set(_AccR.Subtract(this.Velocity.Acceleration.MultiplyScalar(iDeltaT)));\r\n				this.Velocity.Acceleration      .Set(_AccR.MultiplyScalar(1 / iDeltaT));\r\n				this.Velocity                   .Set(this.Velocity.Add(_AccR));\r\n			 },\r\n			ApplyMotion      : function(iDeltaT)\r\n			 {\r\n				var _Transform = this.PredictTransform(iDeltaT);\r\n\r\n				this.Position = _Transform.Position;\r\n				this.Rotation = _Transform.Rotation;\r\n			 },\r\n\r\n			PredictTransform : function(iDeltaT, iNestO$obj, oData$obj)\r\n			 {\r\n				var _OwnerP = this.Position.Add(this.Velocity.Linear.MultiplyScalar(iDeltaT));\r\n				var _OwnerR = Quaternion.FromRotationVector(this.Velocity.Angular.MultiplyScalar(iDeltaT)).Multiply(this.Rotation);//, self);\r\n				\r\n				oData =\r\n				(\r\n					iNestO == undefined ? {Position : _OwnerP, Rotation : _OwnerR}\r\n					:\r\n					{\r\n						Position : _OwnerP.Add      (iNestO.Position.Rotate(_OwnerR)),\r\n						Rotation : _OwnerR.Multiply (iNestO.Rotation)\r\n					}\r\n				);\r\n				return oData;\r\n			 },\r\n		 },\r\n		\r\n		'Mass'                         : \r\n		 {\r\n			Value        : num(1),\r\n			Center       : obj('Vector3',0,0,0),\r\n\r\n			Distribution : obj('Vector3',1,1,1),\r\n			Inverted     : obj('Mass.Inverted'),\r\n\r\n			constructor  : function(iValue, iExtents, iCenter)\r\n			 {\r\n				this.Update(iValue, iExtents, iCenter);\r\n			 },\r\n\r\n			Update : function(iValue, iExtents, iCenter)\r\n			 {\r\n				this << iValue  || 1;\r\n				this << iCenter || new Vector3;\r\n				\r\n				this.Distribution = Mass.GetMassDistribution(iExtents || new Vector3(1,1,1)).MultiplyScalar(this.Value);\r\n				this.Inverted     = new Mass.Inverted(1 / this.Value,  new Vector3(1 / this.Distribution.X, 1 / this.Distribution.Y, 1 / this.Distribution.Z));\r\n			 },\r\n\r\n			 static : \r\n			 {\r\n				'Inverted' : \r\n				 {\r\n					Value        : num(1),\r\n					Distribution : obj('Vector3'),\r\n\r\n					constructor : function(iValue, iDistribution)\r\n					{\r\n						this << iValue        || 1;\r\n						this << iDistribution || new Vector3;\r\n					}\r\n				 },\r\n				GetMassDistribution : function(iExtents)\r\n				 {\r\n					//~~ I.x = m/12 * (y*y + z*z);\r\n\r\n					return new Vector3\r\n					(\r\n						1 / 12 * ((iExtents.Y * iExtents.Y) + (iExtents.Z * iExtents.Z)),\r\n						1 / 12 * ((iExtents.X * iExtents.X) + (iExtents.Z * iExtents.Z)),\r\n						1 / 12 * ((iExtents.Y * iExtents.Y) + (iExtents.X * iExtents.X))\r\n					);\r\n				 }\r\n			 }\r\n		 },\r\n		'Force'                        : \r\n		 {\r\n			ID         : str(\"--\"),\r\n			Factor     : num(1),\r\n			Position   : obj('Vector3'),\r\n			Rotation   : obj('Quaternion'),\r\n			Owner      : nil('DynamicObject'),\r\n\r\n			LocalToOwner    : function(iVec)\r\n			 {\r\n				return this.Rotation ? iVec.Rotate(this.Rotation) : iVec.Clone();\r\n			 },\r\n			OwnerToLocal    : function(iVec)\r\n			 {\r\n				return this.Rotation ? iVec.Rotate(this.Rotation.Inverse()) : iVec.Clone();\r\n			 },\r\n\r\n			ProduceMomentum : function(iDeltaT, oMom)\r\n			 {\r\n				return undefined;\r\n			 },\r\n\r\n			static : \r\n			 {\r\n				'Collection : PrivateCollection' : {},\r\n			 }\r\n		 },\r\n		'Momentum'                     : \r\n		 {\r\n			Position : obj('Vector3'),\r\n			Rotation : obj('Quaternion'),\r\n			Linear   : obj('Vector3'),\r\n			Angular  : obj('Vector3'),\r\n\r\n			constructor    : function(i1,i2,i3, i4,i5,i6, i7,i8,i9, i10,i11,i12,i13)\r\n			 {\r\n				var iLinV, iAngV, iPosV, iRotQ;\r\n				{\r\n					switch(arguments.length)\r\n					{\r\n						case 12 : iPosV = new Vector3(i7,i8,i9); iRotQ = new Quaternion(i10,i11,i12,i13);\r\n						case  6 : iLinV = new Vector3(i1,i2,i3); iAngV = new Vector3(i4,i5,i6);\r\n						          break;\r\n\r\n						case  4 : iRotQ = i4;\r\n						case  3 : iPosV = i3;\r\n						case  2 : iAngV = i2;\r\n						case  1 : iLinV = i1;\r\n\r\n						case  0 : break;\r\n						\r\n						default : throw \"Invalid argument count\";\r\n					}\r\n				}\r\n\r\n				this.Position = iPosV || null;\r\n				this.Rotation = iRotQ || null;\r\n				this.Linear   = iLinV ? iLinV.Clone() : new Vector3;\r\n				this.Angular  = iAngV ? iAngV.Clone() : new Vector3;\r\n			 },\r\n			\r\n			Add            : function(iMom)\r\n			 {\r\n				iMom.Linear  && this.Linear .Add(iMom.Linear,  self);\r\n				iMom.Angular && this.Angular.Add(iMom.Angular, self);\r\n			 },\r\n			MultiplyScalar : function(iScalar)\r\n			 {\r\n				this.Linear  && this.Linear .MultiplyScalar(iScalar, self);\r\n				this.Angular && this.Angular.MultiplyScalar(iScalar, self);\r\n\r\n				return this;\r\n			 },\r\n			Accelerate     : function(iObj, oAcc)\r\n			 {\r\n				if(!oAcc) oAcc = new Acceleration;\r\n				{\r\n					oAcc.Linear  = this.Linear .MultiplyScalar(iObj.Mass.Inverted.Value);\r\n					oAcc.Angular = this.Angular.Multiply      (iObj.Mass.Inverted.Distribution).Rotate(iObj.Rotation);\r\n				}\r\n				return oAcc;\r\n			 },\r\n		 },\r\n		\r\n		'RateOfChange'                 : \r\n		 {\r\n			Linear  : obj('Vector3'),\r\n			Angular : obj('Vector3'),\r\n\r\n			Set            : function(i1$Vector3_RateOfChange, i2$Vector3)\r\n			 {\r\n				switch(arguments.length)\r\n				{\r\n					case 2  : this.Linear = i1;        this.Angular = i2;         break;\r\n					case 1  : this.Linear = i1.Linear; this.Angular = i1.Angular; break;\r\n\r\n					default : throw \"WTF\";\r\n				}\r\n			 },\r\n			Clone          : function(oRate)\r\n			 {\r\n				oRate = new RateOfChange;\r\n				{\r\n					oRate.Linear  = this.Linear.Clone();\r\n					oRate.Angular = this.Angular.Clone();\r\n				}\r\n				return oRate;\r\n			 },\r\n\r\n			Add            : function(iRate,   oRate)\r\n			 {\r\n				oRate << this || new RateOfChange;\r\n				{\r\n					oRate.Linear  = this.Linear .Add(iRate.Linear);\r\n					oRate.Angular = this.Angular.Add(iRate.Angular);\r\n				}\r\n				return oRate;\r\n			 },\r\n			Subtract       : function(iRate,   oRate)\r\n			 {\r\n				oRate << this || new RateOfChange;\r\n				{\r\n					oRate.Linear  = this.Linear .Subtract(iRate.Linear);\r\n					oRate.Angular = this.Angular.Subtract(iRate.Angular);\r\n				}\r\n				return oRate;\r\n			 },\r\n			MultiplyScalar : function(iScalar, oRate)\r\n			 {\r\n				oRate << this || new RateOfChange;\r\n				{\r\n					oRate.Linear  = this.Linear .MultiplyScalar(iScalar);\r\n					oRate.Angular = this.Angular.MultiplyScalar(iScalar);\r\n				}\r\n				return oRate;\r\n			 },\r\n			Rotate         : function(iQuat,   oRate)\r\n			 {\r\n				oRate << this || new RateOfChange;\r\n				{\r\n					oRate.Linear  = this.Linear .Rotate(iQuat);\r\n					oRate.Angular = this.Angular.Rotate(iQuat);\r\n				}\r\n				return oRate;\r\n			 },\r\n		 },\r\n		'Velocity      : RateOfChange' : { Acceleration : obj('Acceleration') },\r\n		'Acceleration  : RateOfChange' : { Jerk         : obj('Jerk')         },\r\n		'Jerk          : RateOfChange' : {                                    },\r\n	 }\r\n});\r\n",
	"../UVS/Simulation/Sim.Forces.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'Math',\r\n		'Math.Geometry',\r\n		'UVS.Simulation',\r\n	],\r\n	\r\n	'UVS.Simulation.Forces' : \r\n	 {\r\n		'Gravity : Force' :\r\n		 {\r\n			ProduceMomentum : function()\r\n			{\r\n				return new Momentum\r\n				(\r\n					new Vector3(0,0,-9.8 * this.Owner.Mass.Value),\r\n					null,\r\n					this.Owner.LocalToGlobal(this.Owner.Mass.Center),\r\n					Quaternion.Identity\r\n				);\r\n			},\r\n		 },\r\n		'GlobalTorque : Force' :\r\n		 {\r\n			Axis : obj('Vector3', 0,0,1),\r\n\r\n			ProduceMomentum : function()\r\n			{\r\n				return new Momentum(null, this.Axis.MultiplyScalar(this.Owner.Mass.Value * 1), null, Quaternion.Identity);\r\n			},\r\n		 },\r\n		'LocalTorque : Force' :\r\n		 {\r\n			ProduceMomentum : function()\r\n			{\r\n				return new Momentum(null, new Vector3(0,0,1).MultiplyScalar(this.Owner.Mass.Value * 1));\r\n			},\r\n		 },\r\n		\r\n		'AirDrag : Force' :\r\n		 {\r\n			ProduceMomentum : function()\r\n			{\r\n				//var _Mul = this.Owner.Mass.Value * this.AirDensity * 0.01;\r\n\r\n				//return new Momentum\r\n				//(\r\n					//this.Owner.Velocity.Linear .Inverse().MultiplyScalar(_Mul),\r\n					//this.Owner.Velocity.Angular.Inverse().MultiplyScalar(_Mul),\r\n					//null,\r\n					//Quaternion.Identity\r\n				//);\r\n			},\r\n			get AirDensity()\r\n			{\r\n				return World.Planets.Earth.Atmosphere.GetAirPressureFraction(this.Owner.Position.Z);\r\n			}\r\n		 },\r\n		\r\n		\r\n		'Wind : Force' :\r\n		 {\r\n			ProduceMomentum : function()\r\n			{\r\n				return new Momentum(new Vector3(5,5,0), null, null, Quaternion.Identity);\r\n			},\r\n		 },\r\n	 }\r\n});",
	"../UVS/Simulation/Sim.World.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'Math',\r\n		'Math.Geometry',\r\n		//'UVS.Simulation',\r\n	],\r\n	\r\n	'UVS.Simulation' : \r\n	 {\r\n		'Planets' :\r\n		 {\r\n			'Earth' : \r\n			 {\r\n				'Atmosphere' :\r\n				 {\r\n					PressureAtSeaLevel : 101325,\r\n					DensityAtSeaLevel  : 1.225,\r\n\r\n					GetAirPressure         : function(iAlt)\r\n					 {\r\n						return this.PressureAtSeaLevel * this.GetAirPressureFraction(iAlt);\r\n					 },\r\n					GetAirPressureFraction : function(iAlt)\r\n					 {\r\n						//~~return Pow(1 - Min(iAlt / 100000, 1), 12);\r\n						return Pow(1 - Min(iAlt / 100000, 1), 12);\r\n						\r\n					 },\r\n					\r\n					GetAirDensity            : function(iAlt)\r\n					 {\r\n						return this.DensityAtSeaLevel * this.GetAirDensityFraction(iAlt);\r\n					 },\r\n					GetAirDensityFraction : function(iAlt)\r\n					 {\r\n						return Pow(1 - Min(iAlt / 100000, 1), 10.2);\r\n						//return (Pow(iAlt / 1e5, 12), 1);\r\n					 },\r\n					\r\n					\r\n					GetIAS                 : function(iSpd, iAlt)\r\n					 {\r\n						var _KmHs = iSpd * (60 * 60 / 1000);\r\n						//var _ShaCoef = Pow(2.3, iAlt / 1e4);\r\n						var _ShaCoef = Pow(2.1, iAlt / 1e4);\r\n						return _KmHs * this.GetAirPressureFraction(iAlt) * _ShaCoef;\r\n					 },\r\n\r\n					\r\n					GetIASKnots            : function(iSpd, iAlt)\r\n					 {\r\n						var _Knots = iSpd * (60 * 60 / 1000 / 1.85);\r\n						return this.GetIAS(_Knots, iAlt);\r\n					 },\r\n					GetMachs                 : function(iSpd, iAlt)\r\n					 {\r\n						//var _ShaCoef = Pow(2, iAlt / 1e4); //~~?;\r\n						//var _Mach1 = 310 * (Scale01(iAlt / 20000, ));\r\n						//var _Mach1 = 320 - (Min(iAlt / 10000, 1.1) * 40);\r\n\r\n						//var _Mach1 = 343 - (Min(iAlt / 10000, 1.1) * 30);\r\n						//var _Mach1 = 344 - (Min(iAlt / 10000, 1.1) * 30);\r\n						//var _Mach1 = 340 - (Magic(iAlt, 20000, 0) * 40);\r\n						var _Mach1 = 340 - (Pow(Max(iAlt,0) / 20000, 0.2) * 35);\r\n						//Math. * 45\r\n						//debugger;\r\n\r\n						return iSpd / _Mach1;\r\n					 },\r\n\r\n				 }\r\n			 }\r\n		 },\r\n\r\n		'Vehicle : DynamicObject' :\r\n		 {\r\n			Data : obj('Vehicle.Data', {Source : self}),\r\n\r\n			/**\r\n				iObj.Data.Accelerometer.NZ\r\n			*/\r\n\r\n			static : \r\n			{\r\n				'Data'      : \r\n				 {\r\n					Source        : obj('DynamicObject'),\r\n					Velocity      : obj('Velocity'),\r\n					Attitude      : obj,\r\n					Accelerometer : obj,\r\n					\r\n					constructor   : function(iAA)\r\n					 {\r\n						this.Source   = iAA.Source;\r\n						this.Velocity = new Velocity();\r\n						this.Attitude = new function Attitude()\r\n						{\r\n							this.HdgFix  = iAA.HdgFix || 0;\r\n							this.Heading = 0;\r\n							this.Pitch   = 0;\r\n							this.Bank    = 0;\r\n						};\r\n						this.Accelerometer = new Vector3();\r\n						\r\n						this.Update();\r\n					 },\r\n					Update        : function()\r\n					 {\r\n						var _InvR = this.Source.Rotation.Inverse();\r\n\r\n						var _VehV = this.Velocity                   = this.Source.Velocity.Clone();\r\n						var _VehA = this.Velocity.Acceleration      = this.Source.Velocity.Acceleration.Clone();\r\n						var _VehJ = this.Velocity.Acceleration.Jerk = this.Source.Velocity.Acceleration.Jerk.Clone();\r\n						{\r\n							_VehV.Rotate(_InvR, self); _VehV.Angular.MultiplyScalar(RTD,self);\r\n							_VehA.Rotate(_InvR, self); _VehA.Angular.MultiplyScalar(RTD,self);\r\n							_VehJ.Rotate(_InvR, self); _VehJ.Angular.MultiplyScalar(RTD,self);\r\n						}\r\n\r\n						Attitude : \r\n						{\r\n							var _EulerA = EulerAngles.FromQuaternion(this.Source.Rotation, \"ZXY\");\r\n							//debugger;\r\n\r\n							this.Attitude.Heading = ((360 + this.Attitude.HdgFix - (_EulerA.Z * RTD)) % 360);\r\n							this.Attitude.Pitch   = _EulerA.X * RTD;\r\n							this.Attitude.Bank    = _EulerA.Y * RTD;\r\n							\r\n						}\r\n						Accelerometer :\r\n						{\r\n							var _ConG = 9.8, _CurG = _ConG;\r\n							var _GraV = new Vector3(0,0,-_CurG).Rotate(this.Source.Rotation.Inverse());\r\n\r\n							this.Accelerometer = this.Velocity.Acceleration.Linear.Subtract(_GraV).MultiplyScalar(1 / _CurG);\r\n						}\r\n					 }\r\n				 },\r\n				'System'                                   : \r\n				 {\r\n					Vehicle   : obj('Vehicle'),\r\n					Interface : obj('Vehicle.System.Interface'),\r\n\r\n					Update    : function(iDeltaT){throw \"NI\"},\r\n					\r\n					static : \r\n					{\r\n						'Interface' : \r\n						 {\r\n							Input  : obj,\r\n							Output : obj,\r\n						 }\r\n					}\r\n				 },\r\n			}\r\n		 },\r\n		//'Weapon : DynamicObject' : \r\n		 //{\r\n		 \r\n		 //},\r\n		//'Bomb : Weapon' :\r\n		 //{\r\n		 \r\n		 //},\r\n		//'Shaitan : Missile' : \r\n		 //{\r\n		 \r\n		 //},\r\n	 }\r\n});",
	"../UVS/Simulation/World/Aircraft.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'Math',\r\n		'Math.Geometry',\r\n		'UVS.Simulation',\r\n	],\r\n	\r\n	'UVS.Simulation.Vehicles' : \r\n	 {\r\n		'Aircraft : Vehicle'  :\r\n		 {\r\n			Data : obj('Aircraft.Data', {Source : self}),\r\n\r\n			constructor : function(iAA)\r\n			 {\r\n				this.Data       = new Aircraft.Data({Source : this});\r\n\r\n				this.Elevator   = new Aircraft.Airfoil      ({ID : \"Elevator\",  Factor : 1, Lift : 3000, Drag : 100,  Position : new Vector3(   0, -10.7, -1.2)});\r\n				this.AileronL   = new Aircraft.Airfoil      ({ID : \"AileronL\",  Factor : 1, Lift : 3000, Drag : 100,  Position : new Vector3(-7.2,  -7.5, -1.2)});\r\n				this.AileronR   = new Aircraft.Airfoil      ({ID : \"AileronR\",  Factor : 1, Lift : 3000, Drag : 100,  Position : new Vector3(+7.2,  -7.5, -1.2)});\r\n				this.Rudder     = new Aircraft.Airfoil      ({ID : \"Rudder\",    Factor : 1, Lift : 3000, Drag : 500,  Position : new Vector3(-0.1, -13.0, +8.3)});\r\n\r\n				this.MainGearL  = new Aircraft.LandingGear  ({ID : \"MainGearL\", Position : new Vector3(-1,  +1, -1)});\r\n				this.MainGearR  = new Aircraft.LandingGear  ({ID : \"MainGearR\", Position : new Vector3(+1,  +1, -1)});\r\n				this.TailGear   = new Aircraft.LandingGear  ({ID : \"TailGear\",  Position : new Vector3( 0,  -3, -0.5)});\r\n\r\n				this.Engine     = new Aircraft.JetEngine    ({ID : \"Eng1\", Factor : 0,  Position : new Vector3(0,0,0), Rotation : Quaternion.Rotated(0,0,0)});\r\n\r\n				if(1)\r\n				{\r\n					this.Forces.Add(new Forces.Gravity({ID : \"Gravity\"}));\r\n\r\n					this.Forces.Add(this.NoseGear);\r\n					this.Forces.Add(this.MainGearL);\r\n					this.Forces.Add(this.MainGearR);\r\n\r\n					this.Forces.Add(this.Elevator);\r\n					this.Forces.Add(this.AileronL);\r\n					this.Forces.Add(this.AileronR);\r\n					this.Forces.Add(this.Rudder);\r\n\r\n					this.Forces.Add(this.Engine);\r\n				}\r\n			 },\r\n\r\n			static : \r\n			 {\r\n				'Airfoil      : Force' : \r\n				 {\r\n					Lift     : num, //~~;\r\n					Drag     : num, //~~;\r\n					Aspect   : num, //~~ Wing span/chord;\r\n					Camber   : num, //~~;\r\n\r\n					constructor : function(iAA)\r\n					{\r\n						this << iAA.Lift   || 1000;\r\n						this << iAA.Drag   || this.Lift;\r\n						this << iAA.Aspect || 5;\r\n						this << iAA.Camber || 0;\r\n					},\r\n\r\n					ProduceMomentum : function()\r\n					{\r\n						//var _Lift = \r\n						//if(this.Drag == undefined) \r\n					//return;\r\n						var _Alt     = this.Owner.Data.BAlt;\r\n						var _WindV   = this.Owner.Data.Wind;\r\n\r\n						//if(isNaN(_Alt)) debugger;\r\n						//var _WindV   = new Vector3;//	(0,1,0).Rotate(Quaternion.Rotated(0, 0, -this.Owner.Data.Attitude.HdgFix + (36 * DTR))).MultiplyScalar(10);\r\n						var _LinVelV = this.Owner.Velocity.Linear.Subtract(_WindV);\r\n						//_LinVelV.Length\r\n						//.MultiplyScalar(Planets.Earth.Atmosphere.GetIAS(this.Owner.Data.BAlt));\r\n						\r\n						\r\n\r\n						//var _Sfc2AirV = this.Owner.Velocity.Linear.Rotate(this.Owner.Rotation.Inverse().Multiply(this.Rotation.Inverse()));\r\n						var _Veh2AirV  = _LinVelV.Rotate(this.Owner.Rotation.Inverse());\r\n						var _Sfc2AirV  = _Veh2AirV.Rotate(this.Rotation.Inverse());\r\n						//var _Sfc2AirV = this.Owner.Velocity.Linear.Rotate(this.Rotation.Inverse().Multiply(this.Owner.Rotation.Inverse()));\r\n						var _HrzA      = Atan2(_Sfc2AirV.X, _Sfc2AirV.Y);\r\n						var _AoA       = Abs(Atan2(_Sfc2AirV.Z, Sqrt((_Sfc2AirV.X * _Sfc2AirV.X) + (_Sfc2AirV.Y * _Sfc2AirV.Y))));\r\n						\r\n						var _AoALiftF  = Sin(_AoA * 2);\r\n						var _AoADragF  = Sin(_AoA);\r\n						//var _CamberF   = ;\r\n						var _SlideF    = (Abs(Cos(_HrzA)) * this.Aspect) + Abs(Sin(_HrzA)); //~~ Rectangular wing;\r\n						\r\n						var _SpeedF    = Pow(Planets.Earth.Atmosphere.GetIAS(_Sfc2AirV.Length, _Alt) * 0.008, 2);\r\n\r\n						var _CamberF   = 0; //~~ AoA = -5...+10;\r\n						var _AirflowF  = 0; //~~ AoA = 10..20;\r\n						var _GndEffF   = 0; //~~ this.Chord, Alt, pitch moment;\r\n\r\n						//var _AoAF      = \r\n						\r\n\r\n						var _Lift      = this.Lift * (_AoALiftF + _AirflowF + _CamberF + _GndEffF) * _SpeedF * _SlideF * 1.0;\r\n						var _Drag      = this.Drag *  _AoADragF                                    * _SpeedF * _SlideF * 0.5; //~~ slide?;\r\n						\r\n						var _LiftV;\r\n						{\r\n							var _AirPerpV = _Sfc2AirV.Cross(_Sfc2AirV.Set(null,null,0)).Inverse();\r\n\r\n							_LiftV = _Sfc2AirV.Cross(_AirPerpV).Normalize().MultiplyScalar(_Lift);\r\n						}\r\n						var _DragV     = _Sfc2AirV.Inverse().Normalize().MultiplyScalar(_Drag);\r\n\r\n						var _LinForceV = Vector3.Add(_LiftV, _DragV);\r\n						var _AngForceV = new Vector3;\r\n						\r\n						\r\n						gPhysCns.WriteLine();\r\n						gPhysCns.WriteLine([\"- LinV.Len \",  _LinVelV.Length]);\r\n						gPhysCns.WriteLine([\"- Sfc2AirV \",  _Sfc2AirV]);\r\n						gPhysCns.WriteLine([\"- SpeedF   \",  _SpeedF]);\r\n						gPhysCns.WriteLine([\"- SlideF   \",   _SlideF]);\r\n						gPhysCns.WriteLine([\"- AoA      \",  _AoA * RTD]);\r\n						//gPhysCns.WriteLine([\"- AoADragF \",  _AoADragF]);\r\n						//gPhysCns.WriteLine([\"- IsRev    \",   _IsReversed]);\r\n						//gPhysCns.WriteLine([\"- SlipA    \",   RadToDeg(_SlipA)]);\r\n						gPhysCns.WriteLine([\"- Lift     \",  _Lift]);\r\n						gPhysCns.WriteLine([\"- Drag     \",  _Drag]);\r\n						gPhysCns.WriteLine([\"- LiftV    \",  _LiftV]);\r\n						gPhysCns.WriteLine([\"- DragV    \",  _DragV]);\r\n						gPhysCns.WriteLine([\"--LinFrcV  \",  _LinForceV]);\r\n						\r\n						gPhysCns.WriteLine();\r\n\r\n						//gSysData.WriteLine([_ForceV]);\r\n\r\n						return new Momentum(_LinForceV, _AngForceV);//, null, null, Quaternion.Identity);\r\n					},\r\n				 },\r\n				'RocketEngine : Force' :\r\n				 {\r\n					Power : num(1000),\r\n\r\n					ProduceMomentum : function()\r\n					{\r\n						//var _Power = this.Power * Clamp(-Scale01((this.Owner.Data.IAS * 3.6) - 300, 0));\r\n						var _Power = this.Power;\r\n						return new Momentum(new Vector3(0, _Power, 0));\r\n					}\r\n				 },\r\n				'LandingGear  : Force' : \r\n				 {\r\n					Stiffness   : num(1),\r\n					Damping     : num(1),\r\n					Friction    : num(1),\r\n					TurnMass    : num(1), //~~ TODO: vehicle pitch moment due to wheel spinup on touchdown;\r\n					AngSpeed    : num(0),\r\n\r\n					Brake       : num(0),\r\n					\r\n					Compression : {get : function(){return Clamp(0.3 - this.Owner.PredictTransform(0, this).Position.Z, 0, 1)}},\r\n					Rpm         : {get : function(){throw \"NI\"}},\r\n\r\n					ProduceMomentum : function(iDeltaT)\r\n					{\r\n						var _MassV      = this.Owner.Mass.Value;\r\n						\r\n						var _GloT1      = this.Owner.PredictTransform(0,       this);\r\n						var _GloT2      = this.Owner.PredictTransform(iDeltaT, this);\r\n\r\n						var _CompF      = this.Compression;\r\n\r\n						var _VrtF;\r\n						{\r\n							var _Z1         = _GloT1.Position.Z;\r\n							var _Z2         = _GloT2.Position.Z; if(_Z2 > 0) return;\r\n							var _ZVel       = _Z2 - _Z1;\r\n							var _Resistance = this.Stiffness * Max(0,-_Z1);// * iDeltaT;// * iDeltaT;//Magic(1 + Clamp(1 - _ToGndDist, 0, 1), 30) * iDeltaT;\r\n							var _Damping    = this.Damping   * _ZVel;\r\n\r\n							_VrtF           = new Vector3(0,0, (_Resistance - _Damping) * _MassV * 50 * iDeltaT);\r\n\r\n							gPhysCns.WriteLine(\"----------------------------------\");\r\n							gPhysCns.WriteLine([\"_Z1\", _Z1]);\r\n							gPhysCns.WriteLine([\"_CompF\", _CompF]);\r\n\r\n						}\r\n						var _HrzF;\r\n						{\r\n							var _LinVel   = _GloT2.Position.Subtract(_GloT1.Position);\r\n							var _Whl2GndV = _LinVel.Rotate(_GloT1.Rotation.Inverse());\r\n							//var _Whl2GndV = ;\r\n\r\n							var _SideF  = new Vector3(-Clamp(_Whl2GndV.X * this.Friction * _CompF * 100), 0, 0).Rotate(_GloT1.Rotation).MultiplyScalar(_MassV);\r\n							var _BrakeF = Vector3.Clamp(this.Owner.Velocity.Linear).MultiplyScalar(-_MassV * this.Brake);\r\n							\r\n							\r\n							_HrzF = 0 ? new Vector3 : Vector3.Add(_SideF, _BrakeF).MultiplyScalar(iDeltaT, self);\r\n						}\r\n						return new Momentum(Vector3.Add(_VrtF, _HrzF), null, null, Quaternion.Identity);\r\n					}\r\n				 },\r\n				\r\n\r\n				'Data : Vehicle.Data'  : \r\n				 {\r\n					//constructor : function custom(iObj)\r\n					 //{\r\n						//this.overriden(iObj);\r\n\r\n						//this.Update();\r\n					 //},\r\n					//constructor : function()\r\n					 //{\r\n						//this.Update();\r\n					 //},\r\n					Update : function()\r\n					 {\r\n						this.overriden.Update();\r\n\r\n						var _Veh  = this.Source;\r\n						var _VehP = _Veh.Position;\r\n						var _VehR = _Veh.Rotation;\r\n						var _VehV = _Veh.Velocity.Linear;\r\n\r\n						\r\n\r\n\r\n						var _ActV = this;\r\n						///var _HisV = 1 ? UVS.Data.GetNearestEntry(_VehP.Z).Value : this;\r\n						var _HisV = 1 ? UVS.Data.GetNearestEntry(_VehP.Z > 5000 ? _VehP.Set(0,0,null) : _VehP.Set(0,null,0)).Value : this;\r\n						\r\n\r\n						//debugger;\r\n\r\n						this.KinDynRatio = 0;/// (this.Source.Control ? this.Source.Control.Inputs.Balance : 0) * Clamp01(Scale01(_VehP.Z, 500, 1000));\r\n\r\n						\r\n						this.BAlt = _VehP.Z - 4.5; //~~Mix(_VehP.Z - 4.5, _HisV.Position.Z, this.KinDynRatio);\r\n						\r\n						this.RAlt = this.BAlt;\r\n						this.VSpd = Mix(_VehV.Z, _HisV.VSpd, this.KinDynRatio);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n						//this.Wind = new Vector3(0,1,0).Rotate(Quaternion.Rotated(0, 0, +this.Attitude.HdgFix)).MultiplyScalar(10 + (Scale01(this.BAlt, 0, 20000) *  20));\r\n						//~~this.Wind = new Vector3(0,1,0).Rotate(Quaternion.Rotated(0, 0, this.Attitude.HdgFix - (36 * DTR))).MultiplyScalar();\r\n						//this.Wind = new Vector3(0,1,0).Rotate(Quaternion.Rotated(0, 0, this.Attitude.HdgFix - (36 * DTR))).MultiplyScalar(-50);\r\n						//this.Wind = new Vector3(0,1,0).Rotate(Quaternion.Rotated(0, 0, this.Attitude.HdgFix - (36 * DTR))).MultiplyScalar(10 + (Clamp(Scale01(this.BAlt, 16000, 14000), 0,1) * 40));\r\n						//this.Wind = new Vector3(0,1,0).Rotate(Quaternion.Rotated(0, 0, this.Attitude.HdgFix - (36 * DTR))).MultiplyScalar(0 + (Clamp(Scale01(this.BAlt, 20000, 5000), 0,1) * 20));\r\n						this.Wind;\r\n						{\r\n							var _WindDir =  new Vector3(0,1,0).Rotate(Quaternion.Rotated(0, 0, +36 * DTR, \"ZXY\"));\r\n							//var _WindSpd = 5 + ((1 - Abs(Clamp(Scale(this.BAlt - 8000, 6000)))) * 40); //~~;\r\n							//var _WindSpd = (10 * Scale01(this.BAlt, 20000, 0)) + ((1 - Abs(Clamp(Scale(this.BAlt - 10000, 6000)))) * 40); //~~;\r\n							var _WindSpd = (10 * Scale01(this.BAlt, 20000, 0)) + ((1 - Abs(Clamp(Scale(this.BAlt - 8000, 8000)))) * 50); //~~;\r\n\r\n							\r\n							//~~this.Wind = _WindDir.MultiplyScalar(_WindSpd);\r\n							this.Wind = new Vector3;\r\n\r\n\r\n							if($.gWindV) this.Wind.Add($.gWindV, self);\r\n\r\n\r\n							this.Wind.MultiplyScalar(Clamp01(Scale01(_Veh.Velocity.Linear.Length, 5, 50)), self);\r\n							//this.Wind = new Vector3(Random() - 0.5, Random() - 0.5, Random() - 0.1).MultiplyScalar(10);//_WindDir.MultiplyScalar(_WindSpd);\r\n						}\r\n						\r\n						//this.TAS  = _VehV.\r\n						\r\n\r\n						//var _TasV = ;\r\n						var _InAirV = _VehV.Subtract(this.Wind);\r\n						var _TAS    = _InAirV.Dot(new Vector3(0,1,0).Rotate(_VehR));\r\n						//var _TAS    = _InAirV.Dot(new Vector3(0,1,0).Rotate(_VehR));\r\n\r\n\r\n\r\n						this.IAS  = Mix(Planets.Earth.Atmosphere.GetIAS   (_TAS, this.BAlt) * 1.0, _HisV.IAS, this.KinDynRatio);\r\n						this.MSpd = Mix(Planets.Earth.Atmosphere.GetMachs (_TAS, this.BAlt) * 1.0, _HisV.MSpd, this.KinDynRatio);\r\n						//this.MSpd = Planets.Earth.Atmosphere.GetMachs (_VehV.Length, this.BAlt) * 1.0;\r\n					\r\n\r\n						//this.Vehicle..Planets.Earth.Atmosphere.GetIAS(this.Source.Velocity.Linear.Length, this.Source.Position.Z);\r\n\r\n						//~~var _LinV = _VehV.Rotate(_VehR.Inverse());\r\n						var _LinV = _InAirV.Rotate(_VehR.Inverse());\r\n						this.AoA  = -Atan2(_LinV.Z,_LinV.Y) * RTD;\r\n\r\n\r\n						//this.Heading = 0;\r\n						//this.Bank    = 0;\r\n						//this.Pitch   = 0;\r\n\r\n						//this.Speeds.IAS     = 0;\r\n						//this.Speeds.TAS     = 0;\r\n						//this.Speeds.Machs   = 0;\r\n\r\n						//this.Airspeed = 0;\r\n\r\n						//this.Altitude = 0;\r\n						//this.VSpeed   = 0;\r\n\r\n\r\n						//this.Angles.Heading = 0;\r\n						//this.Angles.Bank    = 0;\r\n						//this.Angles.Pitch   = 0;\r\n\r\n						//this.Speeds.IAS     = 0;\r\n						//this.Speeds.TAS     = 0;\r\n						//this.Speeds.Machs   = 0;\r\n\r\n						////this.Airspeed = 0;\r\n\r\n						//this.Altitude = 0;\r\n						//this.VSpeed   = 0;\r\n\r\n						if(isNaN(this.BAlt) || isNaN(this.MSpd) || isNaN(this.IAS)) debugger;\r\n					 }\r\n				 },\r\n			 }\r\n		 },\r\n		'Aircrafts' : \r\n		 {\r\n			'MG10 : Aircraft' : {},\r\n			'MG11 : Aircraft' : {},\r\n		 },\r\n	 }\r\n});",
	"../UVS/Simulation/World/Buran.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'Math',\r\n		'Math.Geometry',\r\n		'UVS.Simulation',\r\n	],\r\n\r\n	'UVS.Simulation.Vehicles' : \r\n	 {\r\n		'Buran : Vehicle' : \r\n		 {\r\n			Data       : obj('Buran.Data'),\r\n\r\n			Guidance   : obj('Buran.GuidanceSystem'),\r\n			Autopilot  : obj('Buran.AutopilotSystem'),\r\n			Cockpit    : obj('Buran.Cockpit'),\r\n			Control    : obj('Buran.FlightControlSystem'),\r\n			Surfaces   : obj('Buran.AerodynamicControlSystem'),\r\n			Thrusters  : obj('Buran.ReactionControlSystem'),\r\n			\r\n			constructor      : function custom()\r\n			 {\r\n				//debugger;\r\n				//this.overriden({Mass : new Mass(83000, new Vector3(10,30,10), new Vector3(0,0,0))});\r\n				this.overriden({Mass : new Mass(83000, new Vector3(1,3,1).MultiplyScalar(10), new Vector3(0,0,0))});\r\n				//Y =\r\n				//6 12 25\r\n				this.Reset();\r\n				\r\n				//25\r\n\r\n\r\n				///\r\n				//this.Body      = new Vehicles.Aircraft.AirResistantance({ID : \"Eng1\"});\r\n				this.CenterWing = new Vehicles.Aircraft.Airfoil      ({ID : \"CenterWing\", Factor : 1, Lift :  70000,  Drag : 50000, Camber : 0.00, Position : new Vector3( 0.0,  +2.0,  0.0), Rotation : Quaternion.Rotated(0,0,0)});\r\n				//this.WingInL    = new Vehicles.Aircraft.Airfoil      ({ID : \"~WingInL\",   Factor : 0, Lift :      0,  Drag : undefined,  Position : new Vector3(-4.0,  +2.0, -1.2), Rotation : Quaternion.Rotated(0,+0.1,+0.0, \"YZX\")});\r\n				//this.WingInR    = new Vehicles.Aircraft.Airfoil      ({ID : \"~WingInR\",   Factor : 0, Lift :      0,  Drag : undefined,  Position : new Vector3(+4.0,  +2.0, -1.2), Rotation : Quaternion.Rotated(0,-0.1,-0.0, \"YZX\")});\r\n				//this.WingOuL    = new Vehicles.Aircraft.Airfoil      ({ID : \"~WingOuL\",   Factor : 0, Lift :      0,  Drag : undefined,  Position : new Vector3(-8.0,  -4.3, -1.0), Rotation : Quaternion.Rotated(0,+0.1,+0.46, \"YZX\")});\r\n				//this.WingOuR    = new Vehicles.Aircraft.Airfoil      ({ID : \"~WingOuR\",   Factor : 0, Lift :      0,  Drag : undefined,  Position : new Vector3(+8.0,  -4.3, -1.0), Rotation : Quaternion.Rotated(0,-0.1,-0.46, \"YZX\")});\r\n				this.Tail       = new Vehicles.Aircraft.Airfoil      ({ID : \"~Tail\",      Factor : 1, Lift :  30000,  Drag : undefined,  Position : new Vector3( 0.0,   -11, +8.0), Rotation : Quaternion.Rotated(0, D090, 0.7, \"YZX\")});\r\n\r\n				this.RudderL    = new Vehicles.Aircraft.Airfoil      ({ID : \"~RudderL\",   Factor : 1, Lift :  4000,   Drag : undefined,       Position : new Vector3(-0.05, -13.1, +8.3)});\r\n				this.RudderR    = new Vehicles.Aircraft.Airfoil      ({ID : \"~RudderR\",   Factor : 1, Lift :  4000,   Drag : undefined,       Position : new Vector3(+0.05, -13.1, +8.3)});\r\n				//this.ElevonL    = new Vehicles.Aircraft.Airfoil      ({ID : \"~ElevonL\",   Factor : 1, Lift :  20000,  Drag : undefined,  Position : new Vector3(-7.2,  -7.2, -1.2)});\r\n				//this.ElevonR    = new Vehicles.Aircraft.Airfoil      ({ID : \"~ElevonR\",   Factor : 1, Lift :  20000,  Drag : undefined,  Position : new Vector3(+7.2,  -7.2, -1.2)});\r\n\r\n				this.ElevInL    = new Vehicles.Aircraft.Airfoil      ({ID : \"~ElevInL\",   Factor : 1, Lift :  7000,  Drag : undefined,  Position : new Vector3(-5,    -7.14, -1.54)});\r\n				this.ElevOuL    = new Vehicles.Aircraft.Airfoil      ({ID : \"~ElevOuL\",   Factor : 1, Lift :  7000,  Drag : undefined,  Position : new Vector3(-9.55, -7.05, -1.35)});\r\n				this.ElevInR    = new Vehicles.Aircraft.Airfoil      ({ID : \"~ElevInR\",   Factor : 1, Lift :  7000,  Drag : undefined,  Position : new Vector3(+5,    -7.14, -1.54)});\r\n				this.ElevOuR    = new Vehicles.Aircraft.Airfoil      ({ID : \"~ElevOuR\",   Factor : 1, Lift :  7000,  Drag : undefined,  Position : new Vector3(+9.55, -7.05, -1.35)});\r\n\r\n				//~~this.ElevInL    = new Vehicles.Aircraft.Airfoil      ({ID : \"~ElevInL\",   Factor : 1, Lift :  10000,  Drag : undefined,  Position : new Vector3(-5,    -7.1, -1.3)});\r\n				//this.ElevOuL    = new Vehicles.Aircraft.Airfoil      ({ID : \"~ElevOuL\",   Factor : 1, Lift :  10000,  Drag : undefined,  Position : new Vector3(-9.55, -7.0, -1.11)});\r\n				//this.ElevInR    = new Vehicles.Aircraft.Airfoil      ({ID : \"~ElevInR\",   Factor : 1, Lift :  10000,  Drag : undefined,  Position : new Vector3(+5,    -7.1, -1.3)});\r\n				//this.ElevOuR    = new Vehicles.Aircraft.Airfoil      ({ID : \"~ElevOuR\",   Factor : 1, Lift :  10000,  Drag : undefined,  Position : new Vector3(+9.55, -7.0, -1.11)});\r\n\r\n				//this.ElevonL    = new Vehicles.Aircraft.Airfoil      ({ID : \"~ElevonL\",   Factor : 1, Lift :  15000,  Drag : undefined,  Position : new Vector3(-7.2,  -7.2, -1.2)});\r\n				//this.ElevonR    = new Vehicles.Aircraft.Airfoil      ({ID : \"~ElevonR\",   Factor : 1, Lift :  15000,  Drag : undefined,  Position : new Vector3(+7.2,  -7.2, -1.2)});\r\n				this.BodyFlap   = new Vehicles.Aircraft.Airfoil      ({ID : \"~BodyFlap\",  Factor : 1, Lift :  5000,   Drag : 0,  Position : new Vector3(   0, -10.6, -1.15)});\r\n				\r\n				this.CenterGear = new Vehicles.Aircraft.LandingGear  ({ID : \"~CenterGear\",             Position : this.Mass.Center});\r\n\r\n				this.NoseGear   = new Vehicles.Aircraft.LandingGear  ({ID : \"~NoseGear\",               Position : new Vector3(   0, +11.2, -3.8)});\r\n				this.MainGearL  = new Vehicles.Aircraft.LandingGear  ({ID : \"~MainGearL\",              Position : new Vector3(-3.5,  -1.7, -4.6)});\r\n				this.MainGearR  = new Vehicles.Aircraft.LandingGear  ({ID : \"~MainGearR\",              Position : new Vector3(+3.5,  -1.7, -4.6)});\r\n\r\n				this.Engine     = new Vehicles.Aircraft.RocketEngine ({ID : \"Eng1\", Factor : 0, Power : 83000 * 9.8 * 1.0,  Position : new Vector3(0,0,0), Rotation : Quaternion.Rotated(0,0,0)});\r\n\r\n				this.LocTorqX   = new Forces.LocalTorque             ({ID : \"LocTorqX\", Factor : 0,    Rotation : Quaternion.Rotated(0,+D090,0)});\r\n				this.LocTorqY   = new Forces.LocalTorque             ({ID : \"LocTorqY\", Factor : 0,    Rotation : Quaternion.Rotated(-D090,0,0)});\r\n				this.LocTorqZ   = new Forces.LocalTorque             ({ID : \"LocTorqZ\", Factor : 0,    Rotation : Quaternion.Rotated(0,0,0)});\r\n\r\n				//this.GloTorqX   = new Forces.GlobalTorque            ({ID : \"GloTorqX\", Factor : 0, Axis : new Vector3(1,0,0)});\r\n				//this.GloTorqY   = new Forces.GlobalTorque            ({ID : \"GloTorqY\", Factor : 0, Axis : new Vector3(0,1,0)});\r\n				//this.GloTorqZ   = new Forces.GlobalTorque            ({ID : \"GloTorqZ\", Factor : 0, Axis : new Vector3(0,0,1)});\r\n\r\n				this.Forces.Add(this.Engine);\r\n				\r\n				\r\n				\r\n				if(1)\r\n				{\r\n					this.Forces.Add(new Forces.Gravity({ID : \"~Gravity\"}));\r\n\r\n					//this.Forces.Add(this.CenterGear);\r\n					this.Forces.Add(this.NoseGear);\r\n					this.Forces.Add(this.MainGearL);\r\n					this.Forces.Add(this.MainGearR);\r\n\r\n					//this.Forces.Add(this.WingInL);\r\n					//this.Forces.Add(this.WingInR);\r\n					//this.Forces.Add(this.WingOuL);\r\n					//this.Forces.Add(this.WingOuR);\r\n\r\n					this.Forces.Add(this.CenterWing);\r\n					this.Forces.Add(this.Tail);\r\n					//this.Forces.Add(this.ElevonL);\r\n					//this.Forces.Add(this.ElevonR);\r\n\r\n					this.Forces.Add(this.ElevInL);\r\n					this.Forces.Add(this.ElevOuL);\r\n					this.Forces.Add(this.ElevInR);\r\n					this.Forces.Add(this.ElevOuR);\r\n\r\n					this.Forces.Add(this.RudderL);\r\n					this.Forces.Add(this.RudderR);\r\n					this.Forces.Add(this.BodyFlap);\r\n				}\r\n				if(1)\r\n				{\r\n					this.Forces.Add(this.LocTorqX);\r\n					this.Forces.Add(this.LocTorqY);\r\n					this.Forces.Add(this.LocTorqZ);\r\n\r\n					//this.Forces.Add(this.GloTorqX);\r\n					//this.Forces.Add(this.GloTorqY);\r\n					//this.Forces.Add(this.GloTorqZ);\r\n				}\r\n			 },\r\n			\r\n			Reset : function()\r\n			 {\r\n				///debugger;\r\n				this.Position  = new Vector3;\r\n				this.Rotation  = new Quaternion;\r\n				this.Velocity  = new Velocity;\r\n\r\n				this.Data      = new Buran.Data                     ({Source : this, HdgFix : 66});	\r\n				this.Guidance  = new Buran.GuidanceSystem           ({Vehicle : this});								this.Guidance  .Reset();\r\n				this.Autopilot = new Buran.AutopilotSystem          ({Vehicle : this});								this.Autopilot .Reset();\r\n				this.Cockpit   = new Buran.Cockpit                  ({Vehicle : this});								this.Cockpit   .Reset();\r\n				this.Control   = new Buran.FlightControlSystem      ({Vehicle : this});								this.Control   .Reset();\r\n				this.Surfaces  = new Buran.AerodynamicControlSystem ({Vehicle : this});								this.Surfaces  .Reset();\r\n				this.Thrusters = new Buran.ReactionControlSystem    ({Vehicle : this});								this.Thrusters .Reset();\r\n\r\n				//this.Data.\r\n				//this.\r\n			 },\r\n\r\n			OnBeforeUpdate   : function(iDeltaT)\r\n			 {\r\n				gSysCns .Clear();\r\n				gAlgoCns.Clear();\r\n				//debugger;\r\n\r\n				this.Guidance .Update(iDeltaT);\r\n				this.Autopilot.Update(iDeltaT);\r\n				this.Cockpit  .Update(iDeltaT);\r\n				this.Control  .Update(iDeltaT);\r\n				this.Surfaces .Update(iDeltaT);\r\n				this.Thrusters.Update(iDeltaT);\r\n\r\n				this.SyncThrusters    ();\r\n				this.SyncSurfaces     ();\r\n				this.SyncLandingGears ();\r\n			 },\r\n			SyncThrusters    : function(iData)\r\n			 {\r\n				\r\n			 },\r\n			SyncSurfaces     : function(iData)\r\n			 {\r\n				var _AA = this.Surfaces.Actuators;\r\n				\r\n				this.ElevonL, this.ElevonR;\r\n				{\r\n					this.ElevInL.Rotation = Quaternion.Rotated(_AA.ElevInL.CurrValue * DTR, +0.04, -0.01, \"YZX\");\r\n					this.ElevOuL.Rotation = Quaternion.Rotated(_AA.ElevOuL.CurrValue * DTR, +0.04, -0.01, \"YZX\");\r\n\r\n					this.ElevInR.Rotation = Quaternion.Rotated(_AA.ElevInR.CurrValue * DTR, -0.04, +0.01, \"YZX\");\r\n					this.ElevOuR.Rotation = Quaternion.Rotated(_AA.ElevOuR.CurrValue * DTR, -0.04, +0.01, \"YZX\");\r\n				}\r\n				this.RudderL, this.RudderR;\r\n				{\r\n					var _RudV = _AA.Rudder  .CurrValue;\r\n					var _BrkV = _AA.SpdBrake.CurrValue / 2;\r\n\r\n					var _PnlL = -Clamp(-_RudV + _BrkV, -23.0, +43.5);\r\n					var _PnlR = -Clamp(-_RudV - _BrkV, -43.5, +23.0);\r\n\r\n					this.RudderL.Rotation = Quaternion.Rotated((_PnlL * DTR) + 0.03, -D090 + 0.010, -0.63, \"YZX\");\r\n					this.RudderR.Rotation = Quaternion.Rotated((_PnlR * DTR) - 0.03, -D090 - 0.010, -0.63, \"YZX\");\r\n\r\n					//this.RudderL.Rotation = Quaternion.Rotated((_PnlL * DTR) + 0.06, -D090 + 0.010, -0.63, \"YZX\");\r\n					//this.RudderR.Rotation = Quaternion.Rotated((_PnlR * DTR) - 0.06, -D090 - 0.010, -0.63, \"YZX\");\r\n				}\r\n				this.BodyFlap.Rotation = Quaternion.Rotated((_AA.BodyFlap.CurrValue * DTR) - 0.13,0,0);\r\n			 },\r\n			SyncLandingGears : function(iData)\r\n			 {\r\n				this.NoseGear.Rotation = Quaternion.Rotated(0, 0, -this.Surfaces.Actuators.Rudder.CurrValue / 23 * 2 * DTR);\r\n			 },\r\n			//UpdateActuators : function()\r\n			 //{\r\n				////var _LElevD = 0;\r\n				////var _RElevD = 0;\r\n				\r\n				////this.Actuators.ElevonL = Clamp(this.Actuators.ElevonL + _LElevD, ;\r\n			 //},\r\n			\r\n			static : \r\n			 {\r\n				'Data                     : Aircraft.Data'    : \r\n				 {\r\n				 },\r\n				\r\n				'Component'                             : \r\n				 {\r\n					Vehicle : obj('Vehicle'),\r\n\r\n					Reset  : function()       {},\r\n					Update : function(iDeltaT){},\r\n				 },\r\n				'GuidanceSystem           : Buran.Component'  : \r\n				 {\r\n					Phase : str,\r\n\r\n					\r\n					GetGuidancePrograms : function(iPhase, oPP)\r\n					 {\r\n						//console.info(\"GetGuidancePrograms: \" + iPhaseId);\r\n						var _PhIdPP = iPhase.ID.split(\":\"), _MajPhN = _PhIdPP[0], _MinPhN = _PhIdPP[1];\r\n\r\n						var _MajPhO = Buran.GuidanceSystem.Programs.Phase[_MajPhN]; if(!_MajPhO) throw \"WTF\";\r\n						var _MinPhO = _MajPhO[_MinPhN];                             if(!_MinPhO) throw \"WTF\";\r\n						\r\n						oPP = {};\r\n						{\r\n							for(var cCmdN in _MinPhO)\r\n							{\r\n								if(!_MinPhO.hasOwnProperty(cCmdN)) continue;\r\n\r\n								\r\n								var cProgF = _MinPhO[cCmdN], cProgN = \"???\";\r\n								{\r\n									if(typeof(cProgF) == \"string\")\r\n									{\r\n										cProgN = cProgF;\r\n										cProgF = Buran.GuidanceSystem.Programs.Generic[cCmdN][cProgF];\r\n										\r\n										if(!cProgF) throw \"Generic program not found: '\" + cCmdN + \"/\" + cProgN + \"'\";\r\n									}\r\n\r\n									\r\n								}\r\n								oPP[cCmdN] = new Buran.AutopilotSystem.Program\r\n								({\r\n									Name      : cProgF.name || cProgN,\r\n									Command   : cCmdN,\r\n									Function  : cProgF,\r\n								});\r\n							}\r\n						}\r\n						return oPP;\r\n					 },\r\n					\r\n					Reset               : function(){this.Phase = {ID : \"MANUAL:MANUAL\"}},\r\n					Update              : function(iDeltaT)\r\n					 {\r\n						var _NewPhase = this.GetGuidancePhase();//, _TgtPhaseId = _TgtPhase[0], _TgtTransP = _TgtPhase[1];\r\n						\r\n						if(_NewPhase.ID != this.Phase.ID)\r\n						{\r\n							this.Phase = _NewPhase;\r\n\r\n							var _NewPP = this.GetGuidancePrograms(this.Phase);\r\n							this.Vehicle.Autopilot.SupplyPrograms(_NewPP, _NewPhase.TransRate);\r\n						}\r\n\r\n						gSysCns.WriteHeader(\"GUIDANCE\");\r\n						gSysCns.WriteLine([\"Phase\",    this.Phase.ID]);\r\n						gSysCns.WriteLine();\r\n\r\n						gSysCns.WriteLine([\"Heading\",  this.Vehicle.Data.Attitude.Heading]);\r\n						gSysCns.WriteLine([\"Distance\", this.Vehicle.Position.Set(null,null,0).Length]);\r\n						//gSysCns.WriteLine([\"Distance\", this.Vehicle.V.Set(null,null,0);\r\n						gSysCns.WriteLine([\"Machs\",    this.Vehicle.Data.MSpd]);\r\n						\r\n						gSysCns.WriteLine([\"Altitude\", this.Vehicle.Data.BAlt]);\r\n						gSysCns.WriteLine([\"VSpeed\",   this.Vehicle.Data.VSpd]);\r\n\r\n					 },\r\n				 },\r\n				'AutopilotSystem          : Buran.Component'  : \r\n				 {\r\n					Programs       : arr,\r\n					//TransRate      : num(+1),\r\n					//Weight         : num(0),\r\n\r\n					Reset           : function(){this.Weight = 0; this.Programs.Clear();},\r\n					Connect         : function(iProg, iTransR)\r\n					 {\r\n						iProg.TransRate = +Abs(iTransR);\r\n\r\n						this.Programs.Add(iProg);\r\n					 },\r\n					\r\n					//Toggle          : function(iDoEnable)\r\n					 //{\r\n						//if(iDoEnable == undefined) iDoEnable = this.TransRate < 0;\r\n\r\n						//this.TransRate = Abs(this.TransRate) * (iDoEnable ? +1 : -1);\r\n\r\n						////this.IsEnabled = iDoEnable;\r\n					 //},\r\n					SupplyPrograms  : function(iPP$obj, iTransR)\r\n					 {\r\n						//if(!this.IsEnabled) return;\r\n\r\n						for(var cP,Pi = 0; cP = this.Programs[Pi]; Pi++)\r\n						{\r\n							cP.TransRate      = -iTransR;\r\n							//cP.TransDirection = -1;\r\n						}\r\n\r\n						for(var cCmdN in iPP)\r\n						{\r\n							if(!iPP.hasOwnProperty(cCmdN)) continue;\r\n						\r\n							var cDoConn = true; for(var cP,Pi = 0; cP = this.Programs[Pi]; Pi++)\r\n							{\r\n								if(cP.Command == cCmdN)\r\n								{\r\n									cP.TransRate = iTransR;\r\n\r\n									if(cP.Name == iPP[cCmdN].Name)\r\n									{\r\n										cP.TransRate = +Abs(cP.TransRate);\r\n										cDoConn = false;\r\n									}\r\n									else cP.TransRate = -Abs(cP.TransRate);\r\n								}\r\n							}\r\n\r\n							if(cDoConn) this.Connect(iPP[cCmdN], iTransR);\r\n						}\r\n					 },\r\n\r\n					Update          : function(iDeltaT)\r\n					 {\r\n						gSysCns.WriteLine();\r\n						gSysCns.WriteHeader(\"AUTOPILOT\");\r\n						//gSysCns.WriteLine([\"Weight\", {Type : \"ProgressBar\", CurrValue : this.Weight, Text : this.CurrValue, CommValue : this.TransRate >= 0 ? +1 : 0, Min : 0}]);\r\n						//gSysCns.WriteLine([\"Programs\", this.Programs.Length.ToString()]);\r\n						gSysCns.WriteLine([\"Programs\", this.Programs.Length.ToString()]);\r\n						gSysCns.WriteLine(\"{\");\r\n						{\r\n							var _Veh  = this.Vehicle;\r\n							var _VehC = this.Vehicle.Control;\r\n							\r\n							//this.Weight = Clamp(this.Weight + (this.TransRate * iDeltaT), 0,1);\r\n\r\n							for(var cP,Pi = 0, cDoSkipR = false; cP = this.Programs[Pi]; Pi++)\r\n							{\r\n								//gSysCns.WriteLine([\"+ \" + cP.Command, {Type : \"ProgressBar\", Text : cP.Name, CurrValue : cP.Weight, CommValue : cP.TransRate >= 0 ? +1 : 0, Min : 0}]);\r\n								gSysCns.WriteLine([\"+ \" + cP.Command, {Type : \"Bar01\", Text : cP.Name, Values : [cP.Weight, cP.TransRate >= 0 ? 1 : 0]}]);\r\n\r\n								Transition: \r\n								{\r\n									cP.Weight += (cP.TransRate * iDeltaT);\r\n\r\n									if(cP.Weight >= 1)\r\n									{\r\n										cP.Weight = 1;\r\n										//cP.TransDirection = 0;\r\n									}\r\n									if(cP.Weight <= 0)\r\n									{\r\n										if(1 || !cDoSkipR)\r\n										{\r\n											this.Programs.RemoveAt(Pi);\r\n											cDoSkipR = true;\r\n										}\r\n										continue;\r\n									}\r\n								}\r\n\r\n								//gSysCns.WriteLine([cP.Command, cP.Weight.ToString2(2) + \" - \" + cP.Name]);\r\n								\r\n							}\r\n							for(var Si = 0; Si < 12 - this.Programs.Length; Si++) gSysCns.WriteLine(\"  -\");\r\n						}\r\n						gSysCns.WriteLine(\"}\");\r\n\r\n						var _SensedD =\r\n						{\r\n							NorAcc : this.Vehicle.Data.Accelerometer.Z,\r\n							RolAng : this.Vehicle.Data.Attitude.Bank,\r\n							BodFla : this.Vehicle.Surfaces.Actuators.BodyFlap.CurrValue,\r\n							SpdBra : this.Vehicle.Surfaces.Actuators.SpdBrake.CurrValue,\r\n\r\n							AoA    : this.Vehicle.Data.AoA,\r\n\r\n							PitRate :  this.Vehicle.Data.Velocity.Angular.Y,\r\n							YawRate : -this.Vehicle.Data.Velocity.Angular.Z,\r\n						};\r\n						//debugger;\r\n						var _AngRR = new Vector3, _BoF = _SensedD.BodFla, _SpB = 0;\r\n						var _WhBN = 1, _WhBL = 1, _WhBR = 1, _FiEng = 0;\r\n						{\r\n							for(var cProg,Pi = 0; cProg = this.Programs[Pi]; Pi++)\r\n							{\r\n								var cW = cProg.Weight;// * this.Weight;\r\n\r\n								var cCmdD;\r\n								{\r\n									gAlgoCns.WriteLine(\"> \" + cProg.Command + \":\" + cProg.Name);\r\n\r\n									var cValue = cProg.Execute(this.Vehicle); switch(cProg.Command)\r\n									{\r\n										case \"NZCM\"    : _AngRR.X += (Clamp(cValue, -1, +3) - _SensedD.NorAcc)   * cW *  10; break;\r\n										case \"ALPHACM\" : _AngRR.X += (cValue                - _SensedD.AoA)      * cW *  1; break;\r\n										case \"QC\"      : _AngRR.X += (cValue                - _SensedD.PitRate)  * cW *  1; break;\r\n\r\n										case \"PHICM\"   : _AngRR.Y += (cValue - _SensedD.RolAng)                  * cW *  2; break;\r\n										case \"YALCM\"   : _AngRR.Z -= (cValue - _SensedD.YawRate)                 * cW *  5; break;\r\n\r\n										case \"DSBCM\"   : _SpB     += cValue                                      * cW *  1; break;\r\n										case \"DELBFRC\" : _BoF     += cValue                                      * cW *  1; break;\r\n\r\n										case \"WHBN\"    : _WhBN    -= cValue                                      * cW *  1; break;\r\n										case \"WHBL\"    : _WhBL    -= cValue                                      * cW *  1; break;\r\n										case \"WHBR\"    : _WhBR    -= cValue                                      * cW *  1; break;\r\n\r\n										case \"THRCM\"   : _FiEng   += cValue                                      * cW *  1; break;\r\n									}\r\n								}\r\n							}\r\n						}\r\n						\r\n						this.Vehicle.Control.Inputs.Autopilot = new Buran.FlightControlSystem.CommandPacket\r\n						({\r\n							AngRates    : _AngRR,\r\n							MaxRates    : new Vector3(5,10,5),\r\n\r\n							SpdBrake    : _SpB,\r\n							BodyFlap    : _BoF,\r\n\r\n							Throttle	   : _FiEng,\r\n							WheelBrakes : {Nose : _WhBN, MainL : _WhBL, MainR : _WhBR},\r\n						});\r\n				\r\n					 },\r\n					\r\n					static :\r\n					{\r\n						'Program' :\r\n						 {\r\n							Name           : str,\r\n							Command        : str,\r\n							Weight         : num( 0),\r\n							TransRate      : num(+1),\r\n							Function       : fnc,\r\n\r\n							Execute : function(iVeh, oRes$any){return this.Function.call(iVeh)}\r\n						 },\r\n					}\r\n				 },\r\n				'Cockpit                  : Buran.Component'  : \r\n				 {\r\n					Joystick    : obj('Vector3'),\r\n					AttRates    : obj('Vector3', 10,20,10),\r\n\r\n					SpdBrake    : num,\r\n					BodyFlap    : num,\r\n\r\n					LandingGear : boo,\r\n					WheelBrakes : obj,\r\n\r\n					Throttle    : num,\r\n\r\n					Update : function(iDeltaT)\r\n					 {\r\n						this.SpdBrake = Clamp(this.SpdBrake,   0, 87);\r\n						this.BodyFlap = Clamp(this.BodyFlap,   0, 30);\r\n\r\n						var _CmdPacket = new Buran.FlightControlSystem.CommandPacket();\r\n						{\r\n							_CmdPacket.AngRates    = this.Joystick.Multiply(this.AttRates);\r\n							_CmdPacket.MaxRates    = this.AttRates;\r\n							_CmdPacket.SpdBrake    = this.SpdBrake;\r\n							_CmdPacket.BodyFlap    = this.BodyFlap;\r\n							_CmdPacket.LandingGear = this.LandingGear;\r\n\r\n							_CmdPacket.WheelBrakes = {Nose : 0, MainL : 0, MainR : 0};\r\n\r\n							_CmdPacket.Throttle    = this.Throttle;\r\n						}\r\n						this.Vehicle.Control.Inputs.Manual = _CmdPacket;\r\n					 },\r\n				 },\r\n				\r\n				'FlightControlSystem      : Buran.Component'  : \r\n				 {\r\n					Inputs      : obj({Autopilot : null, Manual : null, Balance : 0.5, BalRate : +0.5}),\r\n					\r\n					AngRates    : obj('Vector3'),\r\n					SpdBrake    : num(null),\r\n					BodyFlap    : num(null),\r\n					LandingGear : boo(null),\r\n					WheelBrakes : obj({Nose : 0, MainL : 0, MainR : 0}),\r\n					Throttle    : num(null),\r\n\r\n\r\n\r\n					//Autopilot : obj,\r\n					//Manual    : obj,\r\n					//Balance   : num,\r\n\r\n					//XXX       : obj('Buran.FlightControlSystem.CommandPacket'),\r\n\r\n					\r\n\r\n\r\n					//Output : obj('Buran.FlightControlSystem.CommandPacket'),\r\n				\r\n\r\n					\r\n					Reset    : function()\r\n					 {\r\n						//this.AngRates = new Vector3;\r\n						//this.MaxRate\r\n						//this.\r\n					 },\r\n\r\n					MixInputs : function()\r\n					 {\r\n						var _APiI = this.Inputs.Autopilot, _ManI = this.Inputs.Manual;\r\n						var _APiW = this.Inputs.Balance;\r\n\r\n						this.AngRates    = Vector3.Mix(_ManI.AngRates, _APiI.AngRates, _APiW);\r\n						this.MaxRates    = Vector3.Mix(_ManI.MaxRates, _APiI.MaxRates, _APiW);\r\n						this.SpdBrake    =    Math.Mix(_ManI.SpdBrake, _APiI.SpdBrake, _APiW);\r\n						this.BodyFlap    =    Math.Mix(_ManI.BodyFlap, _APiI.BodyFlap, _APiW);\r\n						this.Throttle    =    Math.Mix(_ManI.Throttle, _APiI.Throttle, _APiW);\r\n						this.WheelBrakes =\r\n						{\r\n							Nose  : Mix(_ManI.WheelBrakes.Nose,  _APiI.WheelBrakes.Nose,  _APiW),\r\n							MainL : Mix(_ManI.WheelBrakes.MainL, _APiI.WheelBrakes.MainL, _APiW),\r\n							MainR : Mix(_ManI.WheelBrakes.MainR, _APiI.WheelBrakes.MainR, _APiW)\r\n						}\r\n						\r\n						\r\n\r\n\r\n						//if(isNaN(this.Throttle)) debugger;\r\n					 },\r\n					Limit : function()\r\n					 {\r\n						//this.Inputs.AngRates\r\n\r\n						this.AngRates = Vector3.Clamp(this.AngRates, this.MaxRates);\r\n\r\n						//this.Elevator = Clamp(this.Elevator);\r\n						//this.Ailerons = Clamp(this.Ailerons);\r\n						//this.Rudder   = Clamp(this.Rudder);\r\n\r\n						this.SpdBrake = Clamp(this.SpdBrake,  0, 87);\r\n						this.BodyFlap = Clamp(this.BodyFlap,  0, 30);\r\n					 },\r\n					Stabilize : function(iDeltaT)\r\n					 {\r\n						//debugger;\r\n						var _Data  = this.Vehicle.Data;\r\n						var _AngV  = _Data.Velocity.Angular;\r\n						var _AngA  = _Data.Velocity.Acceleration.Angular;\r\n\r\n						var _AngRR = this.AngRates;\r\n						var _MaxRR = this.MaxRates;\r\n\r\n						var _CmdRR =  Vector3.Clamp(_AngRR, _MaxRR);\r\n						var _AngEE = _AngV.Subtract(_CmdRR);// .Subtract(_AngRR, _MaxRR));//.Subtract(Vector3.Clamp(_MaxRR, ));\r\n						\r\n						gSysCns.WriteLine([\"_AngV\",  _AngV]);\r\n						gSysCns.WriteLine([\"_CmdRR\", _CmdRR]);\r\n						gSysCns.WriteLine([\"_AngEE\", _AngEE]);\r\n\r\n						\r\n\r\n						if(1)\r\n						{\r\n							var _AirSpdF = Clamp(Scale01(this.Vehicle.Data.IAS, 500, 200), 0.1, 0.5);\r\n\r\n							//if(isNaN(_AirSpdF)) debugger;\r\n							this.AngRates = Vector3.Add\r\n							(\r\n								_AngEE.MultiplyScalar(-_AirSpdF),\r\n								//Vector3.Multiply(_AngEE,Vector3.Magnitude(_AngEE)).MultiplyScalar(-0.05),\r\n\r\n								//Vector3.Multiply(_AngA,Vector3.Magnitude(_AngA)).MultiplyScalar(-0.01)\r\n								_AngA .MultiplyScalar(-_AirSpdF)\r\n							);\r\n\r\n							//this.AngRates = Vector3.Add\r\n							//(\r\n								//_AngEE.MultiplyScalar(-0.1 * _AirSpdF),\r\n								////Vector3.Multiply(_AngEE,Vector3.Magnitude(_AngEE)).MultiplyScalar(-0.05),\r\n\r\n								////Vector3.Multiply(_AngA,Vector3.Magnitude(_AngA)).MultiplyScalar(-0.01)\r\n								//_AngA .MultiplyScalar(-0.1 * _AirSpdF)\r\n							//);\r\n						}\r\n					 },\r\n					Update   : function(iDeltaT)\r\n					 {\r\n						//debugger;\r\n						gSysCns.WriteLine();\r\n						gSysCns.WriteHeader(\"CONTROL\");\r\n\r\n						var _BalV = this.Inputs.Balance;\r\n						var _BalR = this.Inputs.BalRate;\r\n						{\r\n							_BalV += _BalR * iDeltaT;\r\n							\r\n							if(_BalV < 0 || _BalV > 1)\r\n							{\r\n								_BalV = Clamp01(_BalV);\r\n\r\n								if(_BalR != 0) _BalR = 0;\r\n							}\r\n							\r\n							this.Inputs.BalRate = _BalR;\r\n							this.Inputs.Balance = _BalV;\r\n						}\r\n						\r\n\r\n						//gSysCns.WriteLine([\"Source\", {Type : \"ProgressBar\", Text : _BalV == +1 ? \"Autopilot\" : _BalV == 0 ? \"Manual\" : \"Auto+Manual\", CurrValue : _BalV, CommValue : Clamp01(_BalR) || _BalV, Min : 0}]);\r\n						gSysCns.WriteLine([\"Source\", {Type : \"Bar01\", Text : _BalV == +1 ? \"Autopilot\" : _BalV == 0 ? \"Manual\" : \"Auto+Manual\", Values : [_BalV, _BalR > 0 ? 1 : _BalR < 0 ? 0 : _BalV]}]);\r\n						\r\n\r\n						this.MixInputs();\r\n\r\n						gSysCns.WriteLine([\"AngRates\", this.AngRates]);\r\n						\r\n						this.Limit();\r\n						this.Stabilize(iDeltaT);\r\n						this.Limit();\r\n						\r\n					\r\n						var _SS = this.Vehicle.Surfaces;\r\n						{\r\n							//_SS.Elevator = Clamp(_SS.Elevator + this.AngRates.X);\r\n							//_SS.Ailerons = Clamp(_SS.Ailerons + this.AngRates.Y);\r\n							//_SS.Rudder   = Clamp(_SS.Rudder   + this.AngRates.Z) * 0.99;\r\n							\r\n							_SS.Elevator -= this.AngRates.X * iDeltaT * 10;\r\n							_SS.Aileron  += this.AngRates.Y * iDeltaT * 10;\r\n							_SS.Rudder   -= this.AngRates.Z * iDeltaT * 10; _SS.Rudder -= Sign(_SS.Rudder) * 10 * iDeltaT;\r\n\r\n							_SS.SpdBrake = this.SpdBrake;\r\n							_SS.BodyFlap = this.BodyFlap;\r\n						}\r\n						\r\n						this.Vehicle.NoseGear .Brake = this.WheelBrakes.Nose;\r\n						this.Vehicle.MainGearL.Brake = this.WheelBrakes.MainL;\r\n						this.Vehicle.MainGearR.Brake = this.WheelBrakes.MainR;\r\n\r\n\r\n						this.Vehicle.Engine.Factor = this.Throttle;\r\n					 },\r\n					\r\n					static : \r\n					{\r\n						'CommandPacket' : \r\n						 {\r\n							AngRates    : obj('Vector3', null, null, null),\r\n							MaxRates    : obj('Vector3', null, null, null),\r\n							\r\n							SpdBrake    : num(null),\r\n							BodyFlap    : num(null),\r\n\r\n							LandingGear : boo(null),\r\n							WheelBrakes : obj({Nose : null, MainL : null, MainR : null}),\r\n\r\n							Throttle    : num(null),\r\n						 },\r\n					}\r\n				 },\r\n				'AerodynamicControlSystem : Buran.Component'  : \r\n				 {\r\n					Elevator   : num,\r\n					Aileron    : num,\r\n					Rudder     : num,\r\n					SpdBrake   : num,\r\n					BodyFlap   : num,\r\n\r\n					Trims      : obj,\r\n					Actuators  : obj,\r\n\r\n					constructor : function annex(iAA)\r\n					 {\r\n						this.Actuators =\r\n						{\r\n							ElevInL  : new Buran.AerodynamicControlSystem.Actuator({MaxRate : 45,  CommRate : 45,  Range : {Min : -35, Max : +20}}),\r\n							ElevOuL  : new Buran.AerodynamicControlSystem.Actuator({MaxRate : 45,  CommRate : 45,  Range : {Min : -35, Max : +20}}),\r\n							ElevInR  : new Buran.AerodynamicControlSystem.Actuator({MaxRate : 45,  CommRate : 45,  Range : {Min : -35, Max : +20}}),\r\n							ElevOuR  : new Buran.AerodynamicControlSystem.Actuator({MaxRate : 45,  CommRate : 45,  Range : {Min : -35, Max : +20}}),\r\n							Rudder   : new Buran.AerodynamicControlSystem.Actuator({MaxRate : 90,  CommRate : 90,  Range : {Min : -23, Max : +23}}),\r\n\r\n							SpdBrake : new Buran.AerodynamicControlSystem.Actuator({MaxRate : 20,  CommRate : 10,  Range : {Min :   0, Max :  87}}),\r\n							BodyFlap : new Buran.AerodynamicControlSystem.Actuator({MaxRate : 10,  CommRate : 10,  Range : {Min :   0, Max :  30}}),\r\n						};\r\n\r\n						//this.Reset();\r\n					 },\r\n					Reset : function()\r\n					 {\r\n						this.Elevator = 0; //~~ -35..+20;\r\n						this.Aileron  = 0; //~~ -10..+10;\r\n						this.Rudder   = 0; //~~ -23..+23;\r\n						this.SpdBrake = 0; //~~   0..+87;\r\n						this.BodyFlap = 0; //~~   0..+30;\r\n\r\n						//35 / 55 * 0.8\r\n						var _ElevMeanV = 0;\r\n					\r\n						//this.Actuators.ElevonL .CurrValue = _ElevMeanV;\r\n						//this.Actuators.ElevonR .CurrValue = 35 / 55 * 0.8;\r\n						this.Actuators.ElevInL .CurrValue = _ElevMeanV;\r\n						this.Actuators.ElevOuL .CurrValue = _ElevMeanV;\r\n\r\n						this.Actuators.ElevInR .CurrValue = _ElevMeanV;\r\n						this.Actuators.ElevOuR .CurrValue = _ElevMeanV;\r\n\r\n						this.Actuators.Rudder  .CurrValue = 0;\r\n						this.Actuators.BodyFlap.CurrValue = 0;\r\n						this.Actuators.SpdBrake.CurrValue = 0;\r\n					 },\r\n					Update : function(iDeltaT)\r\n					 {\r\n						this.Elevator = Clamp(this.Elevator, -35,+20);\r\n						this.Aileron  = Clamp(this.Aileron,  -10,+10);\r\n						this.Rudder   = Clamp(this.Rudder,   -23,+23);\r\n						this.SpdBrake = Clamp(this.SpdBrake,   0,+87);\r\n						this.BodyFlap = Clamp(this.BodyFlap,   0,+30);\r\n						\r\n						var _AA = this.Actuators;\r\n						{\r\n							//debugger;\r\n							var _ElevL = (this.Elevator + this.Aileron);\r\n							var _ElevR = (this.Elevator - this.Aileron);\r\n							\r\n							\r\n							var _ElBrAltF = Clamp01(Scale01(this.Vehicle.Data.RAlt, 10, 20));\r\n							var _ElBrL = Min(this.Rudder / 23 + 0.5, 0) * _ElBrAltF * 30;\r\n							var _ElBrR = Max(this.Rudder / 23 - 0.5, 0) * _ElBrAltF * 30;\r\n\r\n							//var _ElBrL = Max(this.Rudder / 23 - 0.5, 0) * 30;\r\n							//var _ElBrR = Min(this.Rudder / 23 + 0.5, 0) * 30;\r\n							\r\n							var _ElInL = Clamp(_ElevL + _ElBrL, -35,+20),  _ElOuL = Clamp(_ElevL - _ElBrL, -35,+20);\r\n							var _ElInR = Clamp(_ElevR - _ElBrR, -35,+20),  _ElOuR = Clamp(_ElevR + _ElBrR, -35,+20);\r\n							\r\n							//var _ElevL = ((-this.Elevator * 0.8) + (+this.Ailerons * 0.2) + 1) / 2;\r\n							//var _ElevR = ((-this.Elevator * 0.8) + (-this.Ailerons * 0.2) + 1) / 2;\r\n							\r\n							//var _ElBrL = Max(this.Rudder - 0.2, 0);\r\n							//var _ElBrR = Min(this.Rudder + 0.2, 0);\r\n							\r\n							//var _ElInL = Clamp(_ElevL - (_ElBrL * 1.0), 0,1),  _ElOuL = Clamp(_ElevL + (_ElBrL * 0.4), 0,1);\r\n							//var _ElInR = Clamp(_ElevR + (_ElBrR * 1.0), 0,1),  _ElOuR = Clamp(_ElevR - (_ElBrR * 0.4), 0,1);\r\n							\r\n\r\n							//if(Abs(this.Rudder) > 0.5)\r\n							//{\r\n								\r\n							//}\r\n							\r\n							//_AA.ElevonL .CommValue = _ElevL;         _AA.ElevonL .Update(iDeltaT);\r\n							\r\n							_AA.ElevInL.CommValue = _ElInL;          _AA.ElevInL .Update(iDeltaT);\r\n							_AA.ElevOuL.CommValue = _ElOuL;          _AA.ElevOuL .Update(iDeltaT);\r\n							_AA.ElevInR.CommValue = _ElInR;          _AA.ElevInR .Update(iDeltaT);\r\n							_AA.ElevOuR.CommValue = _ElOuR;          _AA.ElevOuR .Update(iDeltaT);\r\n\r\n							_AA.Rudder  .CommValue = this.Rudder;    _AA.Rudder  .Update(iDeltaT);\r\n							_AA.SpdBrake.CommValue = this.SpdBrake;  _AA.SpdBrake.Update(iDeltaT);\r\n							_AA.BodyFlap.CommValue = this.BodyFlap;  _AA.BodyFlap.Update(iDeltaT);\r\n							\r\n							//var _ElevLDeg = _ElevL;\r\n							//gSysCns.WriteLine([\"Pitch\", {Type : \"ProgressBar\", CurrValue : this.Vehicle.Surfaces.Actuators.SpdBrake.CurrValue, CommValue : this.SpdBrake,  W : 100, H : 11}]);\r\n							gSysCns.WriteLine();\r\n							gSysCns.WriteHeader(\"SURFACES\");\r\n							//gSysCns.WriteLine([\"ElevonL\",  {Type : \"ProgressBar\", Text : (_AA.ElevonL.CurrValue  * 55 - 35).ToString2(2), CurrValue : _AA.ElevonL .CurrValue,  CommValue : _AA.ElevonL .CommValue, Min : 0}]);\r\n							//gSysCns.WriteLine([\"ElevonR\",  {Type : \"ProgressBar\", Text : (_AA.ElevonL.CurrValue  * 55 - 35).ToString2(2), CurrValue : _AA.ElevonR .CurrValue,  CommValue : _AA.ElevonR .CommValue, Min : 0}]);\r\n\r\n							gSysCns.WriteLine([\"ElevInL\",  {Type : \"ProgressBar\", Text : _AA.ElevInL .CurrValue.ToString2(2), CurrValue : _AA.ElevInL .CurrValue,  CommValue : _AA.ElevInL .CommValue, Min : -35, Max : +20}]);\r\n							gSysCns.WriteLine([\"ElevOuL\",  {Type : \"ProgressBar\", Text : _AA.ElevOuL .CurrValue.ToString2(2), CurrValue : _AA.ElevOuL .CurrValue,  CommValue : _AA.ElevOuL .CommValue, Min : -35, Max : +20}]);\r\n							gSysCns.WriteLine([\"ElevInR\",  {Type : \"ProgressBar\", Text : _AA.ElevInR .CurrValue.ToString2(2), CurrValue : _AA.ElevInR .CurrValue,  CommValue : _AA.ElevInR .CommValue, Min : -35, Max : +20}]);\r\n							gSysCns.WriteLine([\"ElevOuR\",  {Type : \"ProgressBar\", Text : _AA.ElevOuR .CurrValue.ToString2(2), CurrValue : _AA.ElevOuR .CurrValue,  CommValue : _AA.ElevOuR .CommValue, Min : -35, Max : +20}]);\r\n							gSysCns.WriteLine([\"Rudder\",   {Type : \"ProgressBar\", Text : _AA.Rudder  .CurrValue.ToString2(2), CurrValue : _AA.Rudder  .CurrValue,  CommValue : _AA.Rudder  .CommValue, Min : -23, Max : +23}]);\r\n							gSysCns.WriteLine([\"BodyFlap\", {Type : \"ProgressBar\", Text : _AA.BodyFlap.CurrValue.ToString2(2), CurrValue : _AA.BodyFlap.CurrValue,  CommValue : _AA.BodyFlap.CommValue, Min :   0, Max : +30}]);\r\n							gSysCns.WriteLine([\"SpdBrake\", {Type : \"ProgressBar\", Text : _AA.SpdBrake.CurrValue.ToString2(2), CurrValue : _AA.SpdBrake.CurrValue,  CommValue : _AA.SpdBrake.CommValue, Min :   0, Max : +87}]);\r\n						}\r\n					 },\r\n					static :\r\n					 {\r\n						'Actuator' : \r\n						 {\r\n							Range     : obj ({Min : 0, Max : 10}),\r\n							MaxRate   : num (10),\r\n							DeadZone  : num (10),\r\n							Inertia   : num (0.1),\r\n							Rebound   : num (0.1),\r\n							\r\n							CurrValue : num (0),\r\n							CurrRate  : num (0),\r\n\r\n							CommValue : num (0),\r\n							CommRate  : num (1),\r\n\r\n							IsDebug   : boo (false),\r\n						\r\n							Update : function(iDeltaT)\r\n							 {\r\n								//debugger;\r\n\r\n								var _MinV = this.Range.Min,  _MaxV = this.Range.Max;\r\n								var _CurV = this.CurrValue,  _CmdV = Clamp(this.CommValue, _MinV, _MaxV);\r\n								var _CurR = this.CurrRate,   _CmdR = Clamp(this.CommRate, this.MaxRate);\r\n								{\r\n									var _ValE = Clamp(Scale(_CurV - _CmdV, this.DeadZone));\r\n									//var _RatE = _CurR - (-_ValE * _CmdR);\r\n									//var _RatD = -_RatE;\r\n\r\n									_CurR = Clamp(-_ValE * _CmdR, _CmdR);\r\n									_CurV = Clamp(_CurV + (_CurR * iDeltaT), _MinV, _MaxV);\r\n\r\n									//~~if((_CurR > 0 && _CurV >= _MaxV) || (_CurR < 0 && _CurV <= _MinV)) _CurR = -_CurR * this.Rebound;\r\n\r\n									if((_CurV >= Min(_CmdV,_MaxV) && _CurR > 0) || (_CurV <= Max(_CmdV,_MinV) && _CurR < 0)) _CurR = 0;//-_CurR * this.Rebound;\r\n\r\n									if(this.IsDebug)\r\n									{\r\n										gAlgoCns.WriteLine();\r\n										gAlgoCns.WriteLine([\"VV\", {Type : \"ProgressBar\", CommValue : _CmdV,  CurrValue : _CurV,  Min : 0}]);\r\n										\r\n										gAlgoCns.WriteLine([\"ValE\", _ValE]);\r\n										gAlgoCns.WriteLine([\"RatE\", _RatE]);\r\n										gAlgoCns.WriteLine([\"RatD\", _RatD]);\r\n										gAlgoCns.WriteLine([\"CurR\", _CurR]);\r\n										gAlgoCns.WriteLine([\"CurV\", _CurV]);\r\n										gAlgoCns.WriteLine([\"CmdR\", _CmdR]);\r\n									}\r\n								}\r\n								this.CurrValue = _CurV;\r\n								this.CurrRate  = _CurR;\r\n							 },\r\n							\r\n							\r\n							//Update : function(iDeltaT)\r\n							//{\r\n								//var _MinV = this.Range.Min,  _MaxV = this.Range.Max;\r\n								//var _CurV = this.CurrValue,  _CmdV = Clamp(this.CommValue, _MinV, _MaxV);\r\n								//var _CurR = this.CurrRate,   _CmdR = Clamp(this.CommRate, this.MaxRate);\r\n								//{\r\n									//var _ValE = Clamp(Scale(_CurV - _CmdV, this.DeadZone));\r\n									//var _RatE = _CurR - (-_ValE * _CmdR);\r\n									//var _RatD = -_RatE;\r\n\r\n									//_CurR = Clamp(_CurR + (_RatD * iDeltaT / this.Inertia), _CmdR) * 0.9;\r\n									//_CurV = Clamp(_CurV + (_CurR * iDeltaT), _MinV, _MaxV);\r\n\r\n									//if((_CurR > 0 && _CurV >= _MaxV) || (_CurR < 0 && _CurV <= _MinV)) _CurR = -_CurR * this.Rebound;\r\n\r\n									//if(this.IsDebug)\r\n									//{\r\n										//gAlgoCns.WriteLine();\r\n										//gAlgoCns.WriteLine([\"VV\", {Type : \"ProgressBar\", CommValue : _CmdV,  CurrValue : _CurV,  Min : 0}]);\r\n										\r\n										//gAlgoCns.WriteLine([\"ValE\", _ValE]);\r\n										//gAlgoCns.WriteLine([\"RatE\", _RatE]);\r\n										//gAlgoCns.WriteLine([\"RatD\", _RatD]);\r\n										//gAlgoCns.WriteLine([\"CurR\", _CurR]);\r\n										//gAlgoCns.WriteLine([\"CurV\", _CurV]);\r\n										//gAlgoCns.WriteLine([\"CmdR\", _CmdR]);\r\n									//}\r\n								//}\r\n								//this.CurrValue = _CurV;\r\n								//this.CurrRate  = _CurR;\r\n							//},\r\n							\r\n						 },\r\n					 }\r\n				 },\r\n				'ReactionControlSystem    : Buran.Component'  : \r\n				 {\r\n					//~~ TODO;\r\n\r\n					static : \r\n					{\r\n						'Thruster' : \r\n						 {\r\n							\r\n						 }\r\n					}\r\n				 },\r\n			 }\r\n		 },\r\n	}\r\n});",
	"../UVS/Simulation/World/Buran.GuidanceSystem.chs" : "\"use strict\";\r\n\r\nstuff\r\n ({\r\n	uses :\r\n	[\r\n		'Math',\r\n		'Math.Geometry',\r\n	],\r\n\r\n	'UVS.Simulation.Vehicles.Buran.GuidanceSystem' :\r\n	{\r\n		GetGuidancePhase    : function(oPhaseI$obj)\r\n		 {\r\n			var _Veh  = this.Vehicle,\r\n				 _Pos  = _Veh.Position,\r\n				 _Alt  = _Veh.Data.BAlt,\r\n				 _Dist = _Pos.Set(null,null,0).Length,\r\n				 _Vel  = _Veh.Velocity.Linear;\r\n			\r\n\r\n			var _MajPh = \"ERROR\", _MinPh = \"ERROR\", _TransD = 5;\r\n			{\r\n				//if(_Alt >= 19900)\r\n				if(_Alt >= 20000)\r\n				{\r\n					if(1)\r\n					{\r\n						_MajPh  = \"TEST\";\r\n						_MinPh  = \"T1\";\r\n						_TransD = 1;\r\n					}\r\n					else\r\n					{\r\n						_MajPh  = \"ENTRY\";\r\n						_TransD = 0.1;\r\n\r\n\r\n						_MinPh  = \"ET5\";\r\n					}\r\n					//if(_Dist < 200e3) _MinPh = \"ET5\";\r\n				}\r\n				else if(_Alt > 1000)\r\n				{\r\n					_MajPh  = \"TEST\";\r\n					_MinPh  = \"T1\";\r\n					_TransD = 1;\r\n				}\r\n				else if(_Alt >= 5100  && _Dist < 100000)\r\n				{\r\n					_MajPh  = \"TAEM\"; //~~ CAPTURE, HAC;\r\n					\r\n\r\n					if(_Veh.Data.MSpd > 0.9)\r\n					{\r\n						_MinPh = \"CAPTURE\";\r\n						_TransD = 30;\r\n					}\r\n					else\r\n					{\r\n						_MinPh = \"HAC\";\r\n						_TransD = 30;\r\n						//_TransD = 90;\r\n					}\r\n				}\r\n				else if(_Alt < 5100)\r\n				{\r\n					_MajPh = \"A&L\";\r\n\r\n					//if(Abs(_Pos.Y) < 20000 && Abs(_Pos.X) < 3000)\r\n					//{\r\n						\r\n					//}\r\n					\r\n					if(Abs(_Pos.X) < 2000)\r\n					{\r\n						if(Abs(_Pos.Y) > 14500)\r\n						{\r\n							_MinPh = \"CAPTURE\";\r\n							_TransD = 1;\r\n						}\r\n						else\r\n						{\r\n							if     (_Alt > 500){_MinPh = \"STEEP\";}\r\n							else if(_Alt >  30){_MinPh = \"FLARE\"; _TransD = 5;}\r\n							else if(_Alt > 1.5){_MinPh = \"FINALFLARE\"; _TransD = 1;}\r\n							else if(_Veh.MainGearL.Compression < 0.3 && _Veh.MainGearR.Compression < 0.3)\r\n							{\r\n								_MinPh  = \"HOVER\";\r\n								_TransD = 0.1;\r\n							}\r\n							else\r\n							{\r\n								_MajPh = \"GROUND\";\r\n								_TransD = 1;\r\n								\r\n								if(_Veh.NoseGear.Compression < 0.3) _MinPh  = \"TOUCHDOWN\";\r\n								else\r\n								{\r\n									if(_Pos.Y * _Vel.Y < 0)\r\n									{\r\n										_MinPh = \"LANDINGRUN\";\r\n									}\r\n									else\r\n									{\r\n										if(_Vel.Length > 1) _MinPh = \"STOP\";\r\n										else\r\n										{\r\n											//var _SS = _Veh.Surfaces;\r\n											_MinPh  = _Veh.Surfaces.Elevator < +19 || Abs(_Veh.Surfaces.Aileron) > 1 || Abs(_Veh.Surfaces.Rudder) > 1 ? \"SERVICE\" : \"SHUTDOWN\";\r\n										}\r\n									}\r\n								}\r\n							}\r\n						}\r\n					}\r\n					else\r\n					{\r\n						_MinPh = \"ERROR\";\r\n					}\r\n				}\r\n				else\r\n				{\r\n					_MajPh  = \"ENTRY\";\r\n					_MinPh  = \"ET5\";\r\n					_TransD = 0.1;\r\n				}\r\n			}\r\n			//if(_TransD == 0)\r\n			return {ID : _MajPh + \":\" + _MinPh, TransRate : 1 / _TransD};\r\n		 },\r\n		\r\n		static : \r\n		{\r\n				\r\n			Routines : \r\n			 {\r\n				//GetAngle          : function(iFrHdg, iToHdg){var _ClwsA = (iToHdg % D360) - (iFrHdg % D360), _AbsA = Abs(_ClwsA); return _AbsA > D180 ? (_AbsA - D360) * Sign(_ClwsA) : _ClwsA},\r\n				GetSuitableHAC    : function(){return \"NE\"},\r\n				GetHACInfo        : function(iCylId, iVeh, oInfo$obj)\r\n				 {\r\n					//debugger;\r\n					//var _CylId     = iCylIdRoutines.GetSuitableHAC();\r\n					var _IsN = iCylId == \"NE\" || iCylId == \"NW\", _IsS = !_IsN;\r\n					var _IsE = iCylId == \"NE\" || iCylId == \"SE\", _IsW = !_IsE;\r\n					var _IsTurnCW = (_IsN && _IsE) || (_IsS && _IsW);\r\n\r\n					var _CenPos    = new Vector3(6000 * (_IsN ? -1 : +1), 15000 * (_IsE ? +1 : -1), 0);\r\n					\r\n					var _AltF      = 1; //~~ 'C' stands for Cylinder;\r\n					var _CylRad    = 6000 * _AltF; \r\n\r\n					var _VehRelPos = iVeh.Position.Subtract(_CenPos).Set(null,null,0);//.Multiply(new Vector3(_IsN ? -1 : +1, _IsE ? +1 : -1, 0));\r\n					var _DisToCen  = _VehRelPos.Length;\r\n					var _DisToEdge = _DisToCen - _CylRad;\r\n						\r\n					var _IsInCyl  = _DisToCen < _CylRad;\r\n					var _AngToTan = !_IsInCyl ? Asin(_CylRad / _DisToCen) : D090;\r\n					//var _TrkToCen = Atan2(_VehPos.X - _CenPos.X, _VehPos.Y - _CenPos.Y) + PI;\r\n					var _TrkToCen = Atan2(_VehRelPos.X, _VehRelPos.Y) + D180;\r\n					var _TrkToTan = _TrkToCen + (_IsTurnCW ? -_AngToTan : +_AngToTan);\r\n					//var _TrkToTan = _IsTurnCW ? _TrkToCen - _AngToTan : _TrkToCen + _AngToTan;\r\n\r\n					//gAlgoCns.WriteLine([\"_TrkToCen\", _TrkToCen * RTD]);\r\n					//~~var _AngToNEP = Atan2(-_VehRelPos.Y, _VehRelPos.X * (_IsTurnCW ? -1 : +1)) + D180;\r\n					//var _AngToNEP = Atan2(-_VehRelPos.Y, -_VehRelPos.X) + (_IsTurnCW ? D180 : 0);\r\n\r\n					var _AngToNEP = Atan2(_VehRelPos.Y * (_IsE ? -1 : +1), _VehRelPos.X * (_IsN ? -1 : +1)) + D180;// + D360) % D360;//(_IsTurnCW ? D180 : 0);\r\n					//var _AngToNEP = D090 - Atan2(_VehRelPos.X, _VehRelPos.Y * (_IsTurnCW ? +1 : -1));\r\n					{\r\n						if(_AngToNEP > D180 && iVeh.Data.BAlt < 5000) _AngToNEP -= D360;\r\n					}\r\n					\r\n					oInfo =\r\n					{\r\n						ID        : iCylId,\r\n						CenPos    : _CenPos,\r\n						IsCW      : _IsTurnCW,\r\n\r\n						VehRelPos : _VehRelPos,\r\n						\r\n\r\n						\r\n						DisToCen  : _DisToCen,\r\n						DisToEdge : _DisToEdge,\r\n						TrkToTan  : _TrkToTan,\r\n\r\n						AngToNEP  : _AngToNEP,\r\n						//TgtAlt    : _TgtAlt,\r\n					};\r\n					return oInfo;\r\n				 },\r\n				GetGlideslopeInfo : function(iOffsY, iIncA, iVeh, oInfo$obj)\r\n				 {\r\n					var iVehP     = iVeh.Position.Set(null,null,iVeh.Data.BAlt);//.Add(new Vector3(0,0,4.5));\r\n					//var iVehP     = iVeh.Position;//.Add(new Vector3(0,0,4.5));\r\n					var iVehV     = iVeh.Velocity.Linear;\r\n\r\n					var _GlideT   = Tan(iIncA * DTR);\r\n\r\n					var _TgtPosZ  = (Abs(iVehP.Y) - iOffsY) * _GlideT;\r\n					var _AltErr   = iVehP.Z - _TgtPosZ;\r\n\r\n					var _TgtVelZ  = -Abs(iVehV.Y) * _GlideT;\r\n					var _VSpdErr  = iVehV.Z - _TgtVelZ;\r\n\r\n					//gAlgoCns.WriteHeader(\"SLOPE\" + iIncA);\r\n					//gAlgoCns.WriteLine([\"_TgtPosZ\", _TgtPosZ]);\r\n					//gAlgoCns.WriteLine([\"_TgtVelZ\", _TgtVelZ]);\r\n					//gAlgoCns.WriteLine([\"_AltErr\",  _AltErr]);\r\n					//gAlgoCns.WriteLine([\"_VSpdErr\", _VSpdErr]);\r\n\r\n					return {AltErr : _AltErr, VSpdErr : _VSpdErr};\r\n				 },\r\n			 },\r\n\r\n			Programs : jso\r\n			 ({\r\n				Generic : \r\n				{\r\n					PHICM : \r\n					 {\r\n						\"HISTORICAL\" : function HISTORICAL()\r\n						 {\r\n							var _E = UVS.Data.GetNearestEntry();\r\n							//if(isNaN(_E.Value.Bank)) debugger;\r\n\r\n							return _E ? _E.Value.Bank : 0;\r\n						 },\r\n						\"HACTRACK\"   : function           ()\r\n						 {\r\n							if(0 && this.Position.Z > 18000) return -Clamp(Scale(this.Position.Z, 20100, 19300), -14 / 50, 50 / 50) * 50;\r\n							\r\n							var _CylId   = Routines.GetSuitableHAC();\r\n							var _CylInfo = Routines.GetHACInfo(_CylId, this);\r\n\r\n							//var _LinVel    = this.Velocity.Linear;\r\n							var _TrkAng  = Atan2(this.Velocity.Linear.X, this.Velocity.Linear.Y);\r\n							//var _HdgError  = Routines.GetAngle(this.Data.Attitude.Heading, _CylInfo.TrkToTan);\r\n							var _HdgErr  = Angle(_CylInfo.TrkToTan, _TrkAng) * RTD;\r\n							var _MaxBnk  = 50;\r\n							var _MaxErr  = 10;\r\n\r\n							var _HdgF    = Scale(-_HdgErr, _MaxErr);\r\n							//var _MaxErr  = 10;\r\n\r\n							\r\n							//gAlgoCns.WriteHeader(\"HACTRACK\");\r\n							gAlgoCns.WriteLine([\"CylId\",     _CylId]);\r\n							gAlgoCns.WriteLine([\"DisToEdge\", _CylInfo.DisToEdge]);\r\n							//gAlgoCns.WriteLine([\"HdgErr\",    _HdgErr]);\r\n\r\n							gAlgoCns.WriteLine([\"HdgErr\", {Type : \"Bar\", Text : _HdgErr, Values : [0, _HdgF, null, true]}]);\r\n\r\n							return Clamp(_HdgF) * _MaxBnk;\r\n						 },\r\n						\"WINGLEV\"    : function WINGLEV   (){return 0},\r\n						\"ELEVONLEV\"  : function ELEVONLEV (){return -this.Surfaces.Aileron},\r\n						\"LOCALIZER\"  : function LOCALIZER ()\r\n						 {\r\n							var _MaxLatPos  = 100;\r\n							var _MaxLatVel  = 20;\r\n							var _MaxBank    = 30;\r\n\r\n							var _AppDir     = -Sign(this.Position.Y);\r\n							var _LatPosErr  = _AppDir * this.Position.X;\r\n							var _LatVelErr  = _AppDir * this.Velocity.Linear.X;\r\n\r\n							var _LatPosF    = Scale(_LatPosErr, _MaxLatPos);\r\n							var _LatVelF    = Scale(_LatVelErr, _MaxLatVel);\r\n							 //+ Scale(-_LatVelErr, _MaxLatVel)) * _MaxBank\r\n							//gAlgoCns.WriteLine([\"LatPosErr\", _LatPosErr]);\r\n							//gAlgoCns.WriteLine([\"LatVelErr\", _LatVelErr]);\r\n							\r\n							gAlgoCns.WriteLine([\"LatPosErr\",  {Type : \"Bar\", Text : _LatPosErr, Values : [0, -_LatPosF, null, true]}]);\r\n							gAlgoCns.WriteLine([\"LatVelErr\",  {Type : \"Bar\", Text : _LatVelErr, Values : [0, -_LatVelF, null, true]}]);\r\n							//gAlgoCns.WriteLine([\"Collective\", {Type : \"Bar\",                    Values : [_LatVelF, _LatPosF, null, true]}]);\r\n\r\n							//return Clamp(Clamp(Scale(-_LatPosErr, _MaxLatPos)) + Scale(-_LatVelErr, _MaxLatVel)) * _MaxBank;\r\n							return -Clamp(Clamp(_LatPosF) + _LatVelF) * _MaxBank;\r\n						 },\r\n					 },\r\n					YALCM : \r\n					 {\r\n						\"LOCALIZER\"  : function LOCALIZER ()\r\n						 {\r\n							var _MaxLatPos  = 10;\r\n							var _MaxLatVel  = 5;\r\n							var _MaxLatAcc  = 3;\r\n							var _MaxYawRate = 10;\r\n\r\n							var _AppDir     = +Sign(this.Velocity.Linear.Y);\r\n							var _LatPosErr  = _AppDir * this.Position.X;\r\n							var _LatVelErr  = _AppDir * this.Velocity.Linear.X;\r\n							var _LatAccErr  = this.Data.Accelerometer.X;\r\n\r\n							\r\n\r\n							var _LatPosF    = Scale(_LatPosErr, _MaxLatPos);\r\n							var _LatVelF    = Scale(_LatVelErr, _MaxLatVel);\r\n							var _LatAccF    = Scale(this.Data.Accelerometer.X, _MaxLatAcc);\r\n\r\n							gAlgoCns.WriteLine([\"LatPosErr\",  {Type : \"Bar\", Text : _LatPosErr, Values : [0, -_LatPosF, null]}]);\r\n							gAlgoCns.WriteLine([\"LatVelErr\",  {Type : \"Bar\", Text : _LatVelErr, Values : [0, -_LatVelF, null]}]);\r\n							gAlgoCns.WriteLine([\"LatAccErr\",  {Type : \"Bar\", Text : _LatAccErr, Values : [0, -_LatAccF, null]}]);\r\n							//gAlgoCns.WriteLine([\"Collective\", {Type : \"Bar\",                    Values : [_LatVelF, _LatPosF, null, true]}]);\r\n\r\n							//gAlgoCns.WriteLine([\"LatVelErr\", {Type : \"Bar01\", Values : [_LatVelF, 0,  0.50, true]}]);\r\n\r\n							//return -Clamp(Clamp(_LatPosF) + _LatVelF + _LatAccF) * _MaxYawRate;\r\n\r\n							return -Clamp(Clamp(_LatPosF) + _LatVelF) * _MaxYawRate;\r\n							//return -Clamp(Clamp(_LatPosF) + _LatVelErr + ) * _MaxYawRate;\r\n						 },\r\n					 },\r\n					NZCM : \r\n					 {\r\n						\"HISTORICAL\" : function HISTORICAL()\r\n						 {\r\n							var _E = UVS.Data.GetNearestEntry();\r\n\r\n							var _CurVSpd = this.Velocity.Linear.Z;\r\n							var _CmdVSpd = _E ? _E.Value.VSpd : _CurVSpd;\r\n							\r\n							var _VSpdErr = _CurVSpd - _CmdVSpd;\r\n							var _VSpdF = Scale(_VSpdErr, 10);\r\n\r\n							//if(isNaN(this.Data.VSpd) || isNaN(_E.Value.Position.Z)) debugger;\r\n\r\n							gAlgoCns.WriteLine([\"VSpdErr\",  {Type : \"Bar\", Text : _VSpdErr, Values : [_VSpdF, 0, null]}]);\r\n							//var _AltF = Clamp01(Scale01(this.Data.BAlt, 20000, 18000), 0.1, 0.1); //~~ high-alt transition fix;\r\n\r\n							//return 1 + (Scale(-_VSpdErr, 10 * _AltF) + (0.8 * Abs(Sin(this.Data.Attitude.Bank))));\r\n							//~~return 1 + (-_VSpdF + (1.0 * Abs(Sin(this.Data.Attitude.Bank))));\r\n							return 1 - (_VSpdF * (1 + (Abs(Sin(this.Data.Attitude.Bank * DTR)) * 1.0)));\r\n						 },\r\n						//\"VS_60\"      : function VS_60     (){return 1 + Scale(-40 - this.Velocity.Linear.Z, 40)},\r\n						\"VS100\"  : function VS100 ()\r\n						 {\r\n							var _CylId     = Routines.GetSuitableHAC();\r\n							var _CylInfo   = Routines.GetHACInfo(_CylId, this);\r\n							\r\n							var _VSpdErr   = this.Velocity.Linear.Z + 100;\r\n							var _VSpdErrF  = Scale(_VSpdErr, 10);\r\n							\r\n							gAlgoCns.WriteLine([\"VSpdErr\", {Type : \"Bar\", Text : _VSpdErr, Values : [_VSpdErrF,0]}]);\r\n							\r\n							return 1 - Clamp(_VSpdErrF);\r\n						 },\r\n						\"HACENERGY\"  : function HACENERGY ()\r\n						 {\r\n							var _CylId     = Routines.GetSuitableHAC();\r\n							var _CylInfo   = Routines.GetHACInfo(_CylId, this);\r\n							\r\n							//var _AngToNEPF  = ;\r\n							//var _DisToEdgeF = ;\r\n							//~~var _TgtAlt     = Min(4500 + (_CylInfo.AngToNEP / D360 * 10500) + Max(_CylInfo.DisToEdge / 15, 0), 20000);\r\n							//~~var _TgtAlt     = Min(4500 + (_CylInfo.AngToNEP / D360 * 11000) + Max(_CylInfo.DisToEdge / 100, 0), 20000);\r\n							//var _TgtAlt     = Min(4500 + (Magic(_CylInfo.AngToNEP / D360, 1) * 11000) - Max(_CylInfo.DisToEdge / 100, 0), 20000);\r\n\r\n							//var _TgtAlt     = Min((Magic(_CylInfo.AngToNEP / D360, 1) * 11000) + Magic((_CylInfo.DisToCen / 6000) * 4500, 0.5), 20000);\r\n							//var _TgtAlt     = Min(4500 + (Magic(_CylInfo.AngToNEP / D360, 1) * 11000), 20000);\r\n							var _TgtAlt     = Min(4800 + (Magic(_CylInfo.AngToNEP / D360, 1) * 20000), 20000);\r\n\r\n							var _AltErr    = this.Data.BAlt - _TgtAlt;\r\n							var _VSpdErr   = this.Velocity.Linear.Z + 50;// + 50;\r\n\r\n							var _AltErrF   = Scale(_AltErr,  1000);\r\n							var _VSpdErrF  = Scale(_VSpdErr, 40);//40);\r\n							//var \r\n\r\n							//var _HDistErr = this.Velocity.Linear.Z + 50;\r\n							\r\n							//gAlgoCns.WriteHeader(\"HACENERGY\");\r\n							gAlgoCns.WriteLine([\"AngToNEP\", _CylInfo.AngToNEP * RTD]);\r\n							//gAlgoCns.WriteLine([\"_AngToAltF\",  _AltErr]);\r\n							gAlgoCns.WriteLine([\"TgtAlt\",  _TgtAlt]);\r\n\r\n							gAlgoCns.WriteLine([\"AltErr\",  {Type : \"Bar\", Text : _AltErr,  Values : [_AltErrF, 0]}]);\r\n							gAlgoCns.WriteLine([\"VSpdErr\", {Type : \"Bar\", Text : _VSpdErr, Values : [_VSpdErrF,0]}]);\r\n							\r\n\r\n\r\n							return 1 - ((Clamp(_AltErrF) + Clamp(_VSpdErrF, 2)) * 0.5);\r\n						 },\r\n						\r\n					 },\r\n					DSBCM : \r\n					 {\r\n						\"HISTORICAL\" : function HISTORICAL()\r\n						 {\r\n							var _E = UVS.Data.GetNearestEntry();\r\n\r\n							return _E ? _E.Value.SpdB : 0;\r\n						 },\r\n\r\n						\"ZERO\"       : function ZERO       (){return 0},\r\n						\"MAX\"        : function MAX        (){return 87},\r\n						\"DEG65\"      : function DEG65      (){return 65},\r\n						\"HYPERSONIC\" : function HYPERSONIC ()\r\n						 {\r\n							return 65;\r\n						 },\r\n						\"SUPERSONIC\" : function SUPERSONIC ()\r\n						 {\r\n							return 75;\r\n						 },\r\n						\"SUBSONIC\"   : function SUBSONIC   ()\r\n						 {\r\n							var _IASErr = this.Data.IAS - 470;\r\n							\r\n							gAlgoCns.WriteLine([\"IASErr\",  _IASErr]);\r\n\r\n							return Clamp(Scale01(_IASErr, 75), 0,1) * 87;\r\n							\r\n						 },\r\n					 },\r\n					DELBFRC : \r\n					 {\r\n						\"AUTO\"      : function AUTO      (){return Clamp(this.Surfaces.Elevator)},\r\n						\"BFRETRACT\" : function BFRETRACT (){return -10},\r\n					 },\r\n					QC : \r\n					 {\r\n						\"ELEVONDOWN\" : function ELEVONDOWN   (){return -3},\r\n					 },\r\n					THRCM :\r\n					 {\r\n						\"HISTORICAL\" : function HISTORICAL()\r\n						 {\r\n							//debugger;\r\n							//var _CmdSpd = UVS.Simulation.DataX.GetNearestEntry().Value.IAS;\r\n							//var _CurSpd = this.Velocity.Linear.Length;\r\n							var _Entry = UVS.Data.GetNearestEntry();\r\n\r\n							//if(isNaN(_Entry.Value.MSpd) || isNaN(_Entry.Value.Position.Z)) debugger;\r\n							if(_Entry.Value.Vel == undefined) debugger;\r\n\r\n\r\n							//var _CurSpd = this.Data.IAS;\r\n							var _CurSpd = this.Data.MSpd;\r\n							//var _CmdSpd = _E ? _E.Value.IAS : _CurSpd;\r\n\r\n							//var _CurSpd = this.Velocity.Linear.Length;\r\n							//var _CmdSpd = _Entry ? _Entry.Value.Vel : _CurSpd;\r\n							var _CmdSpd = _Entry ? _Entry.Value.MSpd : _CurSpd;\r\n							\r\n							var _SpdErr = _CurSpd - _CmdSpd;\r\n\r\n							gAlgoCns.WriteLine([\"_CmdSpd\", _CmdSpd]);\r\n							gAlgoCns.WriteLine([\"_CurSpd\", _CurSpd]);\r\n							gAlgoCns.WriteLine([\"_SpdErr\", _SpdErr]);\r\n\r\n							//return Scale(-_SpdErr, 0.05);\r\n							//if(isNaN(_SpdErr)) debugger;\r\n							return Clamp(Scale(-_SpdErr, 0.05));\r\n							//return 1;//Scale(-_SpdErr, 0.05);\r\n						 },\r\n					 }\r\n				 },\r\n				Phase : \r\n				 {\r\n					\"MANUAL\" : \r\n					 {\r\n						\"MANUAL\"   : {},\r\n					 },\r\n					\"TEST\" : \r\n					 {\r\n						\"T1\" : \r\n						 {\r\n							PHICM   : \"HISTORICAL\",\r\n							//PHICM : \"HACTRACK\",\r\n							NZCM    : \"HISTORICAL\",\r\n							DSBCM   : \"HISTORICAL\",\r\n							THRCM   : \"HISTORICAL\",\r\n							DELBFRC : \"AUTO\",\r\n						 },\r\n						\"T2\" : \r\n						 {\r\n							PHICM : \"WINGLEV\",\r\n\r\n							NZCM : function()\r\n							{\r\n								return 1 - Clamp(Scale(this.Data.BAlt - 10000, 500)) - Scale(this.Velocity.Linear.Z, 30);\r\n							},\r\n						 },\r\n					 },\r\n					//\"ERROR\" : \r\n					\"ENTRY\" : \r\n					 {\r\n						\"ERROR\"   : {},\r\n						\"ET5\" :\r\n						 {\r\n							//ALPHACM   : function ET5_ENERGY()\r\n							//{\r\n								//var _CurAlt = this.Position.Z;\r\n								//var _TgtAlt = 20000 + (Clamp(Scale01(this.Position.Length, 36000, 1000e3), 0,1) * 50000);\r\n								//var _AltErr = _CurAlt - _TgtAlt;\r\n\r\n								//var _VSpdErr = Scale(this.Velocity.Linear.Z + 100, 100);\r\n\r\n								////gAlgoCns.WriteLine([\"AltErr\",  _SlopeI.AltErr]);\r\n								//gAlgoCns.WriteLine([\"AltErr\", _AltErr]);\r\n\r\n								//return 1 - Clamp(Scale(_AltErr, 3000));// - Clamp(_VSpdErr);\r\n							//},\r\n							//ALPHACM   : function ET5_ENERGY()\r\n							//{\r\n								//var _AoACmd = 0 * DTR;\r\n								//var _AoAErr = this.Data.AoA - _AoACmd;\r\n\r\n								//gAlgoCns.WriteLine([\"AoAErr\",  _AoAErr * RTD]);\r\n								\r\n								//return _AoACmd;\r\n							//},\r\n							//PHICM  : function(){return 14 * DTR},\r\n							NZCM   : function VS50()\r\n							{\r\n								var _VSpdCmd  = -60;\r\n								var _VSpdErr  = this.Data.VSpd - _VSpdCmd;\r\n								var _VSpdErrF = Scale(_VSpdErr, 10);\r\n								\r\n								gAlgoCns.WriteLine([\"VSpdErr\", {Type : \"Bar\", Text : _VSpdErr, Values : [_VSpdErrF,0]}]);\r\n\r\n								return 1 - Clamp(_VSpdErrF);\r\n							},\r\n							//PHICM  : function R17(){return +17 * DTR},\r\n							DSBCM   : \"HYPERSONIC\",\r\n							DELBFRC : \"AUTO\",\r\n						 },\r\n						//\"ET4\" :\r\n						 //{\r\n							//NZCM   : function ET4_ENERGY()\r\n							//{\r\n								//var _CurAlt = this.Position.Z;\r\n								//var _TgtAlt = 20000 + (Clamp(Scale01(this.Position.Length, 36000, 200000), 0,1) * 30000);\r\n								//var _AltErr = _CurAlt - _TgtAlt;\r\n\r\n								//var _VSpdErr = Scale(this.Velocity.Linear.Z + 100, 100);\r\n\r\n								////gAlgoCns.WriteLine([\"AltErr\",  _SlopeI.AltErr]);\r\n								//gAlgoCns.WriteLine([\"AltErr\", _AltErr]);\r\n\r\n								//return 1 - Clamp(Scale(_AltErr, 3000));// - Clamp(_VSpdErr);\r\n							//},\r\n							////PHICM  : function(){return 0},\r\n							//DSBCM  : \"MAX\",\r\n						 //},\r\n					 },\r\n					\"TAEM\"  : \r\n					 {\r\n						\"ERROR\"   :\r\n						{\r\n							DSBCM   : \"SUBSONIC\",\r\n							PHICM   : \"WINGLEV\",\r\n							NZCM    : \"VS_60\",\r\n							DELBFRC : \"AUTO\",\r\n						},\r\n						\r\n						//\"S-TURN\"  :\r\n						 //{\r\n							//NZCM    : \"CAPTURE\",\r\n							//PHICM   : function(){return -1},\r\n							//DSBCM   : \"SUBSONIC\",\r\n							//DELBFRC : \"AUTO\",\r\n						 //},\r\n						\"CAPTURE\" :\r\n						 {\r\n							//NZCM   : \"HISTORICAL\",\r\n							NZCM    : \"VS100\",\r\n							PHICM   : \"HACTRACK\",\r\n							DSBCM   : \"SUPERSONIC\",\r\n							DELBFRC : \"AUTO\",\r\n							//DSBCM  : \"HISTORICAL\",\r\n							THRCM : \"HISTORICAL\",\r\n						 },\r\n						\"HAC\"     :\r\n						 {\r\n							//NZCM   : \"HISTORICAL\",\r\n							NZCM    : \"HACENERGY\",\r\n							PHICM   : \"HACTRACK\",\r\n							DSBCM   : \"SUBSONIC\",\r\n							//DSBCM  : \"HISTORICAL\",\r\n							\r\n							DELBFRC : \"AUTO\",\r\n							THRCM : \"HISTORICAL\",\r\n						 },\r\n						\"NEP\"     : \r\n						 {\r\n							DELBFRC : \"AUTO\",\r\n						 },\r\n					 },\r\n					\"A&L\"   : \r\n					 {\r\n						\"ERROR\"     : {},\r\n						\"CAPTURE\"     :\r\n						 {\r\n							//NZCM  : function VSpd50(){return -(Clamp(this.Velocity.Linear.Z + 50, -10, +10) * 0.1) + 1},\r\n							//NZCM  : function VSpd50(){return (iVehV + 50) * 0.05},\r\n							NZCM    : \"HACENERGY\",\r\n							PHICM   : \"LOCALIZER\",\r\n							DSBCM   : \"SUBSONIC\",\r\n							DELBFRC : \"AUTO\",\r\n							//DSBCM  : \"HISTORICAL\",\r\n							//THRCM  : \"HISTORICAL\",\r\n						 },\r\n						\"STEEP\"     :\r\n						 {\r\n							//NZCM  : function VSpd50(){return -(Clamp(this.Velocity.Linear.Z + 50, -10, +10) * 0.1) + 1},\r\n							//NZCM  : function VSpd50(){return (iVehV + 50) * 0.05},\r\n							NZCM   : function GS_STEEP()\r\n							 {\r\n								var _SlopeI = Routines.GetGlideslopeInfo(3400, 20, this); //~~ SSO-24;\r\n\r\n								//return 1 + ((Scale(_SlopeI.AltErr, 100) * 0.1) + (Clamp(_SlopeI.VSpdErr,30) * 0.1));\r\n								gAlgoCns.WriteLine([\"AltErr\",  _SlopeI.AltErr]);\r\n								gAlgoCns.WriteLine([\"VSpdErr\", _SlopeI.VSpdErr]);\r\n\r\n								//~~return 1 + Scale(_SlopeI.AltErr, -100) + Scale(_SlopeI.VSpdErr, -20);\r\n\r\n								//return 1 - Scale(_SlopeI.AltErr, 100) - Scale(_SlopeI.VSpdErr, 20);\r\n								return 1 - Scale(_SlopeI.AltErr, 100) - Scale(_SlopeI.VSpdErr, 20);\r\n							 },\r\n							PHICM  : \"LOCALIZER\",\r\n							DSBCM  : \"SUBSONIC\",\r\n							//DSBCM  : \"HISTORICAL\",\r\n							//THRCM  : \"HISTORICAL\",\r\n							DELBFRC : \"AUTO\",\r\n						 },\r\n						\"FLARE\"     :\r\n						 {\r\n							NZCM   : function GS_SHALLOW()\r\n							 {\r\n								var _SlopeI = Routines.GetGlideslopeInfo(1500, 2, this); //~~ SSO-3;\r\n\r\n								gAlgoCns.WriteLine([\"AltErr\",  _SlopeI.AltErr]);\r\n								gAlgoCns.WriteLine([\"VSpdErr\", _SlopeI.VSpdErr]);\r\n\r\n								//return 1 + Scale(_SlopeI.AltErr, 50) + Scale(_SlopeI.VSpdErr, 10);\r\n								//return 1 + Scale(_SlopeI.AltErr, -100) + Scale(_SlopeI.VSpdErr, -10);\r\n								//~~return 1 - Scale(_SlopeI.AltErr, 100) - Scale(_SlopeI.VSpdErr, 10);\r\n								return 1 - Scale(_SlopeI.AltErr, 50) - Scale(_SlopeI.VSpdErr, 10);\r\n\r\n								//return 1 + Norm(_SlopeI.AltErr, -100) + Norm(_SlopeI.VSpdErr, -10);\r\n							 },\r\n							PHICM    : \"LOCALIZER\",\r\n							DSBCM    : \"SUBSONIC\",\r\n							DELBFRC  : \"BFRETRACT\",\r\n							//DSBCM  : \"HISTORICAL\",\r\n							//THRCM  : \"HISTORICAL\",\r\n						},\r\n						\"FINALFLARE\" : \r\n						 {\r\n							NZCM    : function ALTEXP    ()\r\n							 {\r\n								//return 1 - Clamp(Scale(this.Velocity.Linear.Z + 3, 5), 0.2);\r\n								var _RAlt  = this.Data.RAlt;\r\n								var _CurVS = this.Velocity.Linear.Z;\r\n								var _TgtVS = -(_RAlt / 10) - 0;// - 0.5;\r\n								//var _TgtVS = -0.5;// - 0.5;\r\n								var _ErrVS = _CurVS - _TgtVS;\r\n								\r\n								//var _AccZ  = -_ErrVS / 9.8;\r\n								var _AccZ  = (-_ErrVS * 0.1) * Scale01(_RAlt, 30, 0);\r\n								\r\n								gAlgoCns.WriteLine([\"RAlt\",  _RAlt]);\r\n								gAlgoCns.WriteLine([\"CurVS\", _CurVS]);\r\n								gAlgoCns.WriteLine([\"TgtVS\", _TgtVS]);\r\n								gAlgoCns.WriteLine([\"ErrVS\", _ErrVS]);\r\n								gAlgoCns.WriteLine([\"AccZ\",  _AccZ]);\r\n\r\n\r\n								//return 1 - Clamp(Scale((this.Velocity.Linear.Z + 1) / (this.Position.Z - 4.5), 1), 0.2);// - Clamp(this.Velocity.Acceleration.Linear.Z, 0.1);// - Scale(this.Velocity.Linear.Z, 3);// * Scale01(Clamp(this.Position.Z - 4, 0, 10), 10));// (1 - Clamp(Scale01(this.Position.Z - 4, 0, 10)));\r\n								return 1 + Clamp(_AccZ * 1.0, -0.2, 2);// - Clamp(this.Velocity.Acceleration.Linear.Z, 0.1);// - Scale(this.Velocity.Linear.Z, 3);// * Scale01(Clamp(this.Position.Z - 4, 0, 10), 10));// (1 - Clamp(Scale01(this.Position.Z - 4, 0, 10)));\r\n							 },\r\n							//PHICM : function WingLev(){return 0},\r\n							PHICM : \"LOCALIZER\",\r\n							DSBCM : \"DEG65\",\r\n							DELBFRC : \"BFRETRACT\",\r\n						 },\r\n						\"HOVER\" : \r\n						 {\r\n							PHICM   : \"WINGLEV\",\r\n							YALCM   : \"LOCALIZER\",\r\n\r\n							DSBCM   : \"DEG65\",\r\n							DELBFRC : \"BFRETRACT\",\r\n						 },\r\n					 },\r\n					\"GROUND\" : \r\n					 {\r\n						\"TOUCHDOWN\" : \r\n						 {\r\n							DSBCM   : \"ZERO\",\r\n							PHICM   : \"WINGLEV\",\r\n							YALCM   : \"LOCALIZER\",\r\n							DELBFRC : \"BFRETRACT\",\r\n\r\n							QC      : function PITCHDOWN    (){return -1},\r\n\r\n							WHBL    : function DIFFERENTIAL (){return 1 - Clamp01(-this.Surfaces.Rudder / 23)},\r\n							WHBR    : function DIFFERENTIAL (){return 1 - Clamp01(+this.Surfaces.Rudder / 23)},\r\n							WHBN    : function OFF          (){return 1},\r\n						 },\r\n						\"LANDINGRUN\" : \r\n						 {\r\n							PHICM   : \"ELEVONLEV\",\r\n							YALCM   : \"LOCALIZER\",\r\n							DELBFRC : \"BFRETRACT\",\r\n\r\n							WHBL    : function RELEASE      (){return 1},\r\n							WHBR    : function RELEASE      (){return 1},\r\n							WHBN    : function RELEASE      (){return 1},\r\n						 },\r\n						\"STOP\" : \r\n						 {\r\n							PHICM   : \"ELEVONLEV\",\r\n							YALCM   : \"LOCALIZER\",\r\n							DELBFRC : \"BFRETRACT\",\r\n\r\n							WHBL    : function BRAKE        (){return 0.5},\r\n							WHBR    : function BRAKE        (){return 0.5},\r\n							WHBN    : function BRAKE        (){return 0.5},\r\n						 },\r\n						\"SERVICE\" : \r\n						 {\r\n							PHICM   : \"ELEVONLEV\",\r\n							QC      : \"ELEVONDOWN\",\r\n							DELBFRC : \"BFRETRACT\",\r\n\r\n							WHBL    : function PARKING(){return 0},\r\n							WHBR    : function PARKING(){return 0},\r\n							WHBN    : function PARKING(){return 0},\r\n						 },\r\n						\"SHUTDOWN\" : \r\n						 {\r\n							\r\n						 },\r\n					 }\r\n				 }\r\n			 }),\r\n		}\r\n	}\r\n });",
	"../UVS/Imaging/ApproachDiagram.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'Math',\r\n		'System.Data',\r\n		'System.Drawing',\r\n	],\r\n	\r\n	'UVS.Imaging' : \r\n	 {\r\n		'ApproachDiagram : GraphicsLayer' :\r\n		 {\r\n			VymData : obj('TimeSeries.Set'),\r\n			SimData : obj('TimeSeries.Set'),\r\n			//UpdateInt\r\n\r\n			//SrcSeries : \r\n			//Series    : obj('TimeSeries.Set'),\r\n			Cursor    : num(0),\r\n\r\n			PrepareContext   : function()\r\n			 {\r\n				var oCtx = this.Context;\r\n				{\r\n					oCtx.W = 2125;\r\n					oCtx.H = 1200;\r\n\r\n					var _ScaleF = this.Canvas.width / oCtx.W;\r\n					{\r\n						oCtx.H = this.Canvas.height / _ScaleF;\r\n						oCtx.SetTransform(_ScaleF, 0,0, _ScaleF, 0,0);\r\n					}\r\n\r\n					oCtx.LineWidth    = 2;\r\n					oCtx.GlobalAlpha  = 1;\r\n					oCtx.Font = \"20px courier\";\r\n\r\n					oCtx.Clear();\r\n				}\r\n				return oCtx;\r\n			 },\r\n			UpdateBackground : function()\r\n			 {\r\n				var _Ctx = this.PrepareContext();\r\n				\r\n				ApproachDiagram.Drawing.Background(this.Context);\r\n\r\n\r\n				_Ctx.FillStyle   = \"#333333\";\r\n				_Ctx.StrokeStyle = \"rgba(255,255,255,0.2)\";\r\n\r\n				_Ctx.LineWidth   = 1;\r\n\r\n				//_Ctx.ClearRect(0,0,_Ctx.W,_Ctx.H);\r\n				//_Ctx.FillRect(100,100,300,200);\r\n\r\n				\r\n\r\n				ApproachDiagram : \r\n				{\r\n					_Ctx.Translate(25,25);\r\n\r\n					_Ctx.StrokeStyle  = \"#ffffff\";\r\n					_Ctx.FillStyle    = \"#ffffff\";\r\n\r\n					_Ctx.LineWidth    = 2;\r\n					_Ctx.GlobalAlpha  = 1;\r\n					_Ctx.Font         = \"20px courier\"; \r\n\r\n					//ApproachDiagram.Drawing.ApproachDiagram.Border     (this.Context);\r\n					ApproachDiagram.Drawing.Graph.Grid       (this.Context);\r\n					ApproachDiagram.Drawing.Graph.Scales     (this.Context);\r\n					\r\n					//_Ctx.LineWidth    = 1;\r\n					_Ctx.GlobalAlpha  = 0.7;\r\n					ApproachDiagram.Drawing.Graph.Batch      (this.Context, this.VymData, this.Cursor, 1);\r\n				}\r\n\r\n				\r\n			 },\r\n			UpdateForeground : function()\r\n			 {\r\n				if(gMouse.B3) this.Cursor = Clamp(this.Cursor + Floor((gMouse.DX / window.innerWidth) * this.SimData.Entries.Length), 0, this.SimData.Entries.Length);\r\n\r\n				//this.Cursor = Floor((gMouse.X / window.innerWidth) * this.Series.Entries.Length);\r\n				//var _Entry = this.Series.Entries[this.Cursor];//10];\r\n			\r\n				var _Ctx = this.PrepareContext();\r\n	\r\n				ApproachDiagram : \r\n				{\r\n					_Ctx.Translate(25,25);\r\n\r\n					//_Ctx.StrokeStyle  = \"#0000a0\";\r\n					//_Ctx.FillStyle    = \"#0000a0\";\r\n\r\n					_Ctx.StrokeStyle  = \"#ffffff\";\r\n					//_Ctx.FillStyle    = \"#ffffff\";\r\n\r\n					\r\n					//_Ctx.Font         = \"20px courier\"; \r\n					_Ctx.GlobalAlpha = 1;\r\n					_Ctx.LineWidth   = 2;\r\n\r\n					ApproachDiagram.Drawing.Graph.Batch      (this.Context, this.SimData, this.Cursor);\r\n				}\r\n\r\n				if(this.SimData.Entries.Length > 0)\r\n				{\r\n					PrimaryInstruments : \r\n					{\r\n						//break PrimaryInstruments;\r\n						//if(this.Series.Entries.Length == 0)\r\n\r\n						var _Value = this.SimData.Entries[this.Cursor].Value;//10];\r\n\r\n						_Ctx.Translate(1550,50);\r\n						_Ctx.StrokeStyle = \"#ffaaaa\";\r\n						_Ctx.GlobalAlpha = 1;\r\n						_Ctx.LineWidth   = 1;\r\n\r\n						_Ctx.BeginPath();\r\n						_Ctx.AddRect(0,0,500,400, 10);\r\n						_Ctx.Stroke();\r\n\r\n						_Ctx.StrokeStyle = \"#ffffff\";\r\n						_Ctx.FillStyle   = \"#ffffff\";\r\n						\r\n						ApproachDiagram.Drawing.Indicators.TSData    (_Ctx, _Value,  10, -25);\r\n						ApproachDiagram.Drawing.Indicators.Attitude  (_Ctx, _Value, 250, 150);\r\n						ApproachDiagram.Drawing.Indicators.Speeds    (_Ctx, _Value,   0,  50);\r\n						ApproachDiagram.Drawing.Indicators.Verticals (_Ctx, _Value, 375,  50);\r\n						ApproachDiagram.Drawing.Indicators.Position  (_Ctx, _Value,  10,  275);\r\n						\r\n					}\r\n					SecondaryInstruments : \r\n					{\r\n						_Ctx.Translate(0,450);\r\n						_Ctx.StrokeStyle = \"#ffaaaa\";\r\n						_Ctx.GlobalAlpha = 1;\r\n						_Ctx.LineWidth   = 1;\r\n\r\n						_Ctx.StrokeRect(0,0,500,550);\r\n\r\n						//ApproachDiagram.Drawing.ApproachDiagram.Grid(this.Context);\r\n					}\r\n				}\r\n			 },\r\n\r\n\r\n			static : \r\n			{\r\n				Drawing : \r\n				{\r\n					Background   : function(iCtx)\r\n					 {\r\n						//return;\r\n						//var _\r\n\r\n						//iCtx.FillStyle   = \"#fffffa\";\r\n						//iCtx.StrokeStyle = \"#aa3300\";\r\n\r\n						//iCtx.ClearRect(0, 0, iCtx.W, iCtx.H);\r\n\r\n						iCtx.Clear();\r\n						iCtx.FillStyle = \"rgba(0,0,0,1)\";\r\n						iCtx.FillRect(0,0,iCtx.W,iCtx.H);\r\n						iCtx.StrokeStyle = \"rgba(50,50,50,1)\";\r\n						iCtx.LineWidth = 3;\r\n						//iCtx.FillStyle = \"#333333\";\r\n						//iCtx.FillRect(0, 0, iCtx.W, iCtx.H);\r\n						\r\n\r\n						//iCtx.GlobalAlpha = 0.5;\r\n						//return;\r\n\r\n						Grid1 :\r\n						{\r\n							break Grid1;\r\n\r\n							iCtx.BeginPath();\r\n							{\r\n								for(var cX = 0;  cX <  iCtx.W;    cX += 5){iCtx.MoveTo(cX,0); iCtx.LineTo(cX,iCtx.H - 0);}\r\n								for(var cY = 0; cY <= iCtx.H - 0; cY += 5){iCtx.MoveTo(0,cY); iCtx.LineTo(iCtx.W,cY);}\r\n							}\r\n							//iCtx.LineWidth   = 0.1;\r\n							iCtx.Stroke();\r\n						}\r\n						Grid2 :\r\n						{\r\n							//break Grid2;\r\n\r\n							iCtx.BeginPath();\r\n							{\r\n								for(var cX = 0; cX < iCtx.W; cX += 25){iCtx.MoveTo(cX,0); iCtx.LineTo(cX,iCtx.H);}\r\n								for(var cY = 0; cY < iCtx.H; cY += 25){iCtx.MoveTo(0,cY); iCtx.LineTo(iCtx.W,cY);}\r\n							}\r\n							iCtx.LineWidth   = 1;\r\n							iCtx.Stroke();\r\n						}\r\n						Grid3 :\r\n						{\r\n							break Grid3;\r\n\r\n							iCtx.BeginPath();\r\n							{\r\n								for(var cX = -25; cX < iCtx.W; cX += 50){iCtx.MoveTo(cX,0); iCtx.LineTo(cX,iCtx.H);}\r\n								for(var cY = -25; cY < iCtx.H; cY += 50){iCtx.MoveTo(0,cY); iCtx.LineTo(iCtx.W,cY);}\r\n							}\r\n							iCtx.LineWidth   = 2;\r\n							iCtx.Stroke();\r\n						}\r\n						Grid4 :\r\n						{\r\n							break Grid4;\r\n\r\n							iCtx.BeginPath();\r\n							{\r\n								for(var cX = +25; cX < iCtx.W; cX += 100){iCtx.MoveTo(cX,0); iCtx.LineTo(cX,iCtx.H);}\r\n								for(var cY = -25; cY < iCtx.H; cY += 100){iCtx.MoveTo(0,cY); iCtx.LineTo(iCtx.W,cY);}\r\n							}\r\n							iCtx.LineWidth   = 3;\r\n							iCtx.Stroke();\r\n						}\r\n						\r\n						//iCtx.FillStyle = \"#ff0000\";\r\n\r\n						//var _Gradient = iCtx.CreateLinearGradient(0, -0.5, 0, 0.5);\r\n						//{\r\n							////_Gradient.AddColorStop(0, (iFrame.Parent && iFrame.Parent.BackColor.AsString) || \"#ffffff\");\r\n							//_Gradient.AddColorStop(0.0, \"#00ccff\");\r\n							//_Gradient.AddColorStop(0.5,  \"#ffffff\");\r\n							////_Gradient.AddColorStop(0.5, \"#000000\");\r\n							//_Gradient.AddColorStop(1.0, \"#66cc00\");\r\n						//}\r\n						//iCtx.FillStyle   = _Gradient;\r\n\r\n						//iCtx.FillRect(-1,-1,2,2);\r\n					 },\r\n					\r\n					Graph : \r\n					{\r\n						Border       : function(iCtx)\r\n						 {\r\n							iCtx.BeginPath();\r\n							iCtx.AddRect(0,0,1550,1150,10);\r\n							iCtx.Stroke();\r\n						 },\r\n						//Title        : function(iCtx)\r\n						 //{\r\n							\r\n						 //},\r\n						Grid         : function(iCtx)\r\n						 {\r\n							iCtx.Save();\r\n							//iCtx.Translate(180,30);\r\n							iCtx.Translate(300,50);\r\n\r\n							iCtx.TextAlign = \"left\";\r\n							iCtx.FillText(\"Z\", -25, -25);\r\n							iCtx.FillText(\"X\", 1100, 1050);\r\n\r\n							iCtx.BeginPath();\r\n							{\r\n								this.Marks.TriangleT(iCtx, -50, -25);\r\n								iCtx.Stroke();\r\n							}\r\n							\r\n							\r\n							\r\n						\r\n							iCtx.BeginPath();\r\n							{\r\n								iCtx.AddRect(0,0,1100,1000);\r\n								iCtx.AddRect(0,0,1100,1000);\r\n\r\n								iCtx.TextAlign = \"left\"; for(var cX,Xi = 0; cX = Xi * 100, Xi <= 11; Xi++)\r\n								{\r\n									iCtx.MoveTo(cX,  0); iCtx.LineTo(cX, 1000 + 10);\r\n									iCtx.FillText(-(Xi - 5) * 4000, cX + 3, 1020);\r\n								}\r\n								iCtx.TextAlign = \"right\"; for(var cY,Yi = 0; cY = Yi * 100, Yi <= 10; Yi++)\r\n								{\r\n									iCtx.MoveTo(-5, cY); iCtx.LineTo(1100, cY);\r\n									Yi <= 7 && iCtx.FillText(-(Yi - 5) * 4000, -5, cY);\r\n								}\r\n								//for(var cX = 0;  cX <= 660; cX += 60){iCtx.MoveTo(cX,   0);     iCtx.LineTo(cX, 600 + 5);}\r\n								//for(var cY = 0;  cY <= 600; cY += 60){iCtx.MoveTo(- 5, cY);     iCtx.LineTo(660, cY);}\r\n								\r\n								//for(var cX = 30; cX <= 620; cX += 60){iCtx.MoveTo(cX,  600);    iCtx.LineTo(cX, 600 + 5);}\r\n								//for(var cY = 30; cY <= 570; cY += 60){iCtx.MoveTo(-5, cY);      iCtx.LineTo(0,  cY);}\r\n							}\r\n							iCtx.GlobalAlpha = 0.2;\r\n							iCtx.Stroke();\r\n\r\n							iCtx.BeginPath();\r\n							{\r\n								iCtx.AddRect  (440,497,120,6); //~~ Landing strip;\r\n								//iCtx.Stroke();\r\n								//iCtx.MoveTo();\r\n\r\n								//~~ HACs;\r\n								iCtx.AddCircle(125,350,150);\r\n								iCtx.AddCircle(125,650,150);\r\n								iCtx.AddCircle(875,350,150);\r\n								iCtx.AddCircle(875,650,150);\r\n\r\n								//iCtx.AddCircle(-125,500,625);\r\n								//iCtx.Clip(0,0,300,300);\r\n								//iCtx.MoveTo(500,500); iCtx.AddArc(-125,500,625, 0,      -1, true);\r\n								//iCtx.MoveTo(500,500); iCtx.AddArc(-125,500,625, 0,      +1, false);\r\n								//iCtx.MoveTo(500,500); iCtx.AddArc(1125,500,625, PI, PI + 1, false);\r\n								//iCtx.MoveTo(500,500); iCtx.AddArc(1125,500,625, PI, PI - 1, true);\r\n\r\n								iCtx.MoveTo(275,25);  iCtx.LineTo(375,125);\r\n								iCtx.MoveTo(275,975); iCtx.LineTo(375,875);\r\n\r\n								iCtx.MoveTo(725,25);  iCtx.LineTo(625,125);\r\n								iCtx.MoveTo(725,975); iCtx.LineTo(625,875);\r\n								//iCtx.AddArc(-125,500,625,0,+0.8);\r\n\r\n								\r\n								\r\n\r\n								//iCtx.AddCircle(1125,500,625);\r\n								\r\n\r\n								//iCtx.AddCircle(1125,500,625);\r\n								//iCtx.AddCircle(-125,500,625);\r\n\r\n								\r\n								iCtx.StrokeStyle = \"#666666\";\r\n								iCtx.GlobalAlpha = 1;\r\n								iCtx.Stroke();\r\n\r\n								iCtx.FontSize = \"50px\";\r\n								iCtx.TextAlign = \"center\";\r\n								iCtx.TextBaseline = \"middle\";\r\n								iCtx.GlobalAlpha = 0.2;\r\n								\r\n\r\n								iCtx.FillText(\"NW\", 125, 350);\r\n								iCtx.FillText(\"SW\", 125, 650);\r\n								iCtx.FillText(\"NE\", 875, 350);\r\n								iCtx.FillText(\"SE\", 875, 650);\r\n							}\r\n\r\n							iCtx.GlobalAlpha = 1;\r\n							iCtx.Restore();\r\n						 },\r\n						Scales       : function(iCtx)\r\n						 {\r\n							iCtx.FillText(\"B U R A N  ORBITER DESCENT AND LANDING DIAGRAM  15.11.88  .\", 400, 25);\r\n							//iCtx.FillText(\"ТРАЕКТОРИЯ СПУСКА И ПОСАДКИ ОРБИТАЛЬНОГО КОРАБЛЯ  Б У Р А Н  15.11.88  .\", 400, 25);\r\n\r\n							HM : \r\n							 {\r\n								iCtx.BeginPath();\r\n								{\r\n									//X : iCtx.TextAlign = \"left\";  iCtx.FillText(\"X\", 840,660); for(var cX = -5; cX <= 6; cX++) iCtx.FillText(-cX * 4000, 180 + ((cX + 5) * 60), 643);\r\n									//Z : iCtx.TextAlign = \"right\"; iCtx.FillText(\"Z\", 83, ); for(var cZ = -2; cZ <= 5; cZ++) iCtx.FillText(+cZ * 4000, 175, 150 + ((-cZ + 3) * 60));\r\n									H :\r\n									{\r\n										iCtx.Save();\r\n										iCtx.Translate(100,50);\r\n										{\r\n											iCtx.TextAlign = \"right\";\r\n											iCtx.FillText(\"H\", -10, -25);\r\n							\r\n											iCtx.BeginPath();\r\n											{\r\n												this.Marks.PlusSign(iCtx, -50, -25);\r\n\r\n												iCtx.MoveTo(0, 0);\r\n												iCtx.LineTo(0, 1000);\r\n												\r\n												for(var cY,Yi = 0; cY = 1000 - (Yi * 100), Yi <= 10; Yi++)\r\n												{\r\n													iCtx.MoveTo(-4, cY); iCtx.LineTo(0, cY);\r\n													iCtx.FillText((Yi * 2000) + \".0\", -6, cY);\r\n												}\r\n											}\r\n											iCtx.Stroke();\r\n										}\r\n										iCtx.Restore();\r\n									}\r\n									M : \r\n									{\r\n										iCtx.Save();\r\n										iCtx.Translate(300, 850);\r\n										{\r\n											iCtx.BeginPath();\r\n											this.Marks.DotSign(iCtx, -50, -25);\r\n											iCtx.Stroke();\r\n											iCtx.TextAlign = \"right\";\r\n											iCtx.FillText(\"M\",   -10, -25);\r\n											iCtx.FillText(\"0.8\", -7,    0);\r\n											iCtx.FillText(\"0.4\", -7,  100);\r\n											iCtx.FillText(\"0.0\", -7,  200);\r\n										}\r\n										iCtx.Restore();\r\n									}\r\n									//for(var cY =  30; cY <= 630; cY += 60){iCtx.MoveTo(180, cY); iCtx.LineTo(840, cY);}\r\n								}\r\n								iCtx.Stroke();\r\n							 }\r\n							AoA  :\r\n							{\r\n								//iCtx.Save();\r\n								//iCtx.Translate(200, 50);\r\n								//{\r\n									//iCtx.TextAlign = \"right\";\r\n									////iCtx.FillText(\"AoA\", -10, 50);\r\n									//iCtx.FillText(\"AoA\", 0, -25);\r\n									\r\n									//iCtx.BeginPath();\r\n									//{\r\n										//this.Marks.Cross(iCtx, -50, -25);\r\n\r\n										//iCtx.MoveTo(0, 0);\r\n										//iCtx.LineTo(0, 200);\r\n\r\n										//iCtx.MoveTo(0,   0); iCtx.LineTo(-5,   0); iCtx.FillText(\"10.0\", -8,  0);\r\n										//iCtx.MoveTo(0,  50); iCtx.LineTo(-5,  50);\r\n										//iCtx.MoveTo(0, 100); iCtx.LineTo(-5, 100); iCtx.FillText(\"5.0\", -8,  100);\r\n										//iCtx.MoveTo(0, 150); iCtx.LineTo(-5, 150);\r\n										//iCtx.MoveTo(0, 200); iCtx.LineTo(-5, 200); iCtx.FillText(\"0.0\",  -8,  200);\r\n										////iCtx.MoveTo(0, 250); iCtx.LineTo(-5, 250); iCtx.FillText(\"  0.0\", -8,  250);\r\n									//}\r\n									//iCtx.Stroke();\r\n								//}\r\n								//iCtx.Restore();\r\n							}\r\n							Slip  :\r\n							{\r\n								//iCtx.Save();\r\n								//iCtx.Translate(200, 350);\r\n								//{\r\n									//iCtx.TextAlign = \"right\";\r\n									//iCtx.FillText(\"Slip\", 0,-25);\r\n									\r\n									//iCtx.BeginPath();\r\n									//{\r\n										//this.Marks.Cross(iCtx, -65, -25);\r\n\r\n										//iCtx.MoveTo(0, 0);\r\n										//iCtx.LineTo(0, 200);\r\n\r\n										//iCtx.MoveTo(0,   0); iCtx.LineTo(-5,   0); iCtx.FillText(\"+10\", -8,  0);\r\n										//iCtx.MoveTo(0,  50); iCtx.LineTo(-5,  50);\r\n										//iCtx.MoveTo(0, 100); iCtx.LineTo(-5, 100); iCtx.FillText(\"0\", -8,  100);\r\n										//iCtx.MoveTo(0, 150); iCtx.LineTo(-5, 150);\r\n										//iCtx.MoveTo(0, 200); iCtx.LineTo(-5, 200); iCtx.FillText(\"-10\", -8,  200);\r\n										////iCtx.MoveTo(0, 250); iCtx.LineTo(-5, 250); iCtx.FillText(\"  0.0\", -8,  250);\r\n									//}\r\n									//iCtx.Stroke();\r\n								//}\r\n								//iCtx.Restore();\r\n							}\r\n							IAS  : \r\n							 {\r\n								iCtx.Save();\r\n								iCtx.Translate(200, 800);\r\n								{\r\n									iCtx.TextAlign = \"right\";\r\n									iCtx.FillText(\"IAS\", 0,-25);\r\n									\r\n									iCtx.BeginPath();\r\n									{\r\n										this.Marks.Cross(iCtx, -50, -25);\r\n\r\n										iCtx.MoveTo(0, 0);\r\n										iCtx.LineTo(0, 250);\r\n\r\n										iCtx.MoveTo(0,   0); iCtx.LineTo(-5,   0);\r\n										iCtx.MoveTo(0,  50); iCtx.LineTo(-5,  50); iCtx.FillText(\"400.0\", -8,  50);\r\n										iCtx.MoveTo(0, 100); iCtx.LineTo(-5, 100);\r\n										iCtx.MoveTo(0, 150); iCtx.LineTo(-5, 150); iCtx.FillText(\"200.0\", -8,  150);\r\n										iCtx.MoveTo(0, 200); iCtx.LineTo(-5, 200);\r\n										iCtx.MoveTo(0, 250); iCtx.LineTo(-5, 250); iCtx.FillText(\"  0.0\", -8,  250);\r\n									}\r\n									iCtx.Stroke();\r\n								}\r\n								iCtx.Restore();\r\n							 }\r\n							VS :\r\n							 {\r\n								iCtx.Save();\r\n								iCtx.Translate(1500, 50);\r\n								{\r\n									iCtx.TextAlign = \"right\";\r\n\r\n									iCtx.FillText(\"VS\", 0,-25);\r\n									\r\n\r\n									\r\n									\r\n\r\n									iCtx.BeginPath();\r\n									{\r\n										this.Marks.Cross(iCtx, -50, -25);\r\n\r\n										iCtx.MoveTo(0,0);  iCtx.LineTo(0,200);\r\n\r\n										iCtx.MoveTo(0,0);   iCtx.LineTo(-5,0);   iCtx.FillText(\" 0.0\", -8,0);\r\n										iCtx.MoveTo(0,100); iCtx.LineTo(-5,100); iCtx.FillText(\"-50\", -8,100);\r\n										iCtx.MoveTo(0,200); iCtx.LineTo(-5,200); iCtx.FillText(\"-100\", -8,200);\r\n									}\r\n									iCtx.Stroke();\r\n								}\r\n								iCtx.Restore();\r\n							 }\r\n							\r\n							Bank : \r\n							 {\r\n								iCtx.Save();\r\n								iCtx.Translate(1500, 350);\r\n								{\r\n									iCtx.TextAlign = \"right\";\r\n\r\n									iCtx.FillText(\"Bank\", 0,-25);\r\n\r\n									iCtx.FillText(\"+40\", -8,0);\r\n									iCtx.FillText(\"  0\", -8,100);\r\n									iCtx.FillText(\"-40\", -8,200);\r\n\r\n									iCtx.BeginPath();\r\n									{\r\n										this.Marks.TriangleB(iCtx, -65, -25);\r\n										iCtx.MoveTo(0,  0); iCtx.LineTo( 0,200);\r\n\r\n										iCtx.MoveTo(0,  0); iCtx.LineTo(-5,  0);\r\n										iCtx.MoveTo(0, 50); iCtx.LineTo(-5, 50);\r\n										iCtx.MoveTo(0,100); iCtx.LineTo(-5,100);\r\n										iCtx.MoveTo(0,150); iCtx.LineTo(-5,150);\r\n										iCtx.MoveTo(0,200); iCtx.LineTo(-5,200);\r\n									}\r\n									iCtx.Stroke();\r\n								}\r\n								iCtx.Restore();\r\n							 }\r\n							SpdB : \r\n							 {\r\n								iCtx.Save();\r\n								iCtx.Translate(1500, 850);\r\n								{\r\n									iCtx.TextAlign = \"right\";\r\n\r\n									iCtx.FillText(\"SpdB\", 0,-25);\r\n\r\n									iCtx.FillText(\"80\", -8, 0);\r\n									iCtx.FillText(\"40\", -8, 100);\r\n									iCtx.FillText(\" 0\", -8, 200);\r\n\r\n									iCtx.BeginPath();\r\n									{\r\n										this.Marks.TriangleR(iCtx, -65, -25);\r\n\r\n										iCtx.MoveTo(0,  0); iCtx.LineTo( 0,200);\r\n\r\n										iCtx.MoveTo(0,  0); iCtx.LineTo(-5,  0);\r\n										iCtx.MoveTo(0, 50); iCtx.LineTo(-5, 50);\r\n										iCtx.MoveTo(0,100); iCtx.LineTo(-5,100);\r\n										iCtx.MoveTo(0,150); iCtx.LineTo(-5,150);\r\n										iCtx.MoveTo(0,200); iCtx.LineTo(-5,200);\r\n									}\r\n									iCtx.Stroke();\r\n								}\r\n								iCtx.Restore();\r\n							 }\r\n						 },\r\n\r\n						//ScaleXZ : function(iCtx)\r\n						 //{\r\n							\r\n						 //},\r\n						Marks        : \r\n						 {\r\n							TriangleT : function(iCtx, iX, iY)\r\n							 {\r\n								iCtx.MoveTo(iX,     iY - 3);\r\n\r\n								iCtx.LineTo(iX + 3, iY + 3);\r\n								iCtx.LineTo(iX - 3, iY + 3);\r\n								iCtx.LineTo(iX,     iY - 3);\r\n							 },\r\n							TriangleB : function(iCtx, iX, iY)\r\n							 {\r\n								iCtx.MoveTo(iX,     iY + 3);\r\n\r\n								iCtx.LineTo(iX - 3, iY - 3);\r\n								iCtx.LineTo(iX + 3, iY - 3);\r\n								iCtx.LineTo(iX,     iY + 3);\r\n							 },\r\n							TriangleL : function(iCtx, iX, iY)\r\n							 {\r\n								iCtx.MoveTo(iX - 3, iY);\r\n\r\n								iCtx.LineTo(iX + 3, iY - 3);\r\n								iCtx.LineTo(iX + 3, iY + 3);\r\n								iCtx.LineTo(iX - 3, iY);\r\n							 },\r\n							TriangleR : function(iCtx, iX, iY)\r\n							 {\r\n								iCtx.MoveTo(iX + 3, iY);\r\n\r\n								iCtx.LineTo(iX - 3, iY - 3);\r\n								iCtx.LineTo(iX - 3, iY + 3);\r\n								iCtx.LineTo(iX + 3, iY);\r\n							 },\r\n							PlusSign  : function(iCtx, iX, iY)\r\n							 {\r\n								iCtx.MoveTo(iX,     iY - 6);\r\n								iCtx.LineTo(iX,     iY + 6);\r\n\r\n								iCtx.MoveTo(iX - 6,     iY);\r\n								iCtx.LineTo(iX + 6,     iY);\r\n								//iCtx.MoveTo(\r\n							 },\r\n							\r\n							Cross     : function(iCtx, iX, iY)\r\n							 {\r\n								iCtx.MoveTo(iX - 6, iY - 6);\r\n								iCtx.LineTo(iX + 6, iY + 6);\r\n\r\n								iCtx.MoveTo(iX - 6, iY + 6);\r\n								iCtx.LineTo(iX + 6, iY - 6);\r\n							 },\r\n							BigCross     : function(iCtx, iX, iY)\r\n							 {\r\n								iCtx.MoveTo(iX - 10, iY - 10);\r\n								iCtx.LineTo(iX + 10, iY + 10);\r\n\r\n								iCtx.MoveTo(iX - 10, iY + 10);\r\n								iCtx.LineTo(iX + 10, iY - 10);\r\n							 },\r\n							DotSign   : function(iCtx, iX, iY)\r\n							 {\r\n								//~~ Dot;\r\n								iCtx.AddRect(iX - 2, iY - 2, 4, 4);\r\n							 },\r\n						 },\r\n\r\n						Batch        : function(iCtx, iSeries, iCursorI, iDetL)\r\n						 {\r\n							if(iDetL == undefined) iDetL = 1;\r\n\r\n							var fDrawGraph = function(iField, iColor, iStyle, iOffs, iMult)\r\n							{\r\n								var _IsPosV = iField == \"X\" || iField == \"Z\";//.StartsWith(\"Position\");\r\n								\r\n								iCtx.BeginPath();\r\n								{\r\n									//for(var cV,Vi = 0; cV = iVV[Vi], Vi < iVV.Length; Vi++)\r\n									var _LastMarkX = 0, _LastMarkY = 0;\r\n\r\n									for(var _EE = iSeries.Entries, cE,Ei = 0; cE = _EE[Ei], Ei < _EE.Length; Ei += 1 / iDetL)\r\n									{\r\n										var cV = cE.Value;\r\n\r\n										var cX = cV.Position.Y / 40;\r\n										var cY = iOffs + ((_IsPosV ? cV.Position[iField] : cV[iField]) * iMult);\r\n\r\n										if(cY == undefined) continue;\r\n										\r\n										iCtx.LineTo(cX,cY);\r\n\r\n										if(Abs(cX - _LastMarkX) > 100 || Abs(cY - _LastMarkY) > 100)\r\n										{\r\n											ApproachDiagram.Drawing.Graph.Marks[iStyle](iCtx, cX, cY);\r\n											_LastMarkX = cX, _LastMarkY = cY;\r\n										}\r\n\r\n										if(Ei == iCursorI)\r\n										{\r\n											ApproachDiagram.Drawing.Graph.Marks[\"BigCross\"](iCtx, cX, cY);\r\n											iCtx.MoveTo(cX,cY);\r\n											//_LastMarkX = cX, _LastMarkY = cY;\r\n										}\r\n										\r\n									}\r\n									\r\n								}\r\n								iCtx.StrokeStyle = iColor;\r\n								iCtx.Stroke();\r\n							}\r\n\r\n							iCtx.Save();\r\n							iCtx.Translate(800, 550);\r\n							{\r\n								fDrawGraph(\"X\",     \"#00ff00\", \"TriangleT\",    0,  +0.025);\r\n								fDrawGraph(\"Z\",     \"#00ccff\", \"TriangleT\", +500,  -0.050);\r\n								\r\n								fDrawGraph(\"MSpd\",  \"#ff6666\", \"TriangleT\", +500,    -250);\r\n								fDrawGraph(\"IAS\",   \"#ffff00\", \"TriangleT\", +500,    -0.5);\r\n\r\n								fDrawGraph(\"Vel\",   \"#ffffff\", \"TriangleT\", +500,    -1.0);\r\n								\r\n								fDrawGraph(\"VSpd\",  \"#ff6666\", \"TriangleT\", -500,    -2.0);\r\n								fDrawGraph(\"VSpd2\", \"#ffff00\", \"TriangleT\", -500,    -2.0);\r\n								\r\n\r\n								fDrawGraph(\"Bank\",  \"#ffaaff\", \"TriangleT\", -100,    -2.5);\r\n								fDrawGraph(\"SpdB\",  \"#ffaaff\", \"TriangleT\", +500,    -2.5);\r\n\r\n								//_DrawGraph(\"FiEng\",      \"#aaaaaa\", \"TriangleT\",    0,    -100);\r\n							}\r\n							iCtx.Restore();\r\n						 }\r\n					},\r\n					\r\n					Indicators : \r\n					{\r\n						Attitude  : function(iCtx, iValue, iX, iY)\r\n						 {\r\n							iCtx.Save();\r\n							iCtx.Translate(iX,iY);\r\n							iCtx.StrokeRect(-100, -100, 200, 200);\r\n							iCtx.StrokeRect(-1, -1, 2, 2);\r\n\r\n							iCtx.BeginPath();\r\n							iCtx.AddArc(0,0,110, D180 + (D090 / 2), -D090 / 2);\r\n							iCtx.LineWidth = 10;\r\n							//iCtx.StrokeStyle = \"#ffffff\";\r\n							iCtx.Stroke();\r\n\r\n							\r\n\r\n							iCtx.BeginPath();\r\n							{\r\n								iCtx.MoveTo(0,-100);\r\n								iCtx.LineTo(0,   0);\r\n								\r\n								iCtx.LineWidth = 1;\r\n								iCtx.Stroke();\r\n							}\r\n\r\n							//iCtx.BeginPath();\r\n							//{\r\n								//iCtx.MoveTo(-100,-100);\r\n								//iCtx.LineTo(+100,-100);\r\n\r\n								//iCtx.MoveTo(- 100,-100); iCtx.LineTo(-100,-80);\r\n\r\n								//iCtx.MoveTo(-83.9,-100); iCtx.LineTo(-83.9,-80);\r\n								//iCtx.MoveTo(-57.7,-100); iCtx.LineTo(-57.7,-80);\r\n								//iCtx.MoveTo(-36.4,-100); iCtx.LineTo(-36.4,-80);\r\n								//iCtx.MoveTo(-17.5,-100); iCtx.LineTo(-17.5,-80);\r\n								//iCtx.MoveTo(    0,-100); iCtx.LineTo(    0,-80);\r\n\r\n								//iCtx.MoveTo(+ 100,-100); iCtx.LineTo(+100,-80);\r\n\r\n								////10 = 17.63\r\n								////20 = 36.39\r\n								////30 = 57.73\r\n								////40 = 83.91\r\n								\r\n\r\n\r\n								//iCtx.StrokeStyle = \"#ffffff\";\r\n								//iCtx.Stroke();\r\n							//}\r\n							\r\n							\r\n							//iCtx.Translate(0,0);\r\n							iCtx.Rotate(iValue.Bank / 180 * PI);\r\n\r\n							\r\n\r\n\r\n							//iCtx.Rotate(PI/2);\r\n							iCtx.BeginPath();\r\n							iCtx.AddCircle(0,-110, 10);\r\n							iCtx.Fill();\r\n\r\n							iCtx.BeginPath();\r\n							iCtx.AddArc(0,0,95, D180 - (D090 / 2), +D090 / 2, true);\r\n							iCtx.LineWidth = 10;\r\n							//iCtx.StrokeStyle = \"#ffffff\";\r\n							iCtx.Stroke();\r\n\r\n\r\n							//iCtx.StrokeStyle = iColor;\r\n							//iCtx.FillStyle   = iColor;\r\n							iCtx.LineWidth   = 1;\r\n							\r\n							iCtx.BeginPath();\r\n							{\r\n								//var _PP = \r\n								//[\r\n									//+2,   -95,\r\n									//+3,   -30,\r\n\r\n									//+10,  -29,\r\n									//+20,  -25,\r\n									//+27,  -15,\r\n									//+27,  +18,\r\n									//+100, +20,\r\n									//+100, +24,\r\n\r\n									//+20, +27,\r\n									//-20, +27,\r\n\r\n									//-100, +24,\r\n									//-100, +20,\r\n									//-27, +18,\r\n									//-27, -15,\r\n									//-20, -25,\r\n									//-10, -29,\r\n									//-3, -30,\r\n									//-2, -95\r\n								//];\r\n\r\n								//for(var Pi = 0; Pi < _PP.Length; Pi += 2) iCtx.LineTo(  +3, -30);\r\n\r\n								//[].ForEach();\r\n								iCtx.MoveTo(  +2, -95);\r\n								iCtx.LineTo(  +3, -30);\r\n\r\n								iCtx.LineTo( +10, -29);\r\n								iCtx.LineTo( +20, -25);\r\n								iCtx.LineTo( +27, -15);\r\n								iCtx.LineTo( +27, +18);\r\n								iCtx.LineTo(+100, +20);\r\n								iCtx.LineTo(+100, +24);\r\n\r\n								iCtx.LineTo( +20, +27);\r\n								iCtx.LineTo( -20, +27);\r\n\r\n								iCtx.LineTo(-100, +24);\r\n								iCtx.LineTo(-100, +20);\r\n								iCtx.LineTo( -27, +18);\r\n								iCtx.LineTo( -27, -15);\r\n								iCtx.LineTo( -20, -25);\r\n								iCtx.LineTo( -10, -29);\r\n								iCtx.LineTo(  -3, -30);\r\n								iCtx.LineTo(  -2, -95);\r\n\r\n								iCtx.ClosePath();\r\n\r\n								\r\n								iCtx.FillStyle = \"#aaaaaa\";\r\n								iCtx.Fill();\r\n								iCtx.Stroke();\r\n							}\r\n							\r\n\r\n							//iCtx.FillRect(-100,-10,200,20);\r\n							iCtx.Restore();\r\n						 },\r\n						Speeds    : function(iCtx, iValue, iX, iY)\r\n						 {\r\n							iCtx.Save();\r\n							iCtx.Translate(iX,iY);\r\n							\r\n							iCtx.StrokeRect(0,0,125,200);\r\n							//iCtx.FillStyle = \"#ffffff\";\r\n\r\n\r\n							//iCtx.TextAlign = \"left\";\r\n							//iCtx.FillText(\"IAS\",  25,  25);\r\n							//iCtx.FillText(\"MaS\",  25,  50);\r\n							//iCtx.FillText(\"GrS\",  25,  75);\r\n\r\n							//iCtx.FillText(\"AoA\",  25,  125);\r\n\r\n							//iCtx.TextAlign = \"right\";\r\n							//iCtx.FillText(iValue.IAS, 125, 25);\r\n							//iCtx.FillText(iValue.M, 125, 50);\r\n							//iCtx.FillText(iValue.AoA, 125, 75);\r\n							\r\n\r\n							iCtx.TextAlign = \"left\";\r\n\r\n							iCtx.FillText(\"IAS\",  80,  25);\r\n							iCtx.FillText(\"TAS\",  80,  50);\r\n							iCtx.FillText(\"MaS\",  80,  75);\r\n							iCtx.FillText(\"GrS\",  80,  100);\r\n							//iCtx.FillText(\"Acc\",  80,  125);\r\n\r\n							iCtx.FillText(\"AoA\",  80,  150);\r\n\r\n							iCtx.TextAlign = \"right\";\r\n\r\n							iCtx.FillText(iValue.IAS.ToFixed(0), 70,  25);\r\n							//iCtx.FillText(iValue.TAS.ToFixed(0), 70,  50);\r\n							iCtx.FillText(iValue.MSpd.ToFixed(2), 70,  75);\r\n							//iCtx.FillText(iValue.GrS.ToFixed(0), 70, 100);\r\n							//iCtx.FillText(iValue.AoA.ToFixed(1), 70, 150);\r\n							\r\n\r\n							iCtx.Restore();\r\n						 },\r\n						Verticals : function(iCtx, iValue, iX, iY)\r\n						 {\r\n							iCtx.Save();\r\n							iCtx.Translate(iX,iY);\r\n							\r\n							iCtx.StrokeRect(0,0,125,200);\r\n\r\n\r\n							//iCtx.TextAlign = \"left\";\r\n							//iCtx.FillText(\"IAS\",  25,  25);\r\n							//iCtx.FillText(\"MaS\",  25,  50);\r\n							//iCtx.FillText(\"GrS\",  25,  75);\r\n\r\n							//iCtx.FillText(\"AoA\",  25,  125);\r\n\r\n							//iCtx.TextAlign = \"right\";\r\n							//iCtx.FillText(iValue.IAS, 125, 25);\r\n							//iCtx.FillText(iValue.M, 125, 50);\r\n							//iCtx.FillText(iValue.AoA, 125, 75);\r\n							\r\n\r\n							iCtx.TextAlign = \"left\";\r\n\r\n							iCtx.FillText(\"VAlt\",  80,  25);\r\n							//iCtx.FillText(\"BAlt\",  80,  50);\r\n							//iCtx.FillText(\"RAlt\",  80,  75);\r\n\r\n							iCtx.FillText(\"VSpd\",  80,  100);\r\n							//iCtx.FillText(\"AoA\",   80,  150);\r\n\r\n							iCtx.TextAlign = \"right\";\r\n\r\n							iCtx.FillText(iValue.Position.Z.ToString2(3), 70,  25);\r\n							//iCtx.FillText(iValue.VAlt.ToFixed(0), 70,  25);\r\n							//iCtx.FillText(iValue.BAlt.ToFixed(0), 70,  50);\r\n							//iCtx.FillText(iValue.RAlt.ToFixed(2), 70,  75);\r\n							iCtx.FillText(iValue.VSpd.ToFixed(0), 70, 100);\r\n							//iCtx.FillText(iValue.AoA.ToFixed(1), 70, 150);\r\n							\r\n\r\n							iCtx.Restore();\r\n						 },\r\n						TSData    : function(iCtx, iValue, iX, iY)\r\n						 {\r\n							var _OffsT = 0;//33521;\r\n\r\n							iCtx.Save();\r\n							iCtx.Translate(iX,iY);\r\n							{\r\n								iCtx.FillText(\"SimT: \" + iValue.Time.ToString2(3, false), 0, 0);\r\n								//iCtx.FillText(\"CurT: \" + (_OffsT + iValue.Time).ToString2(3, false) + \" = \" + new Date(1988,10,15,0,0, _OffsT + iValue.Time).toString(), 0, 20);\r\n								//iCtx.FillText(\"FrnT: \" + , 0, 40);\r\n							}\r\n							iCtx.Restore();\r\n						 },\r\n						Position  : function(iCtx, iValue, iX, iY)\r\n						 {\r\n							iCtx.Save();\r\n							iCtx.Translate(iX,iY);\r\n							{\r\n								iCtx.FillText(\"X: \" + iValue.Position.X.ToString2(3), 0, 0);\r\n								iCtx.FillText(\"Y: \" + iValue.Position.Y.ToString2(3), 0, 20);\r\n								iCtx.FillText(\"Z: \" + iValue.Position.Z.ToString2(3), 0, 40);\r\n								//iCtx.FillText(\"CurT: \" + (_OffsT + iValue.Time).ToString2(3, false) + \" = \" + new Date(1988,10,15,0,0, _OffsT + iValue.Time).toTimeString(), 0, 20);\r\n								//iCtx.FillText(\"FrnT: \" + , 0, 40);\r\n							}\r\n							iCtx.Restore();\r\n						 },\r\n					}\r\n				}\r\n			},\r\n		 },\r\n	 }\r\n});",
	"../UVS/Imaging/Buran.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'THREE : *, -Math'     ,\r\n		'Math  : *, -Geometry' ,\r\n		//'Math.Geometry'        ,\r\n	],\r\n	'UVS.Imaging.Routines' :\r\n	 {\r\n		BuranGeometry :\r\n		 {\r\n			LandingGears : {get once(){return { position: { itemSize: 3, array: new Float32Array([ -0.627,-2.763,-3.582,-0.627,-1.695,-3.582,0.626,-1.695,-3.582,0.626,-1.695,-3.582,0.626,-2.763,-3.582,-0.627,-2.763,-3.582,-0.627,-2.763,-2.552,0.626,-2.763,-2.552,0.626,-1.695,-2.552,0.626,-1.695,-2.552,-0.627,-1.695,-2.552,-0.627,-2.763,-2.552,-0.627,-2.763,-3.582,0.626,-2.763,-3.582,0.626,-2.763,-2.552,0.626,-2.763,-2.552,-0.627,-2.763,-2.552,-0.627,-2.763,-3.582,0.626,-2.763,-3.582,0.626,-1.695,-3.582,0.626,-1.695,-2.552,0.626,-1.695,-2.552,0.626,-2.763,-2.552,0.626,-2.763,-3.582,0.626,-1.695,-3.582,-0.627,-1.695,-3.582,-0.627,-1.695,-2.552,-0.627,-1.695,-2.552,0.626,-1.695,-2.552,0.626,-1.695,-3.582,-0.627,-1.695,-3.582,-0.627,-2.763,-3.582,-0.627,-2.763,-2.552,-0.627,-2.763,-2.552,-0.627,-1.695,-2.552,-0.627,-1.695,-3.582,-4.242,-4.550,-5.376,-4.332,-4.474,-7.318,-4.325,-0.866,-7.193,-4.325,-0.866,-7.193,-4.242,-0.967,-5.297,-4.242,-4.550,-5.376,-4.286,-4.550,-5.374,-4.286,-0.967,-5.294,-4.369,-0.866,-7.190,-4.369,-0.866,-7.190,-4.376,-4.474,-7.316,-4.286,-4.550,-5.374,-4.376,-4.474,-7.316,-4.369,-0.866,-7.190,-4.325,-0.866,-7.193,-4.325,-0.866,-7.193,-4.332,-4.474,-7.318,-4.376,-4.474,-7.316,-4.286,-4.550,-5.374,-4.376,-4.474,-7.316,-4.332,-4.474,-7.318,-4.332,-4.474,-7.318,-4.242,-4.550,-5.376,-4.286,-4.550,-5.374,-4.286,-0.967,-5.294,-4.286,-4.550,-5.374,-4.242,-4.550,-5.376,-4.242,-4.550,-5.376,-4.242,-0.967,-5.297,-4.286,-0.967,-5.294,-4.369,-0.866,-7.190,-4.286,-0.967,-5.294,-4.242,-0.967,-5.297,-4.242,-0.967,-5.297,-4.325,-0.866,-7.193,-4.369,-0.866,-7.190,-3.741,-3.497,-8.181,-3.741,-3.147,-7.575,-3.741,-3.497,-6.969,-3.741,-3.497,-6.969,-3.741,-4.197,-6.969,-3.741,-4.547,-7.575,-3.741,-3.497,-8.181,-3.741,-3.497,-6.969,-3.741,-4.547,-7.575,-3.741,-4.197,-8.181,-3.741,-3.497,-8.181,-3.741,-4.547,-7.575,-3.741,-4.547,-7.575,-3.741,-4.197,-6.969,-4.141,-4.197,-6.969,-4.141,-4.197,-6.969,-4.141,-4.547,-7.575,-3.741,-4.547,-7.575,-3.741,-4.197,-6.969,-3.741,-3.497,-6.969,-4.141,-3.497,-6.969,-4.141,-3.497,-6.969,-4.141,-4.197,-6.969,-3.741,-4.197,-6.969,-3.741,-3.497,-6.969,-3.741,-3.147,-7.575,-4.141,-3.147,-7.575,-4.141,-3.147,-7.575,-4.141,-3.497,-6.969,-3.741,-3.497,-6.969,-3.741,-3.147,-7.575,-3.741,-3.497,-8.181,-4.141,-3.497,-8.181,-4.141,-3.497,-8.181,-4.141,-3.147,-7.575,-3.741,-3.147,-7.575,-3.741,-3.497,-8.181,-3.741,-4.197,-8.181,-4.141,-4.197,-8.181,-4.141,-4.197,-8.181,-4.141,-3.497,-8.181,-3.741,-3.497,-8.181,-3.741,-4.197,-8.181,-3.741,-4.547,-7.575,-4.141,-4.547,-7.575,-4.141,-4.547,-7.575,-4.141,-4.197,-8.181,-3.741,-4.197,-8.181,-4.141,-4.547,-7.575,-4.141,-4.197,-6.969,-4.141,-3.497,-6.969,-4.141,-3.497,-6.969,-4.141,-3.147,-7.575,-4.141,-3.497,-8.181,-4.141,-4.547,-7.575,-4.141,-3.497,-6.969,-4.141,-3.497,-8.181,-4.141,-4.197,-8.181,-4.141,-4.547,-7.575,-4.141,-3.497,-8.181,-2.862,-3.497,-8.181,-2.862,-3.147,-7.575,-2.862,-3.497,-6.969,-2.862,-3.497,-6.969,-2.862,-4.197,-6.969,-2.862,-4.547,-7.575,-2.862,-3.497,-8.181,-2.862,-3.497,-6.969,-2.862,-4.547,-7.575,-2.862,-4.197,-8.181,-2.862,-3.497,-8.181,-2.862,-4.547,-7.575,-2.862,-4.547,-7.575,-2.862,-4.197,-6.969,-3.262,-4.197,-6.969,-3.262,-4.197,-6.969,-3.262,-4.547,-7.575,-2.862,-4.547,-7.575,-2.862,-4.197,-6.969,-2.862,-3.497,-6.969,-3.262,-3.497,-6.969,-3.262,-3.497,-6.969,-3.262,-4.197,-6.969,-2.862,-4.197,-6.969,-2.862,-3.497,-6.969,-2.862,-3.147,-7.575,-3.262,-3.147,-7.575,-3.262,-3.147,-7.575,-3.262,-3.497,-6.969,-2.862,-3.497,-6.969,-2.862,-3.147,-7.575,-2.862,-3.497,-8.181,-3.262,-3.497,-8.181,-3.262,-3.497,-8.181,-3.262,-3.147,-7.575,-2.862,-3.147,-7.575,-2.862,-3.497,-8.181,-2.862,-4.197,-8.181,-3.262,-4.197,-8.181,-3.262,-4.197,-8.181,-3.262,-3.497,-8.181,-2.862,-3.497,-8.181,-2.862,-4.197,-8.181,-2.862,-4.547,-7.575,-3.262,-4.547,-7.575,-3.262,-4.547,-7.575,-3.262,-4.197,-8.181,-2.862,-4.197,-8.181,-3.262,-4.547,-7.575,-3.262,-4.197,-6.969,-3.262,-3.497,-6.969,-3.262,-3.497,-6.969,-3.262,-3.147,-7.575,-3.262,-3.497,-8.181,-3.262,-4.547,-7.575,-3.262,-3.497,-6.969,-3.262,-3.497,-8.181,-3.262,-4.197,-8.181,-3.262,-4.547,-7.575,-3.262,-3.497,-8.181,-0.171,9.256,-7.361,-0.171,9.481,-6.971,-0.171,9.256,-6.581,-0.171,9.256,-6.581,-0.171,8.806,-6.581,-0.171,8.581,-6.971,-0.171,9.256,-7.361,-0.171,9.256,-6.581,-0.171,8.581,-6.971,-0.171,8.806,-7.361,-0.171,9.256,-7.361,-0.171,8.581,-6.971,-0.171,8.581,-6.971,-0.171,8.806,-6.581,-0.471,8.806,-6.581,-0.471,8.806,-6.581,-0.471,8.581,-6.971,-0.171,8.581,-6.971,-0.171,8.806,-6.581,-0.171,9.256,-6.581,-0.471,9.256,-6.581,-0.471,9.256,-6.581,-0.471,8.806,-6.581,-0.171,8.806,-6.581,-0.171,9.256,-6.581,-0.171,9.481,-6.971,-0.471,9.481,-6.971,-0.471,9.481,-6.971,-0.471,9.256,-6.581,-0.171,9.256,-6.581,-0.171,9.481,-6.971,-0.171,9.256,-7.361,-0.471,9.256,-7.361,-0.471,9.256,-7.361,-0.471,9.481,-6.971,-0.171,9.481,-6.971,-0.171,9.256,-7.361,-0.171,8.806,-7.361,-0.471,8.806,-7.361,-0.471,8.806,-7.361,-0.471,9.256,-7.361,-0.171,9.256,-7.361,-0.171,8.806,-7.361,-0.171,8.581,-6.971,-0.471,8.581,-6.971,-0.471,8.581,-6.971,-0.471,8.806,-7.361,-0.171,8.806,-7.361,-0.471,8.581,-6.971,-0.471,8.806,-6.581,-0.471,9.256,-6.581,-0.471,9.256,-6.581,-0.471,9.481,-6.971,-0.471,9.256,-7.361,-0.471,8.581,-6.971,-0.471,9.256,-6.581,-0.471,9.256,-7.361,-0.471,8.806,-7.361,-0.471,8.581,-6.971,-0.471,9.256,-7.361,0.471,9.256,-7.361,0.471,9.481,-6.971,0.471,9.256,-6.581,0.471,9.256,-6.581,0.471,8.806,-6.581,0.471,8.581,-6.971,0.471,9.256,-7.361,0.471,9.256,-6.581,0.471,8.581,-6.971,0.471,8.806,-7.361,0.471,9.256,-7.361,0.471,8.581,-6.971,0.471,8.581,-6.971,0.471,8.806,-6.581,0.171,8.806,-6.581,0.171,8.806,-6.581,0.171,8.581,-6.971,0.471,8.581,-6.971,0.471,8.806,-6.581,0.471,9.256,-6.581,0.171,9.256,-6.581,0.171,9.256,-6.581,0.171,8.806,-6.581,0.471,8.806,-6.581,0.471,9.256,-6.581,0.471,9.481,-6.971,0.171,9.481,-6.971,0.171,9.481,-6.971,0.171,9.256,-6.581,0.471,9.256,-6.581,0.471,9.481,-6.971,0.471,9.256,-7.361,0.171,9.256,-7.361,0.171,9.256,-7.361,0.171,9.481,-6.971,0.471,9.481,-6.971,0.471,9.256,-7.361,0.471,8.806,-7.361,0.171,8.806,-7.361,0.171,8.806,-7.361,0.171,9.256,-7.361,0.471,9.256,-7.361,0.471,8.806,-7.361,0.471,8.581,-6.971,0.171,8.581,-6.971,0.171,8.581,-6.971,0.171,8.806,-7.361,0.471,8.806,-7.361,0.171,8.581,-6.971,0.171,8.806,-6.581,0.171,9.256,-6.581,0.171,9.256,-6.581,0.171,9.481,-6.971,0.171,9.256,-7.361,0.171,8.581,-6.971,0.171,9.256,-6.581,0.171,9.256,-7.361,0.171,8.806,-7.361,0.171,8.581,-6.971,0.171,9.256,-7.361,0.802,6.644,-5.547,0.802,6.644,-6.674,0.802,8.908,-6.674,0.802,8.908,-6.674,0.802,8.908,-5.469,0.802,6.644,-5.547,0.762,6.644,-5.547,0.762,8.908,-5.469,0.762,8.908,-6.674,0.762,8.908,-6.674,0.762,6.644,-6.674,0.762,6.644,-5.547,0.762,6.644,-6.674,0.762,8.908,-6.674,0.802,8.908,-6.674,0.802,8.908,-6.674,0.802,6.644,-6.674,0.762,6.644,-6.674,0.762,6.644,-5.547,0.762,6.644,-6.674,0.802,6.644,-6.674,0.802,6.644,-6.674,0.802,6.644,-5.547,0.762,6.644,-5.547,0.762,8.908,-5.469,0.762,6.644,-5.547,0.802,6.644,-5.547,0.802,6.644,-5.547,0.802,8.908,-5.469,0.762,8.908,-5.469,0.762,8.908,-6.674,0.762,8.908,-5.469,0.802,8.908,-5.469,0.802,8.908,-5.469,0.802,8.908,-6.674,0.762,8.908,-6.674,-3.408,-3.935,-7.759,-3.408,-3.765,-7.759,-3.408,-3.765,-5.060,-3.408,-3.765,-5.060,-3.408,-3.935,-5.060,-3.408,-3.935,-7.759,-3.408,-3.765,-7.759,-3.578,-3.765,-7.759,-3.578,-3.765,-5.060,-3.578,-3.765,-5.060,-3.408,-3.765,-5.060,-3.408,-3.765,-7.759,-3.578,-3.765,-7.759,-3.578,-3.935,-7.759,-3.578,-3.935,-5.060,-3.578,-3.935,-5.060,-3.578,-3.765,-5.060,-3.578,-3.765,-7.759,-3.578,-3.935,-7.759,-3.408,-3.935,-7.759,-3.408,-3.935,-5.060,-3.408,-3.935,-5.060,-3.578,-3.935,-5.060,-3.578,-3.935,-7.759,-3.408,-3.935,-5.060,-3.408,-3.765,-5.060,-3.578,-3.765,-5.060,-3.578,-3.765,-5.060,-3.578,-3.935,-5.060,-3.408,-3.935,-5.060,-3.408,-3.765,-7.759,-3.408,-3.935,-7.759,-3.578,-3.935,-7.759,-3.578,-3.935,-7.759,-3.578,-3.765,-7.759,-3.408,-3.765,-7.759,4.325,-0.866,-7.193,4.331,-4.474,-7.318,4.241,-4.550,-5.376,4.241,-4.550,-5.376,4.242,-0.967,-5.297,4.325,-0.866,-7.193,4.369,-0.866,-7.190,4.286,-0.967,-5.294,4.285,-4.550,-5.374,4.285,-4.550,-5.374,4.375,-4.474,-7.316,4.369,-0.866,-7.190,4.325,-0.866,-7.193,4.369,-0.866,-7.190,4.375,-4.474,-7.316,4.375,-4.474,-7.316,4.331,-4.474,-7.318,4.325,-0.866,-7.193,4.331,-4.474,-7.318,4.375,-4.474,-7.316,4.285,-4.550,-5.374,4.285,-4.550,-5.374,4.241,-4.550,-5.376,4.331,-4.474,-7.318,4.241,-4.550,-5.376,4.285,-4.550,-5.374,4.286,-0.967,-5.294,4.286,-0.967,-5.294,4.242,-0.967,-5.297,4.241,-4.550,-5.376,4.242,-0.967,-5.297,4.286,-0.967,-5.294,4.369,-0.866,-7.190,4.369,-0.866,-7.190,4.325,-0.866,-7.193,4.242,-0.967,-5.297,3.741,-4.547,-7.575,3.741,-4.197,-6.969,3.741,-3.497,-6.969,3.741,-3.497,-6.969,3.741,-3.147,-7.575,3.741,-3.497,-8.181,3.741,-4.547,-7.575,3.741,-3.497,-6.969,3.741,-3.497,-8.181,3.741,-4.197,-8.181,3.741,-4.547,-7.575,3.741,-3.497,-8.181,4.141,-4.197,-6.969,3.741,-4.197,-6.969,3.741,-4.547,-7.575,3.741,-4.547,-7.575,4.141,-4.547,-7.575,4.141,-4.197,-6.969,4.141,-3.497,-6.969,3.741,-3.497,-6.969,3.741,-4.197,-6.969,3.741,-4.197,-6.969,4.141,-4.197,-6.969,4.141,-3.497,-6.969,4.141,-3.147,-7.575,3.741,-3.147,-7.575,3.741,-3.497,-6.969,3.741,-3.497,-6.969,4.141,-3.497,-6.969,4.141,-3.147,-7.575,4.141,-3.497,-8.181,3.741,-3.497,-8.181,3.741,-3.147,-7.575,3.741,-3.147,-7.575,4.141,-3.147,-7.575,4.141,-3.497,-8.181,4.141,-4.197,-8.181,3.741,-4.197,-8.181,3.741,-3.497,-8.181,3.741,-3.497,-8.181,4.141,-3.497,-8.181,4.141,-4.197,-8.181,4.141,-4.547,-7.575,3.741,-4.547,-7.575,3.741,-4.197,-8.181,3.741,-4.197,-8.181,4.141,-4.197,-8.181,4.141,-4.547,-7.575,4.141,-3.497,-8.181,4.141,-3.147,-7.575,4.141,-3.497,-6.969,4.141,-3.497,-6.969,4.141,-4.197,-6.969,4.141,-4.547,-7.575,4.141,-3.497,-8.181,4.141,-3.497,-6.969,4.141,-4.547,-7.575,4.141,-4.197,-8.181,4.141,-3.497,-8.181,4.141,-4.547,-7.575,2.862,-4.547,-7.575,2.862,-4.197,-6.969,2.862,-3.497,-6.969,2.862,-3.497,-6.969,2.862,-3.147,-7.575,2.862,-3.497,-8.181,2.862,-4.547,-7.575,2.862,-3.497,-6.969,2.862,-3.497,-8.181,2.862,-4.197,-8.181,2.862,-4.547,-7.575,2.862,-3.497,-8.181,3.262,-4.197,-6.969,2.862,-4.197,-6.969,2.862,-4.547,-7.575,2.862,-4.547,-7.575,3.262,-4.547,-7.575,3.262,-4.197,-6.969,3.262,-3.497,-6.969,2.862,-3.497,-6.969,2.862,-4.197,-6.969,2.862,-4.197,-6.969,3.262,-4.197,-6.969,3.262,-3.497,-6.969,3.262,-3.147,-7.575,2.862,-3.147,-7.575,2.862,-3.497,-6.969,2.862,-3.497,-6.969,3.262,-3.497,-6.969,3.262,-3.147,-7.575,3.262,-3.497,-8.181,2.862,-3.497,-8.181,2.862,-3.147,-7.575,2.862,-3.147,-7.575,3.262,-3.147,-7.575,3.262,-3.497,-8.181,3.262,-4.197,-8.181,2.862,-4.197,-8.181,2.862,-3.497,-8.181,2.862,-3.497,-8.181,3.262,-3.497,-8.181,3.262,-4.197,-8.181,3.262,-4.547,-7.575,2.862,-4.547,-7.575,2.862,-4.197,-8.181,2.862,-4.197,-8.181,3.262,-4.197,-8.181,3.262,-4.547,-7.575,3.262,-3.497,-8.181,3.262,-3.147,-7.575,3.262,-3.497,-6.969,3.262,-3.497,-6.969,3.262,-4.197,-6.969,3.262,-4.547,-7.575,3.262,-3.497,-8.181,3.262,-3.497,-6.969,3.262,-4.547,-7.575,3.262,-4.197,-8.181,3.262,-3.497,-8.181,3.262,-4.547,-7.575,3.407,-3.765,-5.060,3.407,-3.765,-7.759,3.407,-3.935,-7.759,3.407,-3.935,-7.759,3.407,-3.935,-5.060,3.407,-3.765,-5.060,3.577,-3.765,-5.060,3.577,-3.765,-7.759,3.407,-3.765,-7.759,3.407,-3.765,-7.759,3.407,-3.765,-5.060,3.577,-3.765,-5.060,3.577,-3.935,-5.060,3.577,-3.935,-7.759,3.577,-3.765,-7.759,3.577,-3.765,-7.759,3.577,-3.765,-5.060,3.577,-3.935,-5.060,3.407,-3.935,-5.060,3.407,-3.935,-7.759,3.577,-3.935,-7.759,3.577,-3.935,-7.759,3.577,-3.935,-5.060,3.407,-3.935,-5.060,3.577,-3.765,-5.060,3.407,-3.765,-5.060,3.407,-3.935,-5.060,3.407,-3.935,-5.060,3.577,-3.935,-5.060,3.577,-3.765,-5.060,3.577,-3.935,-7.759,3.407,-3.935,-7.759,3.407,-3.765,-7.759,3.407,-3.765,-7.759,3.577,-3.765,-7.759,3.577,-3.935,-7.759,-0.075,9.113,-5.467,-0.075,9.113,-7.088,-0.075,8.964,-7.088,-0.075,8.964,-7.088,-0.075,8.964,-5.467,-0.075,9.113,-5.467,0.075,9.113,-5.467,0.075,9.113,-7.088,-0.075,9.113,-7.088,-0.075,9.113,-7.088,-0.075,9.113,-5.467,0.075,9.113,-5.467,0.075,8.964,-5.467,0.075,8.964,-7.088,0.075,9.113,-7.088,0.075,9.113,-7.088,0.075,9.113,-5.467,0.075,8.964,-5.467,-0.075,8.964,-5.467,-0.075,8.964,-7.088,0.075,8.964,-7.088,0.075,8.964,-7.088,0.075,8.964,-5.467,-0.075,8.964,-5.467,0.075,9.113,-5.467,-0.075,9.113,-5.467,-0.075,8.964,-5.467,-0.075,8.964,-5.467,0.075,8.964,-5.467,0.075,9.113,-5.467,0.075,8.964,-7.088,-0.075,8.964,-7.088,-0.075,9.113,-7.088,-0.075,9.113,-7.088,0.075,9.113,-7.088,0.075,8.964,-7.088])},normal:{itemSize:3,array:new Float32Array([0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,0.999,-0.000,-0.046,0.999,-0.000,-0.046,0.999,-0.000,-0.046,0.999,0.001,-0.044,0.999,0.001,-0.044,0.999,0.001,-0.044,-0.999,-0.001,0.044,-0.999,-0.001,0.044,-0.999,-0.001,0.044,-0.999,0.000,0.046,-0.999,0.000,0.046,-0.999,0.000,0.046,-0.052,0.035,-0.998,-0.052,0.035,-0.998,-0.052,0.035,-0.998,-0.052,0.035,-0.998,-0.052,0.035,-0.998,-0.052,0.035,-0.998,-0.002,-0.999,-0.039,-0.002,-0.999,-0.039,-0.002,-0.999,-0.039,-0.002,-0.999,-0.039,-0.002,-0.999,-0.039,-0.002,-0.999,-0.039,0.052,-0.022,0.998,0.052,-0.022,0.998,0.052,-0.022,0.998,0.052,-0.022,0.998,0.052,-0.022,0.998,0.052,-0.022,0.998,0.003,0.999,0.053,0.003,0.999,0.053,0.003,0.999,0.053,0.003,0.999,0.053,0.003,0.999,0.053,0.003,0.999,0.053,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,0.000,-0.866,0.500,0.000,-0.866,0.500,0.000,-0.866,0.500,0.000,-0.866,0.500,-0.000,-1.000,-0.000,0.000,-0.866,0.500,0.000,-0.000,1.000,0.000,0.500,0.866,0.000,0.500,0.866,0.000,0.500,0.866,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,0.500,0.866,0.000,1.000,0.000,0.000,1.000,-0.000,0.000,1.000,-0.000,0.000,0.500,0.866,0.000,0.500,0.866,0.000,1.000,0.000,-0.000,0.500,-0.866,0.000,0.500,-0.866,0.000,0.500,-0.866,0.000,1.000,-0.000,0.000,1.000,0.000,-0.000,0.500,-0.866,-0.000,-0.500,-0.866,-0.000,-0.500,-0.866,-0.000,-0.500,-0.866,0.000,0.500,-0.866,-0.000,0.500,-0.866,-0.000,-0.500,-0.866,-0.000,-0.866,-0.500,-0.000,-1.000,-0.000,-0.000,-1.000,-0.000,-0.000,-0.500,-0.866,-0.000,-0.500,-0.866,-1.000,0.000,-0.000,-1.000,0.000,-0.000,-1.000,0.000,-0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,-0.000,-1.000,-0.000,0.000,-0.866,0.500,0.000,-0.866,0.500,0.000,-0.866,0.500,-0.000,-1.000,-0.000,-0.000,-1.000,-0.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,0.500,0.866,0.000,0.500,0.866,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,0.866,0.500,0.000,0.866,0.500,0.000,1.000,0.000,0.000,1.000,0.000,0.000,0.500,0.866,0.000,0.866,0.500,-0.000,0.866,-0.500,-0.000,0.866,-0.500,-0.000,0.500,-0.866,-0.000,0.500,-0.866,0.000,1.000,0.000,-0.000,0.866,-0.500,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,-0.500,-0.866,-0.000,-0.500,-0.866,-0.000,0.500,-0.866,-0.000,0.000,-1.000,-0.000,-0.866,-0.500,-0.000,-1.000,-0.000,-0.000,-1.000,-0.000,-0.000,-1.000,-0.000,-0.000,-0.500,-0.866,-0.000,-0.866,-0.500,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,-0.000,-1.000,-0.000,0.000,-0.866,0.500,0.000,-0.866,0.500,0.000,-0.866,0.500,0.000,-1.000,0.000,-0.000,-1.000,-0.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,0.500,0.866,0.000,0.500,0.866,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,0.866,0.500,0.000,0.866,0.500,0.000,1.000,-0.000,0.000,1.000,-0.000,0.000,0.500,0.866,0.000,0.866,0.500,-0.000,0.866,-0.500,-0.000,0.866,-0.500,0.000,0.500,-0.866,0.000,0.500,-0.866,0.000,1.000,-0.000,0.000,0.866,-0.500,0.000,0.000,-1.000,0.000,0.000,-1.000,-0.000,-0.500,-0.866,-0.000,-0.500,-0.866,0.000,0.500,-0.866,-0.000,0.000,-1.000,-0.000,-0.866,-0.500,-0.000,-1.000,-0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,-0.000,-0.500,-0.866,0.000,-0.866,-0.500,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,-0.000,-1.000,-0.000,0.000,-0.866,0.500,0.000,-0.866,0.500,0.000,-0.866,0.500,-0.000,-1.000,-0.000,-0.000,-1.000,-0.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,0.500,0.866,0.000,0.500,0.866,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,0.866,0.500,0.000,0.866,0.500,0.000,1.000,-0.000,0.000,1.000,-0.000,0.000,0.500,0.866,0.000,0.866,0.500,-0.000,0.866,-0.500,-0.000,0.866,-0.500,-0.000,0.500,-0.866,-0.000,0.500,-0.866,0.000,1.000,-0.000,0.000,0.866,-0.500,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,-0.500,-0.866,-0.000,-0.500,-0.866,-0.000,0.500,-0.866,-0.000,0.000,-1.000,-0.000,-0.866,-0.500,-0.000,-1.000,-0.000,-0.000,-1.000,-0.000,-0.000,-1.000,-0.000,-0.000,-0.500,-0.866,-0.000,-0.866,-0.500,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-0.034,0.999,0.000,-0.034,0.999,0.000,-0.034,0.999,-0.000,-0.034,0.999,-0.000,-0.034,0.999,-0.000,-0.034,0.999,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,-0.000,-1.000,-0.000,-0.000,-1.000,-0.000,-0.000,-1.000,-0.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,-0.999,-0.000,-0.046,-0.999,-0.000,-0.046,-0.999,-0.000,-0.046,-0.999,0.001,-0.044,-0.999,0.001,-0.044,-0.999,0.001,-0.044,0.999,-0.001,0.044,0.999,-0.001,0.044,0.999,-0.001,0.044,0.999,0.000,0.046,0.999,0.000,0.046,0.999,0.000,0.046,0.052,0.035,-0.998,0.052,0.035,-0.998,0.052,0.035,-0.998,0.052,0.035,-0.998,0.052,0.035,-0.998,0.052,0.035,-0.998,0.002,-0.999,-0.039,0.002,-0.999,-0.039,0.002,-0.999,-0.039,0.002,-0.999,-0.039,0.002,-0.999,-0.039,0.002,-0.999,-0.039,-0.052,-0.022,0.998,-0.052,-0.022,0.998,-0.052,-0.022,0.998,-0.052,-0.022,0.998,-0.052,-0.022,0.998,-0.052,-0.022,0.998,-0.003,0.999,0.053,-0.003,0.999,0.053,-0.003,0.999,0.053,-0.003,0.999,0.053,-0.003,0.999,0.053,-0.003,0.999,0.053,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,0.000,-0.866,0.500,0.000,-0.866,0.500,0.000,-1.000,-0.000,0.000,-1.000,-0.000,-0.000,-1.000,-0.000,0.000,-0.866,0.500,0.000,0.500,0.866,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,0.500,0.866,-0.000,1.000,0.000,0.000,0.866,0.500,0.000,0.866,0.500,0.000,0.866,0.500,0.000,0.500,0.866,-0.000,1.000,0.000,-0.000,0.500,-0.866,-0.000,0.866,-0.500,-0.000,0.866,-0.500,-0.000,0.866,-0.500,-0.000,1.000,0.000,-0.000,0.500,-0.866,-0.000,-0.500,-0.866,-0.000,-0.500,-0.866,-0.000,0.000,-1.000,-0.000,-0.000,-1.000,-0.000,0.500,-0.866,-0.000,-0.500,-0.866,-0.000,-1.000,-0.000,0.000,-1.000,-0.000,-0.000,-0.500,-0.866,-0.000,-0.500,-0.866,-0.000,-0.500,-0.866,-0.000,-1.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,-0.000,-0.000,-1.000,-0.000,-0.000,-1.000,-0.000,-0.000,0.000,-0.866,0.500,0.000,-0.866,0.500,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-0.866,0.500,0.000,0.500,0.866,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,0.500,0.866,-0.000,1.000,0.000,0.000,0.866,0.500,0.000,0.866,0.500,0.000,0.866,0.500,0.000,0.500,0.866,-0.000,1.000,0.000,-0.000,0.500,-0.866,-0.000,0.866,-0.500,-0.000,0.866,-0.500,-0.000,0.866,-0.500,-0.000,1.000,0.000,-0.000,0.500,-0.866,-0.000,-0.500,-0.866,-0.000,-0.500,-0.866,-0.000,-0.000,-1.000,-0.000,-0.000,-1.000,-0.000,0.500,-0.866,-0.000,-0.500,-0.866,0.000,-1.000,-0.000,0.000,-1.000,-0.000,-0.000,-0.500,-0.866,-0.000,-0.500,-0.866,-0.000,-0.500,-0.866,0.000,-1.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,-1.000,-0.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000])}};}},\r\n			Top          : {get once(){return { position: { itemSize: 3, array: new Float32Array([ -0.001, 8.077, 0.300, -1.457, 8.077, 0.137, -1.456, 5.088, 0.138, -1.456, 5.088, 0.138, -0.001, 5.088, 0.300, -0.001, 8.077, 0.300, -2.817, 8.077, -4.415, -2.792, 8.077, -1.700, -2.678, 9.684, -1.696, -2.678, 9.684, -1.696, -2.817, 9.684, -4.619, -2.817, 8.077, -4.415, -1.454, 0.487, 0.138, -0.001, 0.487, 0.300, -0.001, 5.088, 0.300, -0.001, 5.088, 0.300, -1.456, 5.088, 0.138, -1.454, 0.487, 0.138, -1.456, 5.088, 0.138, -2.388, 5.083, -0.380, -2.388, 0.487, -0.380, -2.388, 0.487, -0.380, -1.454, 0.487, 0.138, -1.456, 5.088, 0.138, -1.452, -4.111, 0.138, -0.001, -4.110, 0.300, -0.001, 0.487, 0.300, -0.001, 0.487, 0.300, -1.454, 0.487, 0.138, -1.452, -4.111, 0.138, -1.454, 0.487, 0.138, -2.388, 0.487, -0.380, -2.388, -4.112, -0.380, -2.388, -4.112, -0.380, -1.452, -4.111, 0.138, -1.454, 0.487, 0.138, -1.452, -4.111, 0.138, -1.450, -8.842, 0.138, -0.001, -8.843, 0.300, -0.001, -8.843, 0.300, -0.001, -4.110, 0.300, -1.452, -4.111, 0.138, -1.452, -4.111, 0.138, -2.388, -4.112, -0.380, -2.388, -8.843, -0.380, -2.388, -8.843, -0.380, -1.450, -8.842, 0.138, -1.452, -4.111, 0.138, -2.792, -10.858, -3.588, -2.196, -12.708, -3.595, -2.195, -12.708, -2.370, -2.195, -12.708, -2.370, -2.792, -10.858, -2.303, -2.792, -10.858, -3.588, -2.790, -14.752, -1.826, -2.102, -14.817, -2.279, -1.437, -14.631, -0.864, -2.790, -14.752, -1.826, -1.437, -14.631, -0.864, -2.212, -14.631, -0.860, -2.790, -14.752, -1.826, -2.212, -14.631, -0.860, -2.783, -14.677, -1.267, -2.088, -12.708, -0.443, -1.395, -12.708, 0.019, -1.450, -10.857, 0.139, -1.450, -10.857, 0.139, -2.350, -10.858, -0.424, -2.088, -12.708, -0.443, -1.437, -14.631, -0.864, -2.102, -14.817, -2.279, -2.050, -12.708, -2.465, -2.050, -12.708, -2.465, -1.437, -12.708, -0.921, -1.437, -14.631, -0.864, -2.703, -10.858, -1.281, -2.792, -10.858, -2.303, -2.790, -14.752, -1.826, -2.790, -14.752, -1.826, -2.783, -14.677, -1.267, -2.703, -10.858, -1.281, -2.790, -14.752, -1.826, -2.792, -10.858, -2.303, -2.195, -12.708, -2.370, -2.195, -12.708, -2.370, -2.050, -12.708, -2.465, -2.102, -14.817, -2.279, -2.790, -14.752, -1.826, -2.195, -12.708, -2.370, -2.102, -14.817, -2.279, -1.450, -8.842, 0.138, -1.450, -10.857, 0.139, -0.329, -10.856, 0.256, -1.450, -8.842, 0.138, -0.329, -10.856, 0.256, -0.335, -9.364, 0.251, -1.450, -8.842, 0.138, -0.335, -9.364, 0.251, -0.001, -9.062, 0.298, -1.450, -8.842, 0.138, -0.001, -9.062, 0.298, -0.001, -8.843, 0.300, -0.888, 11.232, 0.066, -1.218, 11.532, -0.310, -1.480, 11.052, -0.326, -1.480, 11.052, -0.326, -1.152, 10.873, 0.068, -0.888, 11.232, 0.066, -0.555, 11.467, 0.070, -0.813, 11.937, -0.322, -1.218, 11.532, -0.310, -1.218, 11.532, -0.310, -0.888, 11.232, 0.066, -0.555, 11.467, 0.070, -0.171, 11.627, 0.078, -0.266, 12.125, -0.326, -0.813, 11.937, -0.322, -0.813, 11.937, -0.322, -0.555, 11.467, 0.070, -0.171, 11.627, 0.078, -0.001, 10.873, 0.270, -0.001, 11.659, 0.074, -0.171, 11.627, 0.078, -0.001, 10.873, 0.270, -0.171, 11.627, 0.078, -0.555, 11.467, 0.070, -0.001, 10.873, 0.270, -0.555, 11.467, 0.070, -0.888, 11.232, 0.066, -0.001, 10.873, 0.270, -0.888, 11.232, 0.066, -1.152, 10.873, 0.068, -2.565, 10.873, -1.781, -2.583, 10.873, -4.835, -2.817, 9.684, -4.619, -2.817, 9.684, -4.619, -2.678, 9.684, -1.696, -2.565, 10.873, -1.781, -2.195, -12.708, -0.919, -2.212, -14.631, -0.860, -1.437, -14.631, -0.864, -1.437, -14.631, -0.864, -1.437, -12.708, -0.921, -2.195, -12.708, -0.919, -2.792, -10.858, -3.588, -2.553, -12.708, -3.587, -2.196, -12.708, -3.595, -1.450, -10.857, 0.139, -1.395, -12.708, 0.019, -0.269, -12.708, 0.263, -1.450, -10.857, 0.139, -0.269, -12.708, 0.263, -0.322, -12.546, 0.263, -0.329, -10.856, 0.256, -1.450, -10.857, 0.139, -0.322, -12.546, 0.263, -2.195, -12.708, -0.919, -2.703, -10.858, -1.281, -2.783, -14.677, -1.267, -2.783, -14.677, -1.267, -2.212, -14.631, -0.860, -2.195, -12.708, -0.919, -1.450, -10.857, 0.139, -1.450, -8.842, 0.138, -2.388, -8.843, -0.380, -2.388, -8.843, -0.380, -2.350, -10.858, -0.424, -1.450, -10.857, 0.139, -2.792, -8.843, -1.700, -2.792, -8.843, -2.303, -2.792, -10.858, -2.303, -2.792, -10.858, -2.303, -2.703, -10.858, -1.281, -2.792, -8.843, -1.700, -2.792, -10.858, -2.303, -2.792, -8.843, -2.303, -2.791, -8.843, -3.588, -2.791, -8.843, -3.588, -2.792, -10.858, -3.588, -2.792, -10.858, -2.303, -2.792, -10.858, -3.588, -2.791, -8.843, -3.588, -2.816, -8.843, -4.416, -2.792, -10.858, -3.588, -2.816, -8.843, -4.416, -2.814, -9.067, -4.435, -2.792, -10.858, -3.588, -2.814, -9.067, -4.435, -2.794, -10.858, -4.452, -2.767, -12.708, -4.432, -2.553, -12.708, -3.587, -2.792, -10.858, -3.588, -2.792, -10.858, -3.588, -2.794, -10.858, -4.452, -2.767, -12.708, -4.432, -0.059, -14.762, 1.024, -0.059, -15.106, 1.678, -0.315, -13.220, 1.683, -0.315, -13.220, 1.683, -0.307, -12.674, 0.429, -0.059, -14.762, 1.024, -0.346, -12.781, 2.003, -0.335, -9.891, 2.026, -0.335, -9.436, 1.380, -0.335, -9.436, 1.380, -0.335, -9.364, 0.251, -0.329, -10.856, 0.256, -0.346, -12.781, 2.003, -0.335, -9.436, 1.380, -0.329, -10.856, 0.256, -0.329, -10.856, 0.256, -0.322, -12.546, 0.263, -0.307, -12.674, 0.429, -0.346, -12.781, 2.003, -0.329, -10.856, 0.256, -0.307, -12.674, 0.429, -0.315, -13.220, 1.683, -0.346, -12.781, 2.003, -0.307, -12.674, 0.429, -0.171, -16.951, 7.688, -0.171, -17.242, 7.492, -0.114, -18.068, 7.485, -0.114, -18.068, 7.485, -0.114, -18.068, 8.020, -0.171, -16.433, 8.024, -0.171, -16.951, 7.688, -0.114, -18.068, 7.485, -0.171, -16.433, 8.024, -0.171, -16.951, 7.688, -0.171, -16.433, 8.024, -0.171, -15.884, 7.902, -0.171, -16.951, 7.688, -0.171, -15.884, 7.902, -0.171, -15.468, 7.554, -0.171, -16.951, 7.688, -0.171, -15.468, 7.554, -0.335, -9.891, 2.026, -0.346, -12.781, 2.003, -0.171, -16.951, 7.688, -0.335, -9.891, 2.026, -2.703, -10.858, -1.281, -2.350, -10.858, -0.424, -2.388, -8.843, -0.380, -2.388, -8.843, -0.380, -2.792, -8.843, -1.700, -2.703, -10.858, -1.281, -0.779, 13.922, -1.572, -0.962, 12.961, -1.196, -0.148, 12.902, -1.049, -0.779, 13.922, -1.572, -0.148, 12.902, -1.049, -0.001, 12.891, -1.022, -0.779, 13.922, -1.572, -0.001, 12.891, -1.022, -0.001, 13.944, -1.480, -1.409, 13.854, -1.906, -1.590, 12.871, -1.554, -0.962, 12.961, -1.196, -0.962, 12.961, -1.196, -0.779, 13.922, -1.572, -1.409, 13.854, -1.906, -2.359, 11.934, -2.002, -2.462, 11.404, -1.891, -1.977, 11.099, -0.863, -1.977, 11.099, -0.863, -1.752, 11.925, -1.118, -2.359, 11.934, -2.002, -0.668, 14.864, -1.957, -0.779, 13.922, -1.572, -0.001, 13.944, -1.480, -0.001, 13.944, -1.480, -0.001, 14.882, -1.893, -0.668, 14.864, -1.957, -1.225, 14.807, -2.236, -1.409, 13.854, -1.906, -0.779, 13.922, -1.572, -0.779, 13.922, -1.572, -0.668, 14.864, -1.957, -1.225, 14.807, -2.236, -0.567, 15.689, -2.306, -0.668, 14.864, -1.957, -0.001, 14.882, -1.893, -0.001, 14.882, -1.893, -0.001, 15.716, -2.250, -0.567, 15.689, -2.306, -1.044, 15.620, -2.564, -1.225, 14.807, -2.236, -0.668, 14.864, -1.957, -0.668, 14.864, -1.957, -0.567, 15.689, -2.306, -1.044, 15.620, -2.564, -1.697, 14.695, -2.693, -1.951, 13.742, -2.459, -1.409, 13.854, -1.906, -1.409, 13.854, -1.906, -1.225, 14.807, -2.236, -1.697, 14.695, -2.693, -1.173, 16.359, -3.167, -1.435, 15.527, -2.930, -1.044, 15.620, -2.564, -1.044, 15.620, -2.564, -0.877, 16.430, -2.887, -1.173, 16.359, -3.167, -0.877, 16.430, -2.887, -1.044, 15.620, -2.564, -0.567, 15.689, -2.306, -0.567, 15.689, -2.306, -0.463, 16.491, -2.673, -0.877, 16.430, -2.887, -0.463, 16.491, -2.673, -0.567, 15.689, -2.306, -0.001, 15.716, -2.250, -0.001, 15.716, -2.250, -0.001, 16.508, -2.624, -0.463, 16.491, -2.673, -0.395, 17.007, -2.937, -0.463, 16.491, -2.673, -0.001, 16.508, -2.624, -0.001, 16.508, -2.624, -0.001, 17.019, -2.901, -0.395, 17.007, -2.937, -0.751, 16.963, -3.116, -0.877, 16.430, -2.887, -0.463, 16.491, -2.673, -0.463, 16.491, -2.673, -0.395, 17.007, -2.937, -0.751, 16.963, -3.116, -0.796, 17.438, -3.552, -0.985, 16.898, -3.360, -0.751, 16.963, -3.116, -0.751, 16.963, -3.116, -0.611, 17.481, -3.374, -0.796, 17.438, -3.552, -0.611, 17.481, -3.374, -0.751, 16.963, -3.116, -0.395, 17.007, -2.937, -0.395, 17.007, -2.937, -0.330, 17.518, -3.219, -0.611, 17.481, -3.374, -0.330, 17.518, -3.219, -0.395, 17.007, -2.937, -0.001, 17.019, -2.901, -0.001, 17.019, -2.901, -0.001, 17.520, -3.188, -0.330, 17.518, -3.219, -2.388, -4.112, -0.380, -2.792, -4.113, -1.700, -2.792, -8.843, -1.700, -2.792, -8.843, -1.700, -2.388, -8.843, -0.380, -2.388, -4.112, -0.380, -2.388, -4.112, -0.380, -2.388, 0.487, -0.380, -2.792, 0.488, -1.701, -2.792, 0.488, -1.701, -2.792, -4.113, -1.700, -2.388, -4.112, -0.380, -2.388, 5.083, -0.380, -2.792, 5.087, -1.701, -2.792, 0.488, -1.701, -2.792, 0.488, -1.701, -2.388, 0.487, -0.380, -2.388, 5.083, -0.380, -2.387, 8.077, -0.380, -2.792, 8.077, -1.700, -2.792, 5.087, -1.701, -2.792, 5.087, -1.701, -2.388, 5.083, -0.380, -2.387, 8.077, -0.380, -1.590, 12.871, -1.554, -1.409, 13.854, -1.906, -1.951, 13.742, -2.459, -1.951, 13.742, -2.459, -2.197, 12.789, -2.224, -1.590, 12.871, -1.554, -1.225, 14.807, -2.236, -1.044, 15.620, -2.564, -1.435, 15.527, -2.930, -1.435, 15.527, -2.930, -1.697, 14.695, -2.693, -1.225, 14.807, -2.236, -0.877, 16.430, -2.887, -0.751, 16.963, -3.116, -0.985, 16.898, -3.360, -0.985, 16.898, -3.360, -1.173, 16.359, -3.167, -0.877, 16.430, -2.887, -0.001, 10.873, 0.270, -1.152, 10.873, 0.068, -1.378, 9.684, 0.137, -1.378, 9.684, 0.137, -0.001, 9.684, 0.300, -0.001, 10.873, 0.270, -2.388, 5.083, -0.380, -1.456, 5.088, 0.138, -1.457, 8.077, 0.137, -1.457, 8.077, 0.137, -2.387, 8.077, -0.380, -2.388, 5.083, -0.380, -2.792, 8.077, -1.700, -2.387, 8.077, -0.380, -2.253, 9.678, -0.575, -2.253, 9.678, -0.575, -2.678, 9.684, -1.696, -2.792, 8.077, -1.700, -1.457, 8.077, 0.137, -1.378, 9.684, 0.137, -1.844, 9.687, -0.162, -2.387, 8.077, -0.380, -1.457, 8.077, 0.137, -1.844, 9.687, -0.162, -2.253, 9.678, -0.575, -2.387, 8.077, -0.380, -1.844, 9.687, -0.162, -1.457, 8.077, 0.137, -0.001, 8.077, 0.300, -0.001, 9.684, 0.300, -0.001, 9.684, 0.300, -1.378, 9.684, 0.137, -1.457, 8.077, 0.137, -2.350, -10.858, -0.424, -2.703, -10.858, -1.281, -2.195, -12.708, -0.919, -2.195, -12.708, -0.919, -2.088, -12.708, -0.443, -2.350, -10.858, -0.424, -2.792, 8.077, -1.700, -2.817, 8.077, -4.415, -2.817, 5.070, -4.300, -2.817, 5.070, -4.300, -2.792, 5.087, -1.701, -2.792, 8.077, -1.700, -2.817, 0.471, -4.125, -2.792, 0.488, -1.701, -2.792, 5.087, -1.701, -2.792, 5.087, -1.701, -2.817, 5.070, -4.300, -2.817, 0.471, -4.125, -2.817, -4.143, -4.068, -2.792, -4.113, -1.700, -2.792, 0.488, -1.701, -2.792, 0.488, -1.701, -2.817, 0.471, -4.125, -2.817, -4.143, -4.068, -2.817, -4.143, -4.068, -2.816, -8.843, -4.416, -2.791, -8.843, -3.588, -2.817, -4.143, -4.068, -2.791, -8.843, -3.588, -2.792, -8.843, -2.303, -2.792, -8.843, -2.303, -2.792, -8.843, -1.700, -2.792, -4.113, -1.700, -2.817, -4.143, -4.068, -2.792, -8.843, -2.303, -2.792, -4.113, -1.700, -4.651, -0.336, -4.352, -2.817, 0.471, -4.125, -2.817, 5.070, -4.300, -4.651, -0.336, -4.352, -2.817, 5.070, -4.300, -2.817, 8.077, -4.415, -4.651, -0.336, -4.352, -2.817, 8.077, -4.415, -2.817, 9.684, -4.619, -4.651, -0.336, -4.352, -11.233, -6.814, -4.385, -2.817, -4.143, -4.068, -2.817, -4.143, -4.068, -2.817, 0.471, -4.125, -4.651, -0.336, -4.352, -11.781, -7.869, -4.389, -11.811, -9.076, -4.389, -2.814, -9.067, -4.435, -11.781, -7.869, -4.389, -2.814, -9.067, -4.435, -2.816, -8.843, -4.416, -2.816, -8.843, -4.416, -2.817, -4.143, -4.068, -11.233, -6.814, -4.385, -11.781, -7.869, -4.389, -2.816, -8.843, -4.416, -11.233, -6.814, -4.385, -1.480, 11.052, -0.326, -1.567, 10.873, -0.294, -1.152, 10.873, 0.068, -1.567, 10.873, -0.294, -1.844, 9.687, -0.162, -1.378, 9.684, 0.137, -1.378, 9.684, 0.137, -1.152, 10.873, 0.068, -1.567, 10.873, -0.294, -1.977, 11.099, -0.863, -2.056, 10.873, -0.790, -1.567, 10.873, -0.294, -1.567, 10.873, -0.294, -1.480, 11.052, -0.326, -1.977, 11.099, -0.863, -2.056, 10.873, -0.790, -2.253, 9.678, -0.575, -1.844, 9.687, -0.162, -1.844, 9.687, -0.162, -1.567, 10.873, -0.294, -2.056, 10.873, -0.790, -2.565, 10.873, -1.781, -2.056, 10.873, -0.790, -1.977, 11.099, -0.863, -1.977, 11.099, -0.863, -2.462, 11.404, -1.891, -2.565, 10.873, -1.781, -2.678, 9.684, -1.696, -2.253, 9.678, -0.575, -2.056, 10.873, -0.790, -2.056, 10.873, -0.790, -2.565, 10.873, -1.781, -2.678, 9.684, -1.696, -1.590, 12.871, -1.554, -2.197, 12.789, -2.224, -2.359, 11.934, -2.002, -2.359, 11.934, -2.002, -1.752, 11.925, -1.118, -1.590, 12.871, -1.554, -1.590, 12.871, -1.554, -1.752, 11.925, -1.118, -1.020, 12.405, -0.943, -1.020, 12.405, -0.943, -0.962, 12.961, -1.196, -1.590, 12.871, -1.554, -0.134, 12.768, -0.976, -0.001, 12.772, -0.948, -0.001, 12.891, -1.022, -0.001, 12.891, -1.022, -0.148, 12.902, -1.049, -0.134, 12.768, -0.976, -0.134, 12.768, -0.976, -0.266, 12.125, -0.326, -0.001, 12.152, -0.321, -0.001, 12.152, -0.321, -0.001, 12.772, -0.948, -0.134, 12.768, -0.976, -0.266, 12.125, -0.326, -0.171, 11.627, 0.078, -0.001, 11.659, 0.074, -0.001, 11.659, 0.074, -0.001, 12.152, -0.321, -0.266, 12.125, -0.326, -0.148, 12.902, -1.049, -0.962, 12.961, -1.196, -1.020, 12.405, -0.943, -1.020, 12.405, -0.943, -0.134, 12.768, -0.976, -0.148, 12.902, -1.049, -0.001, 8.077, 0.300, -0.001, 5.088, 0.300, 1.455, 5.088, 0.138, 1.455, 5.088, 0.138, 1.456, 8.077, 0.137, -0.001, 8.077, 0.300, 2.816, 8.077, -4.415, 2.816, 9.684, -4.619, 2.677, 9.684, -1.696, 2.677, 9.684, -1.696, 2.791, 8.077, -1.700, 2.816, 8.077, -4.415, 1.453, 0.487, 0.138, 1.455, 5.088, 0.138, -0.001, 5.088, 0.300, -0.001, 5.088, 0.300, -0.001, 0.487, 0.300, 1.453, 0.487, 0.138, 1.455, 5.088, 0.138, 1.453, 0.487, 0.138, 2.387, 0.487, -0.380, 2.387, 0.487, -0.380, 2.387, 5.083, -0.380, 1.455, 5.088, 0.138, 1.451, -4.111, 0.138, 1.453, 0.487, 0.138, -0.001, 0.487, 0.300, -0.001, 0.487, 0.300, -0.001, -4.110, 0.300, 1.451, -4.111, 0.138, 1.453, 0.487, 0.138, 1.451, -4.111, 0.138, 2.387, -4.112, -0.380, 2.387, -4.112, -0.380, 2.387, 0.487, -0.380, 1.453, 0.487, 0.138, 1.451, -4.111, 0.138, -0.001, -4.110, 0.300, -0.001, -8.843, 0.300, -0.001, -8.843, 0.300, 1.449, -8.842, 0.138, 1.451, -4.111, 0.138, 1.451, -4.111, 0.138, 1.449, -8.842, 0.138, 2.387, -8.843, -0.380, 2.387, -8.843, -0.380, 2.387, -4.112, -0.380, 1.451, -4.111, 0.138, 2.791, -10.858, -3.588, 2.791, -10.858, -2.303, 2.194, -12.708, -2.370, 2.194, -12.708, -2.370, 2.194, -12.708, -3.595, 2.791, -10.858, -3.588, 2.789, -14.752, -1.826, 2.781, -14.677, -1.267, 2.211, -14.631, -0.860, 2.789, -14.752, -1.826, 2.211, -14.631, -0.860, 1.435, -14.631, -0.864, 2.789, -14.752, -1.826, 1.435, -14.631, -0.864, 2.101, -14.817, -2.279, 2.087, -12.708, -0.443, 2.349, -10.858, -0.424, 1.449, -10.857, 0.139, 1.449, -10.857, 0.139, 1.393, -12.708, 0.019, 2.087, -12.708, -0.443, 1.435, -14.631, -0.864, 1.435, -12.708, -0.921, 2.049, -12.708, -2.465, 2.049, -12.708, -2.465, 2.101, -14.817, -2.279, 1.435, -14.631, -0.864, 2.702, -10.858, -1.281, 2.781, -14.677, -1.267, 2.789, -14.752, -1.826, 2.789, -14.752, -1.826, 2.791, -10.858, -2.303, 2.702, -10.858, -1.281, 2.101, -14.817, -2.279, 2.049, -12.708, -2.465, 2.194, -12.708, -2.370, 2.789, -14.752, -1.826, 2.101, -14.817, -2.279, 2.194, -12.708, -2.370, 2.789, -14.752, -1.826, 2.194, -12.708, -2.370, 2.791, -10.858, -2.303, 1.449, -8.842, 0.138, -0.001, -8.843, 0.300, -0.001, -9.062, 0.298, 1.449, -8.842, 0.138, -0.001, -9.062, 0.298, 0.333, -9.364, 0.251, 1.449, -8.842, 0.138, 0.333, -9.364, 0.251, 0.328, -10.856, 0.256, 1.449, -8.842, 0.138, 0.328, -10.856, 0.256, 1.449, -10.857, 0.139, 0.887, 11.232, 0.066, 1.151, 10.873, 0.068, 1.479, 11.052, -0.326, 1.479, 11.052, -0.326, 1.217, 11.532, -0.310, 0.887, 11.232, 0.066, 0.554, 11.467, 0.070, 0.887, 11.232, 0.066, 1.217, 11.532, -0.310, 1.217, 11.532, -0.310, 0.812, 11.937, -0.322, 0.554, 11.467, 0.070, 0.170, 11.627, 0.078, 0.554, 11.467, 0.070, 0.812, 11.937, -0.322, 0.812, 11.937, -0.322, 0.264, 12.125, -0.326, 0.170, 11.627, 0.078, -0.001, 10.873, 0.270, 1.151, 10.873, 0.068, 0.887, 11.232, 0.066, -0.001, 10.873, 0.270, 0.887, 11.232, 0.066, 0.554, 11.467, 0.070, -0.001, 10.873, 0.270, 0.554, 11.467, 0.070, 0.170, 11.627, 0.078, -0.001, 10.873, 0.270, 0.170, 11.627, 0.078, -0.001, 11.659, 0.074, 2.563, 10.873, -1.781, 2.677, 9.684, -1.696, 2.816, 9.684, -4.619, 2.816, 9.684, -4.619, 2.581, 10.873, -4.835, 2.563, 10.873, -1.781, 2.194, -12.708, -0.919, 1.435, -12.708, -0.921, 1.435, -14.631, -0.864, 1.435, -14.631, -0.864, 2.211, -14.631, -0.860, 2.194, -12.708, -0.919, 2.791, -10.858, -3.588, 2.194, -12.708, -3.595, 2.552, -12.708, -3.587, 0.268, -12.708, 0.263, 1.393, -12.708, 0.019, 1.449, -10.857, 0.139, 0.321, -12.546, 0.263, 0.268, -12.708, 0.263, 1.449, -10.857, 0.139, 0.328, -10.856, 0.256, 0.321, -12.546, 0.263, 1.449, -10.857, 0.139, 2.194, -12.708, -0.919, 2.211, -14.631, -0.860, 2.781, -14.677, -1.267, 2.781, -14.677, -1.267, 2.702, -10.858, -1.281, 2.194, -12.708, -0.919, 1.449, -10.857, 0.139, 2.349, -10.858, -0.424, 2.387, -8.843, -0.380, 2.387, -8.843, -0.380, 1.449, -8.842, 0.138, 1.449, -10.857, 0.139, 2.791, -8.843, -1.700, 2.702, -10.858, -1.281, 2.791, -10.858, -2.303, 2.791, -10.858, -2.303, 2.790, -8.843, -2.303, 2.791, -8.843, -1.700, 2.791, -10.858, -2.303, 2.791, -10.858, -3.588, 2.789, -8.843, -3.588, 2.789, -8.843, -3.588, 2.790, -8.843, -2.303, 2.791, -10.858, -2.303, 2.791, -10.858, -3.588, 2.793, -10.858, -4.452, 2.813, -9.067, -4.435, 2.791, -10.858, -3.588, 2.813, -9.067, -4.435, 2.814, -8.843, -4.416, 2.791, -10.858, -3.588, 2.814, -8.843, -4.416, 2.789, -8.843, -3.588, 2.766, -12.708, -4.432, 2.793, -10.858, -4.452, 2.791, -10.858, -3.588, 2.791, -10.858, -3.588, 2.552, -12.708, -3.587, 2.766, -12.708, -4.432, 0.058, -14.762, 1.024, 0.306, -12.674, 0.429, 0.313, -13.220, 1.683, 0.313, -13.220, 1.683, 0.058, -15.106, 1.678, 0.058, -14.762, 1.024, 0.306, -12.674, 0.429, 0.321, -12.546, 0.263, 0.328, -10.856, 0.256, 0.328, -10.856, 0.256, 0.333, -9.364, 0.251, 0.333, -9.436, 1.380, 0.333, -9.436, 1.380, 0.333, -9.891, 2.026, 0.345, -12.781, 2.003, 0.328, -10.856, 0.256, 0.333, -9.436, 1.380, 0.345, -12.781, 2.003, 0.306, -12.674, 0.429, 0.328, -10.856, 0.256, 0.345, -12.781, 2.003, 0.313, -13.220, 1.683, 0.306, -12.674, 0.429, 0.345, -12.781, 2.003, 0.170, -16.433, 8.024, 0.113, -18.068, 8.020, 0.113, -18.068, 7.485, 0.170, -16.951, 7.688, 0.170, -16.433, 8.024, 0.113, -18.068, 7.485, 0.170, -16.951, 7.688, 0.113, -18.068, 7.485, 0.170, -17.242, 7.492, 0.170, -15.884, 7.902, 0.170, -16.433, 8.024, 0.170, -16.951, 7.688, 0.170, -15.468, 7.554, 0.170, -15.884, 7.902, 0.170, -16.951, 7.688, 0.333, -9.891, 2.026, 0.170, -15.468, 7.554, 0.170, -16.951, 7.688, 0.345, -12.781, 2.003, 0.333, -9.891, 2.026, 0.170, -16.951, 7.688, 2.702, -10.858, -1.281, 2.791, -8.843, -1.700, 2.387, -8.843, -0.380, 2.387, -8.843, -0.380, 2.349, -10.858, -0.424, 2.702, -10.858, -1.281, 0.777, 13.922, -1.572, -0.001, 13.944, -1.480, -0.001, 12.891, -1.022, 0.777, 13.922, -1.572, -0.001, 12.891, -1.022, 0.147, 12.902, -1.049, 0.777, 13.922, -1.572, 0.147, 12.902, -1.049, 0.960, 12.961, -1.196, 1.407, 13.854, -1.906, 0.777, 13.922, -1.572, 0.960, 12.961, -1.196, 0.960, 12.961, -1.196, 1.589, 12.871, -1.554, 1.407, 13.854, -1.906, 2.358, 11.934, -2.002, 1.751, 11.925, -1.118, 1.976, 11.099, -0.863, 1.976, 11.099, -0.863, 2.460, 11.404, -1.891, 2.358, 11.934, -2.002, 0.667, 14.864, -1.957, -0.001, 14.882, -1.893, -0.001, 13.944, -1.480, -0.001, 13.944, -1.480, 0.777, 13.922, -1.572, 0.667, 14.864, -1.957, 1.224, 14.807, -2.236, 0.667, 14.864, -1.957, 0.777, 13.922, -1.572, 0.777, 13.922, -1.572, 1.407, 13.854, -1.906, 1.224, 14.807, -2.236, 0.566, 15.689, -2.306, -0.001, 15.716, -2.250, -0.001, 14.882, -1.893, -0.001, 14.882, -1.893, 0.667, 14.864, -1.957, 0.566, 15.689, -2.306, 1.043, 15.620, -2.564, 0.566, 15.689, -2.306, 0.667, 14.864, -1.957, 0.667, 14.864, -1.957, 1.224, 14.807, -2.236, 1.043, 15.620, -2.564, 1.696, 14.695, -2.693, 1.224, 14.807, -2.236, 1.407, 13.854, -1.906, 1.407, 13.854, -1.906, 1.949, 13.742, -2.459, 1.696, 14.695, -2.693, 1.172, 16.359, -3.167, 0.876, 16.430, -2.887, 1.043, 15.620, -2.564, 1.043, 15.620, -2.564, 1.434, 15.527, -2.930, 1.172, 16.359, -3.167, 0.876, 16.430, -2.887, 0.461, 16.491, -2.673, 0.566, 15.689, -2.306, 0.566, 15.689, -2.306, 1.043, 15.620, -2.564, 0.876, 16.430, -2.887, 0.461, 16.491, -2.673, -0.001, 16.508, -2.624, -0.001, 15.716, -2.250, -0.001, 15.716, -2.250, 0.566, 15.689, -2.306, 0.461, 16.491, -2.673, 0.393, 17.007, -2.937, -0.001, 17.019, -2.901, -0.001, 16.508, -2.624, -0.001, 16.508, -2.624, 0.461, 16.491, -2.673, 0.393, 17.007, -2.937, 0.750, 16.963, -3.116, 0.393, 17.007, -2.937, 0.461, 16.491, -2.673, 0.461, 16.491, -2.673, 0.876, 16.430, -2.887, 0.750, 16.963, -3.116, 0.795, 17.438, -3.552, 0.610, 17.481, -3.374, 0.750, 16.963, -3.116, 0.750, 16.963, -3.116, 0.983, 16.898, -3.360, 0.795, 17.438, -3.552, 0.610, 17.481, -3.374, 0.328, 17.518, -3.219, 0.393, 17.007, -2.937, 0.393, 17.007, -2.937, 0.750, 16.963, -3.116, 0.610, 17.481, -3.374, 0.328, 17.518, -3.219, -0.001, 17.520, -3.188, -0.001, 17.019, -2.901, -0.001, 17.019, -2.901, 0.393, 17.007, -2.937, 0.328, 17.518, -3.219, 2.387, -4.112, -0.380, 2.387, -8.843, -0.380, 2.791, -8.843, -1.700, 2.791, -8.843, -1.700, 2.791, -4.113, -1.700, 2.387, -4.112, -0.380, 2.387, -4.112, -0.380, 2.791, -4.113, -1.700, 2.791, 0.488, -1.701, 2.791, 0.488, -1.701, 2.387, 0.487, -0.380, 2.387, -4.112, -0.380, 2.387, 5.083, -0.380, 2.387, 0.487, -0.380, 2.791, 0.488, -1.701, 2.791, 0.488, -1.701, 2.791, 5.087, -1.701, 2.387, 5.083, -0.380, 2.386, 8.077, -0.380, 2.387, 5.083, -0.380, 2.791, 5.087, -1.701, 2.791, 5.087, -1.701, 2.791, 8.077, -1.700, 2.386, 8.077, -0.380, 1.589, 12.871, -1.554, 2.196, 12.789, -2.224, 1.949, 13.742, -2.459, 1.949, 13.742, -2.459, 1.407, 13.854, -1.906, 1.589, 12.871, -1.554, 1.224, 14.807, -2.236, 1.696, 14.695, -2.693, 1.434, 15.527, -2.930, 1.434, 15.527, -2.930, 1.043, 15.620, -2.564, 1.224, 14.807, -2.236, 0.876, 16.430, -2.887, 1.172, 16.359, -3.167, 0.983, 16.898, -3.360, 0.983, 16.898, -3.360, 0.750, 16.963, -3.116, 0.876, 16.430, -2.887, -0.001, 10.873, 0.270, -0.001, 9.684, 0.300, 1.377, 9.684, 0.137, 1.377, 9.684, 0.137, 1.151, 10.873, 0.068, -0.001, 10.873, 0.270, 2.387, 5.083, -0.380, 2.386, 8.077, -0.380, 1.456, 8.077, 0.137, 1.456, 8.077, 0.137, 1.455, 5.088, 0.138, 2.387, 5.083, -0.380, 2.791, 8.077, -1.700, 2.677, 9.684, -1.696, 2.252, 9.678, -0.575, 2.252, 9.678, -0.575, 2.386, 8.077, -0.380, 2.791, 8.077, -1.700, 1.843, 9.687, -0.162, 1.377, 9.684, 0.137, 1.456, 8.077, 0.137, 1.843, 9.687, -0.162, 1.456, 8.077, 0.137, 2.386, 8.077, -0.380, 2.252, 9.678, -0.575, 1.843, 9.687, -0.162, 2.386, 8.077, -0.380, 1.456, 8.077, 0.137, 1.377, 9.684, 0.137, -0.001, 9.684, 0.300, -0.001, 9.684, 0.300, -0.001, 8.077, 0.300, 1.456, 8.077, 0.137, 2.349, -10.858, -0.424, 2.087, -12.708, -0.443, 2.194, -12.708, -0.919, 2.194, -12.708, -0.919, 2.702, -10.858, -1.281, 2.349, -10.858, -0.424, 2.791, 8.077, -1.700, 2.791, 5.087, -1.701, 2.816, 5.070, -4.300, 2.816, 5.070, -4.300, 2.816, 8.077, -4.415, 2.791, 8.077, -1.700, 2.816, 0.471, -4.125, 2.816, 5.070, -4.300, 2.791, 5.087, -1.701, 2.791, 5.087, -1.701, 2.791, 0.488, -1.701, 2.816, 0.471, -4.125, 2.816, -4.143, -4.068, 2.816, 0.471, -4.125, 2.791, 0.488, -1.701, 2.791, 0.488, -1.701, 2.791, -4.113, -1.700, 2.816, -4.143, -4.068, 2.791, -4.113, -1.700, 2.791, -8.843, -1.700, 2.790, -8.843, -2.303, 2.816, -4.143, -4.068, 2.791, -4.113, -1.700, 2.790, -8.843, -2.303, 2.816, -4.143, -4.068, 2.790, -8.843, -2.303, 2.789, -8.843, -3.588, 2.816, -4.143, -4.068, 2.789, -8.843, -3.588, 2.814, -8.843, -4.416, 4.650, -0.336, -4.352, 2.816, 9.684, -4.619, 2.816, 8.077, -4.415, 4.650, -0.336, -4.352, 2.816, 8.077, -4.415, 2.816, 5.070, -4.300, 4.650, -0.336, -4.352, 2.816, 5.070, -4.300, 2.816, 0.471, -4.125, 4.650, -0.336, -4.352, 2.816, 0.471, -4.125, 2.816, -4.143, -4.068, 2.816, -4.143, -4.068, 11.232, -6.814, -4.385, 4.650, -0.336, -4.352, 11.232, -6.814, -4.385, 2.816, -4.143, -4.068, 2.814, -8.843, -4.416, 11.779, -7.869, -4.389, 11.232, -6.814, -4.385, 2.814, -8.843, -4.416, 11.779, -7.869, -4.389, 2.814, -8.843, -4.416, 2.813, -9.067, -4.435, 11.779, -7.869, -4.389, 2.813, -9.067, -4.435, 11.810, -9.076, -4.389, 1.479, 11.052, -0.326, 1.151, 10.873, 0.068, 1.566, 10.873, -0.294, 1.566, 10.873, -0.294, 1.151, 10.873, 0.068, 1.377, 9.684, 0.137, 1.377, 9.684, 0.137, 1.843, 9.687, -0.162, 1.566, 10.873, -0.294, 1.976, 11.099, -0.863, 1.479, 11.052, -0.326, 1.566, 10.873, -0.294, 1.566, 10.873, -0.294, 2.055, 10.873, -0.790, 1.976, 11.099, -0.863, 2.055, 10.873, -0.790, 1.566, 10.873, -0.294, 1.843, 9.687, -0.162, 1.843, 9.687, -0.162, 2.252, 9.678, -0.575, 2.055, 10.873, -0.790, 2.563, 10.873, -1.781, 2.460, 11.404, -1.891, 1.976, 11.099, -0.863, 1.976, 11.099, -0.863, 2.055, 10.873, -0.790, 2.563, 10.873, -1.781, 2.677, 9.684, -1.696, 2.563, 10.873, -1.781, 2.055, 10.873, -0.790, 2.055, 10.873, -0.790, 2.252, 9.678, -0.575, 2.677, 9.684, -1.696, 1.589, 12.871, -1.554, 1.751, 11.925, -1.118, 2.358, 11.934, -2.002, 2.358, 11.934, -2.002, 2.196, 12.789, -2.224, 1.589, 12.871, -1.554, 1.589, 12.871, -1.554, 0.960, 12.961, -1.196, 1.019, 12.405, -0.943, 1.019, 12.405, -0.943, 1.751, 11.925, -1.118, 1.589, 12.871, -1.554, 0.133, 12.768, -0.976, 0.147, 12.902, -1.049, -0.001, 12.891, -1.022, -0.001, 12.891, -1.022, -0.001, 12.772, -0.948, 0.133, 12.768, -0.976, 0.133, 12.768, -0.976, -0.001, 12.772, -0.948, -0.001, 12.152, -0.321, -0.001, 12.152, -0.321, 0.264, 12.125, -0.326, 0.133, 12.768, -0.976, 0.264, 12.125, -0.326, -0.001, 12.152, -0.321, -0.001, 11.659, 0.074, -0.001, 11.659, 0.074, 0.170, 11.627, 0.078, 0.264, 12.125, -0.326, 0.147, 12.902, -1.049, 0.133, 12.768, -0.976, 1.019, 12.405, -0.943, 1.019, 12.405, -0.943, 0.960, 12.961, -1.196, 0.147, 12.902, -1.049 ]) }, normal: { itemSize: 3, array: new Float32Array([ 0.000, 0.000, 1.000, -0.311, 0.012, 0.950, -0.304, -0.000, 0.953, -0.304, -0.000, 0.953, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, -1.000, 0.014, 0.023, -0.986, 0.042, 0.159, -0.972, 0.097, 0.213, -0.972, 0.097, 0.213, -0.995, 0.098, 0.030, -1.000, 0.014, 0.023, -0.304, -0.000, 0.953, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, -0.304, -0.000, 0.953, -0.304, -0.000, 0.953, -0.304, -0.000, 0.953, -0.777, 0.000, 0.629, -0.777, -0.000, 0.629, -0.777, -0.000, 0.629, -0.304, -0.000, 0.953, -0.304, -0.000, 0.953, -0.304, -0.000, 0.953, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, -0.304, -0.000, 0.953, -0.304, -0.000, 0.953, -0.304, -0.000, 0.953, -0.777, -0.000, 0.629, -0.777, -0.000, 0.630, -0.777, -0.000, 0.630, -0.304, -0.000, 0.953, -0.304, -0.000, 0.953, -0.304, -0.000, 0.953, -0.302, -0.001, 0.953, 0.000, -0.005, 1.000, 0.000, -0.005, 1.000, 0.000, 0.000, 1.000, -0.304, -0.000, 0.953, -0.304, -0.000, 0.953, -0.777, -0.000, 0.630, -0.775, -0.001, 0.632, -0.775, -0.001, 0.632, -0.302, -0.001, 0.953, -0.304, -0.000, 0.953, -0.996, -0.091, 0.020, -0.952, -0.307, 0.000, -0.952, -0.307, 0.000, -0.952, -0.307, 0.000, -0.994, -0.109, 0.024, -0.996, -0.091, 0.020, -0.006, -0.991, 0.133, -0.006, -0.991, 0.133, -0.006, -0.991, 0.133, 0.001, -0.992, 0.124, 0.001, -0.992, 0.124, 0.001, -0.992, 0.124, -0.016, -0.991, 0.134, -0.016, -0.991, 0.134, -0.016, -0.991, 0.134, -0.806, -0.114, 0.581, -0.389, -0.071, 0.919, -0.333, -0.031, 0.942, -0.333, -0.031, 0.942, -0.770, -0.082, 0.632, -0.806, -0.114, 0.581, 0.906, -0.059, -0.419, 0.906, -0.059, -0.419, 0.906, -0.059, -0.419, 0.929, -0.011, -0.369, 0.929, -0.011, -0.369, 0.929, -0.011, -0.369, -0.996, 0.010, 0.086, -0.996, 0.010, 0.086, -0.996, 0.010, 0.086, -1.000, 0.021, 0.011, -1.000, 0.021, 0.011, -1.000, 0.021, 0.011, -0.531, -0.070, -0.844, -0.439, -0.109, -0.892, -0.489, -0.088, -0.868, -0.489, -0.088, -0.868, -0.549, -0.060, -0.834, -0.552, -0.060, -0.832, -0.531, -0.070, -0.844, -0.489, -0.088, -0.868, -0.552, -0.060, -0.832, -0.302, -0.001, 0.953, -0.333, -0.031, 0.942, -0.103, 0.002, 0.995, -0.302, -0.001, 0.953, -0.103, 0.002, 0.995, -0.106, -0.013, 0.994, -0.302, -0.001, 0.953, -0.106, -0.013, 0.994, -0.000, -0.018, 1.000, -0.302, -0.001, 0.953, -0.000, -0.018, 1.000, 0.000, -0.005, 1.000, -0.351, 0.326, 0.878, -0.496, 0.391, 0.775, -0.611, 0.398, 0.684, -0.611, 0.398, 0.684, -0.441, 0.237, 0.865, -0.351, 0.326, 0.878, -0.238, 0.376, 0.896, -0.313, 0.513, 0.799, -0.496, 0.391, 0.775, -0.496, 0.391, 0.775, -0.351, 0.326, 0.878, -0.238, 0.376, 0.896, -0.119, 0.430, 0.895, -0.123, 0.646, 0.754, -0.313, 0.513, 0.799, -0.313, 0.513, 0.799, -0.238, 0.376, 0.896, -0.119, 0.430, 0.895, 0.000, 0.124, 0.992, 0.000, 0.462, 0.887, -0.119, 0.430, 0.895, 0.000, 0.124, 0.992, -0.119, 0.430, 0.895, -0.238, 0.376, 0.896, 0.000, 0.124, 0.992, -0.238, 0.376, 0.896, -0.351, 0.326, 0.878, 0.000, 0.124, 0.992, -0.351, 0.326, 0.878, -0.441, 0.237, 0.865, -0.928, 0.180, 0.326, -0.981, 0.195, 0.006, -0.995, 0.098, 0.030, -0.995, 0.098, 0.030, -0.972, 0.097, 0.213, -0.928, 0.180, 0.326, 0.005, 0.031, 1.000, 0.005, 0.031, 1.000, 0.005, 0.031, 1.000, 0.002, 0.029, 1.000, 0.002, 0.029, 1.000, 0.002, 0.029, 1.000, 0.021, 0.003, 1.000, 0.021, 0.003, 1.000, 0.021, 0.003, 1.000, -0.333, -0.031, 0.942, -0.389, -0.071, 0.919, -0.209, -0.068, 0.975, -0.333, -0.031, 0.942, -0.209, -0.068, 0.975, -0.184, -0.051, 0.982, -0.103, 0.002, 0.995, -0.333, -0.031, 0.942, -0.184, -0.051, 0.982, -0.549, 0.016, 0.835, -0.545, 0.014, 0.839, -0.574, 0.027, 0.818, -0.574, 0.027, 0.818, -0.582, 0.030, 0.813, -0.549, 0.016, 0.835, -0.333, -0.031, 0.942, -0.302, -0.001, 0.953, -0.775, -0.001, 0.632, -0.775, -0.001, 0.632, -0.770, -0.082, 0.632, -0.333, -0.031, 0.942, -0.989, 0.002, 0.145, -1.000, -0.001, 0.000, -0.994, -0.109, 0.024, -0.994, -0.109, 0.024, -0.958, -0.064, 0.279, -0.989, 0.002, 0.145, -0.994, -0.109, 0.024, -1.000, -0.001, 0.000, -1.000, -0.002, 0.014, -1.000, -0.002, 0.014, -0.996, -0.091, 0.020, -0.994, -0.109, 0.024, -0.996, -0.091, 0.020, -1.000, -0.002, 0.014, -1.000, -0.002, 0.027, -0.996, -0.091, 0.020, -1.000, -0.002, 0.027, -1.000, -0.009, 0.007, -0.996, -0.091, 0.020, -1.000, -0.009, 0.007, -1.000, -0.013, 0.003, -0.979, -0.095, 0.179, -0.962, -0.124, 0.244, -0.996, -0.091, 0.020, -0.996, -0.091, 0.020, -1.000, -0.013, 0.003, -0.979, -0.095, 0.179, -0.989, -0.135, -0.069, -0.988, -0.134, -0.070, -0.994, -0.096, -0.049, -0.994, -0.096, -0.049, -0.999, -0.044, -0.011, -0.989, -0.135, -0.069, -1.000, -0.011, 0.005, -1.000, 0.004, 0.011, -1.000, 0.001, -0.002, -1.000, 0.001, -0.002, -1.000, -0.004, -0.000, -1.000, -0.003, -0.007, -1.000, -0.011, 0.005, -1.000, 0.001, -0.002, -1.000, -0.003, -0.007, -1.000, -0.003, -0.007, -0.996, -0.004, 0.089, -0.999, -0.044, -0.011, -1.000, -0.011, 0.005, -1.000, -0.003, -0.007, -0.999, -0.044, -0.011, -0.994, -0.096, -0.049, -1.000, -0.011, 0.005, -0.999, -0.044, -0.011, -0.996, -0.047, 0.079, -0.992, -0.069, 0.103, -0.999, -0.042, 0.021, -0.999, -0.042, 0.021, -0.999, -0.035, 0.000, -1.000, -0.010, 0.009, -0.996, -0.047, 0.079, -0.999, -0.042, 0.021, -1.000, -0.010, 0.009, -0.996, -0.047, 0.079, -1.000, -0.010, 0.009, -1.000, 0.000, 0.000, -0.996, -0.047, 0.079, -1.000, 0.000, 0.000, -1.000, 0.003, 0.026, -0.996, -0.047, 0.079, -1.000, 0.003, 0.026, -1.000, 0.004, 0.011, -1.000, -0.011, 0.005, -0.996, -0.047, 0.079, -1.000, 0.004, 0.011, -0.958, -0.064, 0.279, -0.770, -0.082, 0.632, -0.775, -0.001, 0.632, -0.775, -0.001, 0.632, -0.989, 0.002, 0.145, -0.958, -0.064, 0.279, -0.293, 0.393, 0.871, -0.324, 0.404, 0.855, -0.138, 0.418, 0.898, -0.293, 0.393, 0.871, -0.138, 0.418, 0.898, 0.000, 0.448, 0.894, -0.293, 0.393, 0.871, 0.000, 0.448, 0.894, -0.000, 0.397, 0.918, -0.594, 0.367, 0.716, -0.620, 0.373, 0.690, -0.324, 0.404, 0.855, -0.324, 0.404, 0.855, -0.293, 0.393, 0.871, -0.594, 0.367, 0.716, -0.777, 0.326, 0.538, -0.841, 0.262, 0.474, -0.760, 0.389, 0.522, -0.760, 0.389, 0.522, -0.698, 0.394, 0.598, -0.777, 0.326, 0.538, -0.281, 0.403, 0.871, -0.293, 0.393, 0.871, -0.000, 0.397, 0.918, -0.000, 0.397, 0.918, 0.000, 0.400, 0.916, -0.281, 0.403, 0.871, -0.574, 0.390, 0.720, -0.594, 0.367, 0.716, -0.293, 0.393, 0.871, -0.293, 0.393, 0.871, -0.281, 0.403, 0.871, -0.574, 0.390, 0.720, -0.298, 0.413, 0.861, -0.281, 0.403, 0.871, 0.000, 0.400, 0.916, 0.000, 0.400, 0.916, 0.000, 0.411, 0.912, -0.298, 0.413, 0.861, -0.579, 0.404, 0.708, -0.574, 0.390, 0.720, -0.281, 0.403, 0.871, -0.281, 0.403, 0.871, -0.298, 0.413, 0.861, -0.579, 0.404, 0.708, -0.693, 0.366, 0.620, -0.707, 0.343, 0.618, -0.594, 0.367, 0.716, -0.594, 0.367, 0.716, -0.574, 0.390, 0.720, -0.693, 0.366, 0.620, -0.676, 0.414, 0.610, -0.679, 0.394, 0.620, -0.579, 0.404, 0.708, -0.579, 0.404, 0.708, -0.580, 0.424, 0.696, -0.676, 0.414, 0.610, -0.580, 0.424, 0.696, -0.579, 0.404, 0.708, -0.298, 0.413, 0.861, -0.298, 0.413, 0.861, -0.290, 0.445, 0.847, -0.580, 0.424, 0.696, -0.290, 0.445, 0.847, -0.298, 0.413, 0.861, 0.000, 0.411, 0.912, 0.000, 0.411, 0.912, 0.000, 0.449, 0.894, -0.290, 0.445, 0.847, -0.276, 0.483, 0.831, -0.290, 0.445, 0.847, 0.000, 0.449, 0.894, 0.000, 0.449, 0.894, 0.000, 0.485, 0.874, -0.276, 0.483, 0.831, -0.581, 0.457, 0.674, -0.580, 0.424, 0.696, -0.290, 0.445, 0.847, -0.290, 0.445, 0.847, -0.276, 0.483, 0.831, -0.581, 0.457, 0.674, -0.679, 0.460, 0.572, -0.698, 0.434, 0.570, -0.581, 0.457, 0.674, -0.581, 0.457, 0.674, -0.565, 0.478, 0.672, -0.679, 0.460, 0.572, -0.565, 0.478, 0.672, -0.581, 0.457, 0.674, -0.276, 0.483, 0.831, -0.276, 0.483, 0.831, -0.284, 0.492, 0.823, -0.565, 0.478, 0.672, -0.284, 0.492, 0.823, -0.276, 0.483, 0.831, 0.000, 0.485, 0.874, 0.000, 0.485, 0.874, 0.000, 0.496, 0.868, -0.284, 0.492, 0.823, -0.777, -0.000, 0.630, -0.988, -0.000, 0.153, -0.989, 0.002, 0.145, -0.989, 0.002, 0.145, -0.775, -0.001, 0.632, -0.777, -0.000, 0.630, -0.777, -0.000, 0.630, -0.777, -0.000, 0.629, -0.988, 0.000, 0.153, -0.988, 0.000, 0.153, -0.988, -0.000, 0.153, -0.777, -0.000, 0.630, -0.777, 0.000, 0.629, -0.988, 0.000, 0.153, -0.988, 0.000, 0.153, -0.988, 0.000, 0.153, -0.777, -0.000, 0.629, -0.777, 0.000, 0.629, -0.783, 0.048, 0.620, -0.986, 0.042, 0.159, -0.988, 0.000, 0.153, -0.988, 0.000, 0.153, -0.777, 0.000, 0.629, -0.783, 0.048, 0.620, -0.620, 0.373, 0.690, -0.594, 0.367, 0.716, -0.707, 0.343, 0.618, -0.707, 0.343, 0.618, -0.722, 0.317, 0.615, -0.620, 0.373, 0.690, -0.574, 0.390, 0.720, -0.579, 0.404, 0.708, -0.679, 0.394, 0.620, -0.679, 0.394, 0.620, -0.693, 0.366, 0.620, -0.574, 0.390, 0.720, -0.580, 0.424, 0.696, -0.581, 0.457, 0.674, -0.698, 0.434, 0.570, -0.698, 0.434, 0.570, -0.676, 0.414, 0.610, -0.580, 0.424, 0.696, 0.000, 0.124, 0.992, -0.441, 0.237, 0.865, -0.358, 0.078, 0.931, -0.358, 0.078, 0.931, -0.000, 0.014, 1.000, 0.000, 0.124, 0.992, -0.777, 0.000, 0.629, -0.304, -0.000, 0.953, -0.311, 0.012, 0.950, -0.311, 0.012, 0.950, -0.783, 0.048, 0.620, -0.777, 0.000, 0.629, -0.986, 0.042, 0.159, -0.783, 0.048, 0.620, -0.834, 0.172, 0.525, -0.834, 0.172, 0.525, -0.972, 0.097, 0.213, -0.986, 0.042, 0.159, -0.311, 0.012, 0.950, -0.358, 0.078, 0.931, -0.611, 0.153, 0.777, -0.783, 0.048, 0.620, -0.311, 0.012, 0.950, -0.611, 0.153, 0.777, -0.834, 0.172, 0.525, -0.783, 0.048, 0.620, -0.611, 0.153, 0.777, -0.311, 0.012, 0.950, 0.000, 0.000, 1.000, -0.000, 0.014, 1.000, -0.000, 0.014, 1.000, -0.358, 0.078, 0.931, -0.311, 0.012, 0.950, -0.770, -0.082, 0.632, -0.958, -0.064, 0.279, -0.954, -0.149, 0.260, -0.954, -0.149, 0.260, -0.806, -0.114, 0.581, -0.770, -0.082, 0.632, -0.986, 0.042, 0.159, -1.000, 0.014, 0.023, -1.000, 0.000, 0.010, -1.000, 0.000, 0.010, -0.988, 0.000, 0.153, -0.986, 0.042, 0.159, -1.000, 0.000, 0.010, -0.988, 0.000, 0.153, -0.988, 0.000, 0.153, -0.988, 0.000, 0.153, -1.000, 0.000, 0.010, -1.000, 0.000, 0.010, -1.000, -0.001, 0.011, -0.988, -0.000, 0.153, -0.988, 0.000, 0.153, -0.988, 0.000, 0.153, -1.000, 0.000, 0.010, -1.000, -0.001, 0.011, -1.000, -0.001, 0.011, -1.000, -0.002, 0.027, -1.000, -0.002, 0.014, -1.000, -0.001, 0.011, -1.000, -0.002, 0.014, -1.000, -0.001, 0.000, -1.000, -0.001, 0.000, -0.989, 0.002, 0.145, -0.988, -0.000, 0.153, -1.000, -0.001, 0.011, -1.000, -0.001, 0.000, -0.988, -0.000, 0.153, -0.110, 0.032, 0.993, -0.135, 0.028, 0.990, -0.139, 0.038, 0.990, -0.110, 0.032, 0.993, -0.139, 0.038, 0.990, -0.456, 0.106, 0.884, -0.110, 0.032, 0.993, -0.456, 0.106, 0.884, -0.478, 0.111, 0.872, -0.110, 0.032, 0.993, -0.010, -0.010, 1.000, -0.048, -0.006, 0.999, -0.048, -0.006, 0.999, -0.135, 0.028, 0.990, -0.110, 0.032, 0.993, 0.004, -0.003, 1.000, 0.005, -0.000, 1.000, -0.005, -0.074, 0.997, 0.004, -0.003, 1.000, -0.005, -0.074, 0.997, -0.009, -0.075, 0.997, -0.009, -0.075, 0.997, -0.048, -0.006, 0.999, -0.010, -0.010, 1.000, 0.004, -0.003, 1.000, -0.009, -0.075, 0.997, -0.010, -0.010, 1.000, -0.611, 0.398, 0.684, -0.644, 0.316, 0.697, -0.441, 0.237, 0.865, -0.644, 0.316, 0.697, -0.611, 0.153, 0.777, -0.358, 0.078, 0.931, -0.358, 0.078, 0.931, -0.441, 0.237, 0.865, -0.644, 0.316, 0.697, -0.760, 0.389, 0.522, -0.778, 0.315, 0.544, -0.644, 0.316, 0.697, -0.644, 0.316, 0.697, -0.611, 0.398, 0.684, -0.760, 0.389, 0.522, -0.778, 0.315, 0.544, -0.834, 0.172, 0.525, -0.611, 0.153, 0.777, -0.611, 0.153, 0.777, -0.644, 0.316, 0.697, -0.778, 0.315, 0.544, -0.928, 0.180, 0.326, -0.778, 0.315, 0.544, -0.760, 0.389, 0.522, -0.760, 0.389, 0.522, -0.841, 0.262, 0.474, -0.928, 0.180, 0.326, -0.972, 0.097, 0.213, -0.834, 0.172, 0.525, -0.778, 0.315, 0.544, -0.778, 0.315, 0.544, -0.928, 0.180, 0.326, -0.972, 0.097, 0.213, -0.620, 0.373, 0.690, -0.722, 0.317, 0.615, -0.777, 0.326, 0.538, -0.777, 0.326, 0.538, -0.698, 0.394, 0.598, -0.620, 0.373, 0.690, -0.620, 0.373, 0.690, -0.698, 0.394, 0.598, -0.366, 0.430, 0.826, -0.366, 0.430, 0.826, -0.324, 0.404, 0.855, -0.620, 0.373, 0.690, -0.156, 0.550, 0.821, -0.000, 0.629, 0.777, 0.000, 0.448, 0.894, 0.000, 0.448, 0.894, -0.138, 0.418, 0.898, -0.156, 0.550, 0.821, -0.156, 0.550, 0.821, -0.123, 0.646, 0.754, 0.000, 0.675, 0.737, 0.000, 0.675, 0.737, -0.000, 0.629, 0.777, -0.156, 0.550, 0.821, -0.123, 0.646, 0.754, -0.119, 0.430, 0.895, 0.000, 0.462, 0.887, 0.000, 0.462, 0.887, 0.000, 0.675, 0.737, -0.123, 0.646, 0.754, -0.138, 0.418, 0.898, -0.324, 0.404, 0.855, -0.366, 0.430, 0.826, -0.366, 0.430, 0.826, -0.156, 0.550, 0.821, -0.138, 0.418, 0.898, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.304, -0.000, 0.953, 0.304, -0.000, 0.953, 0.311, 0.012, 0.950, 0.000, 0.000, 1.000, 1.000, 0.014, 0.023, 0.995, 0.098, 0.030, 0.972, 0.097, 0.213, 0.972, 0.097, 0.213, 0.986, 0.042, 0.159, 1.000, 0.014, 0.023, 0.304, -0.000, 0.953, 0.304, -0.000, 0.953, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.304, -0.000, 0.953, 0.304, -0.000, 0.953, 0.304, -0.000, 0.953, 0.777, -0.000, 0.629, 0.777, -0.000, 0.629, 0.777, 0.000, 0.629, 0.304, -0.000, 0.953, 0.304, -0.000, 0.953, 0.304, -0.000, 0.953, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.304, -0.000, 0.953, 0.304, -0.000, 0.953, 0.304, -0.000, 0.953, 0.777, -0.000, 0.630, 0.777, -0.000, 0.630, 0.777, -0.000, 0.629, 0.304, -0.000, 0.953, 0.304, -0.000, 0.953, 0.000, 0.000, 1.000, 0.000, -0.005, 1.000, 0.000, -0.005, 1.000, 0.302, -0.001, 0.953, 0.304, -0.000, 0.953, 0.304, -0.000, 0.953, 0.302, -0.001, 0.953, 0.775, -0.001, 0.632, 0.775, -0.001, 0.632, 0.777, -0.000, 0.630, 0.304, -0.000, 0.953, 0.996, -0.091, 0.020, 0.994, -0.109, 0.024, 0.952, -0.307, 0.000, 0.952, -0.307, 0.000, 0.952, -0.307, 0.000, 0.996, -0.091, 0.020, 0.016, -0.991, 0.134, 0.016, -0.991, 0.134, 0.016, -0.991, 0.134, -0.001, -0.992, 0.124, -0.001, -0.992, 0.124, -0.001, -0.992, 0.124, 0.006, -0.991, 0.133, 0.006, -0.991, 0.133, 0.006, -0.991, 0.133, 0.806, -0.114, 0.581, 0.770, -0.082, 0.632, 0.333, -0.031, 0.942, 0.333, -0.031, 0.942, 0.389, -0.071, 0.919, 0.806, -0.114, 0.581, -0.929, -0.011, -0.369, -0.929, -0.011, -0.369, -0.929, -0.011, -0.369, -0.906, -0.059, -0.419, -0.906, -0.059, -0.419, -0.906, -0.059, -0.419, 1.000, 0.021, 0.011, 1.000, 0.021, 0.011, 1.000, 0.021, 0.011, 0.996, 0.010, 0.086, 0.996, 0.010, 0.086, 0.996, 0.010, 0.086, 0.552, -0.060, -0.832, 0.549, -0.060, -0.834, 0.489, -0.088, -0.868, 0.531, -0.070, -0.844, 0.552, -0.060, -0.832, 0.489, -0.088, -0.868, 0.531, -0.070, -0.844, 0.489, -0.088, -0.868, 0.439, -0.109, -0.892, 0.302, -0.001, 0.953, 0.000, -0.005, 1.000, -0.000, -0.018, 1.000, 0.302, -0.001, 0.953, -0.000, -0.018, 1.000, 0.106, -0.013, 0.994, 0.302, -0.001, 0.953, 0.106, -0.013, 0.994, 0.103, 0.002, 0.995, 0.302, -0.001, 0.953, 0.103, 0.002, 0.995, 0.333, -0.031, 0.942, 0.351, 0.326, 0.878, 0.441, 0.237, 0.865, 0.611, 0.398, 0.684, 0.611, 0.398, 0.684, 0.496, 0.391, 0.775, 0.351, 0.326, 0.878, 0.238, 0.376, 0.896, 0.351, 0.326, 0.878, 0.496, 0.391, 0.775, 0.496, 0.391, 0.775, 0.313, 0.513, 0.799, 0.238, 0.376, 0.896, 0.119, 0.430, 0.895, 0.238, 0.376, 0.896, 0.313, 0.513, 0.799, 0.313, 0.513, 0.799, 0.123, 0.646, 0.754, 0.119, 0.430, 0.895, 0.000, 0.124, 0.992, 0.441, 0.237, 0.865, 0.351, 0.326, 0.878, 0.000, 0.124, 0.992, 0.351, 0.326, 0.878, 0.238, 0.376, 0.896, 0.000, 0.124, 0.992, 0.238, 0.376, 0.896, 0.119, 0.430, 0.895, 0.000, 0.124, 0.992, 0.119, 0.430, 0.895, 0.000, 0.462, 0.887, 0.928, 0.180, 0.326, 0.972, 0.097, 0.213, 0.995, 0.098, 0.030, 0.995, 0.098, 0.030, 0.981, 0.195, 0.006, 0.928, 0.180, 0.326, -0.002, 0.029, 1.000, -0.002, 0.029, 1.000, -0.002, 0.029, 1.000, -0.005, 0.031, 1.000, -0.005, 0.031, 1.000, -0.005, 0.031, 1.000, -0.021, 0.003, 1.000, -0.021, 0.003, 1.000, -0.021, 0.003, 1.000, 0.209, -0.068, 0.975, 0.389, -0.071, 0.919, 0.333, -0.031, 0.942, 0.184, -0.051, 0.982, 0.209, -0.068, 0.975, 0.333, -0.031, 0.942, 0.103, 0.002, 0.995, 0.184, -0.051, 0.982, 0.333, -0.031, 0.942, 0.549, 0.016, 0.835, 0.582, 0.030, 0.813, 0.574, 0.027, 0.818, 0.574, 0.027, 0.818, 0.545, 0.014, 0.839, 0.549, 0.016, 0.835, 0.333, -0.031, 0.942, 0.770, -0.082, 0.632, 0.775, -0.001, 0.632, 0.775, -0.001, 0.632, 0.302, -0.001, 0.953, 0.333, -0.031, 0.942, 0.989, 0.002, 0.145, 0.958, -0.064, 0.279, 0.994, -0.109, 0.024, 0.994, -0.109, 0.024, 1.000, -0.001, 0.000, 0.989, 0.002, 0.145, 0.994, -0.109, 0.024, 0.996, -0.091, 0.020, 1.000, -0.002, 0.014, 1.000, -0.002, 0.014, 1.000, -0.001, 0.000, 0.994, -0.109, 0.024, 0.996, -0.091, 0.020, 1.000, -0.013, 0.003, 1.000, -0.009, 0.007, 0.996, -0.091, 0.020, 1.000, -0.009, 0.007, 1.000, -0.002, 0.027, 0.996, -0.091, 0.020, 1.000, -0.002, 0.027, 1.000, -0.002, 0.014, 0.979, -0.095, 0.179, 1.000, -0.013, 0.003, 0.996, -0.091, 0.020, 0.996, -0.091, 0.020, 0.962, -0.124, 0.244, 0.979, -0.095, 0.179, 0.989, -0.135, -0.069, 0.999, -0.044, -0.011, 0.994, -0.096, -0.049, 0.994, -0.096, -0.049, 0.988, -0.134, -0.070, 0.989, -0.135, -0.069, 0.999, -0.044, -0.011, 0.996, -0.004, 0.089, 1.000, -0.003, -0.007, 1.000, -0.003, -0.007, 1.000, -0.004, -0.000, 1.000, 0.001, -0.002, 1.000, 0.001, -0.002, 1.000, 0.004, 0.011, 1.000, -0.011, 0.005, 1.000, -0.003, -0.007, 1.000, 0.001, -0.002, 1.000, -0.011, 0.005, 0.999, -0.044, -0.011, 1.000, -0.003, -0.007, 1.000, -0.011, 0.005, 0.994, -0.096, -0.049, 0.999, -0.044, -0.011, 1.000, -0.011, 0.005, 1.000, -0.010, 0.009, 0.999, -0.035, 0.000, 0.999, -0.042, 0.021, 0.996, -0.047, 0.079, 1.000, -0.010, 0.009, 0.999, -0.042, 0.021, 0.996, -0.047, 0.079, 0.999, -0.042, 0.021, 0.992, -0.069, 0.103, 1.000, 0.000, 0.000, 1.000, -0.010, 0.009, 0.996, -0.047, 0.079, 1.000, 0.003, 0.026, 1.000, 0.000, 0.000, 0.996, -0.047, 0.079, 1.000, 0.004, 0.011, 1.000, 0.003, 0.026, 0.996, -0.047, 0.079, 1.000, -0.011, 0.005, 1.000, 0.004, 0.011, 0.996, -0.047, 0.079, 0.958, -0.064, 0.279, 0.989, 0.002, 0.145, 0.775, -0.001, 0.632, 0.775, -0.001, 0.632, 0.770, -0.082, 0.632, 0.958, -0.064, 0.279, 0.293, 0.393, 0.871, -0.000, 0.397, 0.918, 0.000, 0.448, 0.894, 0.293, 0.393, 0.871, 0.000, 0.448, 0.894, 0.138, 0.418, 0.898, 0.293, 0.393, 0.871, 0.138, 0.418, 0.898, 0.324, 0.404, 0.855, 0.594, 0.367, 0.716, 0.293, 0.393, 0.871, 0.324, 0.404, 0.855, 0.324, 0.404, 0.855, 0.620, 0.373, 0.690, 0.594, 0.367, 0.716, 0.777, 0.326, 0.538, 0.698, 0.394, 0.598, 0.760, 0.389, 0.522, 0.760, 0.389, 0.522, 0.841, 0.262, 0.474, 0.777, 0.326, 0.538, 0.281, 0.403, 0.871, 0.000, 0.400, 0.916, -0.000, 0.397, 0.918, -0.000, 0.397, 0.918, 0.293, 0.393, 0.871, 0.281, 0.403, 0.871, 0.574, 0.390, 0.720, 0.281, 0.403, 0.871, 0.293, 0.393, 0.871, 0.293, 0.393, 0.871, 0.594, 0.367, 0.716, 0.574, 0.390, 0.720, 0.298, 0.413, 0.861, 0.000, 0.411, 0.912, 0.000, 0.400, 0.916, 0.000, 0.400, 0.916, 0.281, 0.403, 0.871, 0.298, 0.413, 0.861, 0.579, 0.404, 0.708, 0.298, 0.413, 0.861, 0.281, 0.403, 0.871, 0.281, 0.403, 0.871, 0.574, 0.390, 0.720, 0.579, 0.404, 0.708, 0.693, 0.366, 0.620, 0.574, 0.390, 0.720, 0.594, 0.367, 0.716, 0.594, 0.367, 0.716, 0.707, 0.343, 0.618, 0.693, 0.366, 0.620, 0.676, 0.414, 0.610, 0.580, 0.424, 0.696, 0.579, 0.404, 0.708, 0.579, 0.404, 0.708, 0.679, 0.394, 0.620, 0.676, 0.414, 0.610, 0.580, 0.424, 0.696, 0.290, 0.445, 0.847, 0.298, 0.413, 0.861, 0.298, 0.413, 0.861, 0.579, 0.404, 0.708, 0.580, 0.424, 0.696, 0.290, 0.445, 0.847, 0.000, 0.449, 0.894, 0.000, 0.411, 0.912, 0.000, 0.411, 0.912, 0.298, 0.413, 0.861, 0.290, 0.445, 0.847, 0.276, 0.483, 0.831, 0.000, 0.485, 0.874, 0.000, 0.449, 0.894, 0.000, 0.449, 0.894, 0.290, 0.445, 0.847, 0.276, 0.483, 0.831, 0.581, 0.457, 0.674, 0.276, 0.483, 0.831, 0.290, 0.445, 0.847, 0.290, 0.445, 0.847, 0.580, 0.424, 0.696, 0.581, 0.457, 0.674, 0.679, 0.460, 0.572, 0.565, 0.478, 0.672, 0.581, 0.457, 0.674, 0.581, 0.457, 0.674, 0.698, 0.434, 0.570, 0.679, 0.460, 0.572, 0.565, 0.478, 0.672, 0.284, 0.492, 0.823, 0.276, 0.483, 0.831, 0.276, 0.483, 0.831, 0.581, 0.457, 0.674, 0.565, 0.478, 0.672, 0.284, 0.492, 0.823, 0.000, 0.496, 0.868, 0.000, 0.485, 0.874, 0.000, 0.485, 0.874, 0.276, 0.483, 0.831, 0.284, 0.492, 0.823, 0.777, -0.000, 0.630, 0.775, -0.001, 0.632, 0.989, 0.002, 0.145, 0.989, 0.002, 0.145, 0.988, -0.000, 0.153, 0.777, -0.000, 0.630, 0.777, -0.000, 0.630, 0.988, -0.000, 0.153, 0.988, 0.000, 0.153, 0.988, 0.000, 0.153, 0.777, -0.000, 0.629, 0.777, -0.000, 0.630, 0.777, 0.000, 0.629, 0.777, -0.000, 0.629, 0.988, 0.000, 0.153, 0.988, 0.000, 0.153, 0.988, 0.000, 0.153, 0.777, 0.000, 0.629, 0.783, 0.048, 0.620, 0.777, 0.000, 0.629, 0.988, 0.000, 0.153, 0.988, 0.000, 0.153, 0.986, 0.042, 0.159, 0.783, 0.048, 0.620, 0.620, 0.373, 0.690, 0.722, 0.317, 0.615, 0.707, 0.343, 0.618, 0.707, 0.343, 0.618, 0.594, 0.367, 0.716, 0.620, 0.373, 0.690, 0.574, 0.390, 0.720, 0.693, 0.366, 0.620, 0.679, 0.394, 0.620, 0.679, 0.394, 0.620, 0.579, 0.404, 0.708, 0.574, 0.390, 0.720, 0.580, 0.424, 0.696, 0.676, 0.414, 0.610, 0.698, 0.434, 0.570, 0.698, 0.434, 0.570, 0.581, 0.457, 0.674, 0.580, 0.424, 0.696, 0.000, 0.124, 0.992, -0.000, 0.014, 1.000, 0.358, 0.078, 0.931, 0.358, 0.078, 0.931, 0.441, 0.237, 0.865, 0.000, 0.124, 0.992, 0.777, 0.000, 0.629, 0.783, 0.048, 0.620, 0.311, 0.012, 0.950, 0.311, 0.012, 0.950, 0.304, -0.000, 0.953, 0.777, 0.000, 0.629, 0.986, 0.042, 0.159, 0.972, 0.097, 0.213, 0.834, 0.172, 0.525, 0.834, 0.172, 0.525, 0.783, 0.048, 0.620, 0.986, 0.042, 0.159, 0.611, 0.153, 0.777, 0.358, 0.078, 0.931, 0.311, 0.012, 0.950, 0.611, 0.153, 0.777, 0.311, 0.012, 0.950, 0.783, 0.048, 0.620, 0.834, 0.172, 0.525, 0.611, 0.153, 0.777, 0.783, 0.048, 0.620, 0.311, 0.012, 0.950, 0.358, 0.078, 0.931, -0.000, 0.014, 1.000, -0.000, 0.014, 1.000, 0.000, 0.000, 1.000, 0.311, 0.012, 0.950, 0.770, -0.082, 0.632, 0.806, -0.114, 0.581, 0.954, -0.149, 0.260, 0.954, -0.149, 0.260, 0.958, -0.064, 0.279, 0.770, -0.082, 0.632, 0.986, 0.042, 0.159, 0.988, 0.000, 0.153, 1.000, 0.000, 0.010, 1.000, 0.000, 0.010, 1.000, 0.014, 0.023, 0.986, 0.042, 0.159, 1.000, 0.000, 0.010, 1.000, 0.000, 0.010, 0.988, 0.000, 0.153, 0.988, 0.000, 0.153, 0.988, 0.000, 0.153, 1.000, 0.000, 0.010, 1.000, -0.001, 0.011, 1.000, 0.000, 0.010, 0.988, 0.000, 0.153, 0.988, 0.000, 0.153, 0.988, -0.000, 0.153, 1.000, -0.001, 0.011, 0.988, -0.000, 0.153, 0.989, 0.002, 0.145, 1.000, -0.001, 0.000, 1.000, -0.001, 0.011, 0.988, -0.000, 0.153, 1.000, -0.001, 0.000, 1.000, -0.001, 0.011, 1.000, -0.001, 0.000, 1.000, -0.002, 0.014, 1.000, -0.001, 0.011, 1.000, -0.002, 0.014, 1.000, -0.002, 0.027, 0.110, 0.032, 0.993, 0.478, 0.111, 0.872, 0.456, 0.106, 0.884, 0.110, 0.032, 0.993, 0.456, 0.106, 0.884, 0.139, 0.038, 0.990, 0.110, 0.032, 0.993, 0.139, 0.038, 0.990, 0.135, 0.028, 0.990, 0.110, 0.032, 0.993, 0.135, 0.028, 0.990, 0.048, -0.006, 0.999, 0.048, -0.006, 0.999, 0.010, -0.010, 1.000, 0.110, 0.032, 0.993, 0.010, -0.010, 1.000, 0.048, -0.006, 0.999, 0.009, -0.075, 0.997, -0.004, -0.003, 1.000, 0.010, -0.010, 1.000, 0.009, -0.075, 0.997, -0.004, -0.003, 1.000, 0.009, -0.075, 0.997, 0.005, -0.074, 0.997, -0.004, -0.003, 1.000, 0.005, -0.074, 0.997, -0.005, -0.000, 1.000, 0.611, 0.398, 0.684, 0.441, 0.237, 0.865, 0.644, 0.316, 0.697, 0.644, 0.316, 0.697, 0.441, 0.237, 0.865, 0.358, 0.078, 0.931, 0.358, 0.078, 0.931, 0.611, 0.153, 0.777, 0.644, 0.316, 0.697, 0.760, 0.389, 0.522, 0.611, 0.398, 0.684, 0.644, 0.316, 0.697, 0.644, 0.316, 0.697, 0.778, 0.315, 0.544, 0.760, 0.389, 0.522, 0.778, 0.315, 0.544, 0.644, 0.316, 0.697, 0.611, 0.153, 0.777, 0.611, 0.153, 0.777, 0.834, 0.172, 0.525, 0.778, 0.315, 0.544, 0.928, 0.180, 0.326, 0.841, 0.262, 0.474, 0.760, 0.389, 0.522, 0.760, 0.389, 0.522, 0.778, 0.315, 0.544, 0.928, 0.180, 0.326, 0.972, 0.097, 0.213, 0.928, 0.180, 0.326, 0.778, 0.315, 0.544, 0.778, 0.315, 0.544, 0.834, 0.172, 0.525, 0.972, 0.097, 0.213, 0.620, 0.373, 0.690, 0.698, 0.394, 0.598, 0.777, 0.326, 0.538, 0.777, 0.326, 0.538, 0.722, 0.317, 0.615, 0.620, 0.373, 0.690, 0.620, 0.373, 0.690, 0.324, 0.404, 0.855, 0.366, 0.430, 0.826, 0.366, 0.430, 0.826, 0.698, 0.394, 0.598, 0.620, 0.373, 0.690, 0.156, 0.550, 0.821, 0.138, 0.418, 0.898, 0.000, 0.448, 0.894, 0.000, 0.448, 0.894, -0.000, 0.629, 0.777, 0.156, 0.550, 0.821, 0.156, 0.550, 0.821, -0.000, 0.629, 0.777, 0.000, 0.675, 0.737, 0.000, 0.675, 0.737, 0.123, 0.646, 0.754, 0.156, 0.550, 0.821, 0.123, 0.646, 0.754, 0.000, 0.675, 0.737, 0.000, 0.462, 0.887, 0.000, 0.462, 0.887, 0.119, 0.430, 0.895, 0.123, 0.646, 0.754, 0.138, 0.418, 0.898, 0.156, 0.550, 0.821, 0.366, 0.430, 0.826, 0.366, 0.430, 0.826, 0.324, 0.404, 0.855, 0.138, 0.418, 0.898 ]) } };  }},\r\n			Bottom       : {get once(){return { position: { itemSize: 3, array: new Float32Array([ -1.450, -0.612, -5.830, -1.450, 9.684, -5.436, -0.000, 9.684, -5.476, -0.000, 9.684, -5.476, -0.000, -0.612, -5.844, -1.450, -0.612, -5.830, -5.088, -0.121, -4.586, -4.652, -0.336, -4.352, -2.819, 9.684, -4.619, -2.819, 9.684, -4.619, -2.893, 9.684, -4.750, -5.088, -0.121, -4.586, -4.653, -0.339, -5.238, -5.083, -0.108, -5.004, -2.842, 9.684, -5.003, -2.842, 9.684, -5.003, -2.585, 9.684, -5.161, -4.653, -0.339, -5.238, -0.000, -9.560, -5.719, -0.000, -12.708, -4.988, -1.450, -12.708, -4.984, -1.450, -12.708, -4.984, -1.450, -9.560, -5.689, -0.000, -9.560, -5.719, -1.450, -9.560, -5.689, -1.450, -12.708, -4.984, -2.793, -12.708, -4.973, -2.793, -12.708, -4.973, -2.819, -9.560, -5.607, -1.450, -9.560, -5.689, -2.819, -9.560, -5.607, -11.819, -9.278, -4.820, -11.782, -7.869, -4.820, -2.819, -9.560, -5.607, -11.782, -7.869, -4.820, -11.221, -6.801, -4.868, -2.819, -9.560, -5.607, -11.221, -6.801, -4.868, -8.553, -4.176, -5.019, -2.818, -5.808, -5.618, -2.819, -9.560, -5.607, -8.553, -4.176, -5.019, -2.818, -5.808, -5.618, -8.553, -4.176, -5.019, -4.653, -0.339, -5.238, -2.818, -0.611, -5.622, -2.818, -5.808, -5.618, -4.653, -0.339, -5.238, -2.585, 9.684, -5.161, -2.818, -0.611, -5.622, -4.653, -0.339, -5.238, -5.088, -0.121, -4.586, -2.893, 9.684, -4.750, -2.842, 9.684, -5.003, -2.842, 9.684, -5.003, -5.083, -0.108, -5.004, -5.088, -0.121, -4.586, -5.088, -0.121, -4.586, -8.864, -4.066, -4.542, -8.564, -4.186, -4.371, -8.564, -4.186, -4.371, -4.652, -0.336, -4.352, -5.088, -0.121, -4.586, -11.918, -7.792, -4.705, -11.932, -9.277, -4.705, -11.937, -9.277, -4.501, -11.937, -9.277, -4.501, -11.919, -7.797, -4.502, -11.918, -7.792, -4.705, -11.819, -9.278, -4.820, -11.932, -9.277, -4.705, -11.918, -7.792, -4.705, -11.918, -7.792, -4.705, -11.782, -7.869, -4.820, -11.819, -9.278, -4.820, -11.782, -7.869, -4.389, -11.919, -7.797, -4.502, -11.937, -9.277, -4.501, -11.937, -9.277, -4.501, -11.818, -9.278, -4.389, -11.813, -9.076, -4.389, -11.782, -7.869, -4.389, -11.937, -9.277, -4.501, -11.813, -9.076, -4.389, -5.088, -0.121, -4.586, -5.083, -0.108, -5.004, -8.852, -4.048, -4.846, -8.852, -4.048, -4.846, -8.864, -4.066, -4.542, -5.088, -0.121, -4.586, -5.083, -0.108, -5.004, -4.653, -0.339, -5.238, -8.553, -4.176, -5.019, -8.553, -4.176, -5.019, -8.852, -4.048, -4.846, -5.083, -0.108, -5.004, -0.000, 11.935, -5.394, -0.000, 9.684, -5.476, -1.450, 9.684, -5.436, -1.450, 9.684, -5.436, -1.150, 11.937, -5.340, -0.000, 11.935, -5.394, -1.150, 11.937, -5.340, -2.374, 11.934, -5.087, -2.204, 12.789, -5.057, -2.204, 12.789, -5.057, -1.036, 12.788, -5.317, -1.150, 11.937, -5.340, -0.000, 11.935, -5.394, -1.150, 11.937, -5.340, -1.036, 12.788, -5.317, -1.036, 12.788, -5.317, -0.000, 12.788, -5.369, -0.000, 11.935, -5.394, -1.698, 14.695, -2.693, -1.840, 14.207, -4.988, -2.204, 12.789, -5.057, -2.204, 12.789, -5.057, -2.191, 12.789, -2.224, -1.698, 14.695, -2.693, -0.882, 17.196, -4.683, -0.428, 17.183, -4.794, -0.608, 15.929, -5.009, -0.608, 15.929, -5.009, -1.297, 15.968, -4.849, -0.882, 17.196, -4.683, -0.428, 17.183, -4.794, -0.000, 17.182, -4.799, -0.000, 15.917, -5.051, -0.000, 15.917, -5.051, -0.608, 15.929, -5.009, -0.428, 17.183, -4.794, -1.297, 15.968, -4.849, -1.840, 14.207, -4.988, -1.698, 14.695, -2.693, -1.698, 14.695, -2.693, -1.174, 16.359, -3.167, -1.297, 15.968, -4.849, -1.036, 12.788, -5.317, -2.204, 12.789, -5.057, -1.840, 14.207, -4.988, -1.840, 14.207, -4.988, -0.854, 14.155, -5.229, -1.036, 12.788, -5.317, -0.000, 12.788, -5.369, -1.036, 12.788, -5.317, -0.854, 14.155, -5.229, -0.854, 14.155, -5.229, -0.000, 14.142, -5.276, -0.000, 12.788, -5.369, -11.373, -6.688, -4.512, -11.919, -7.797, -4.502, -11.782, -7.869, -4.389, -11.782, -7.869, -4.389, -11.235, -6.814, -4.385, -11.373, -6.688, -4.512, -11.918, -7.792, -4.705, -11.919, -7.797, -4.502, -11.373, -6.688, -4.512, -11.373, -6.688, -4.512, -11.372, -6.683, -4.741, -11.918, -7.792, -4.705, -11.782, -7.869, -4.820, -11.918, -7.792, -4.705, -11.372, -6.683, -4.741, -11.372, -6.683, -4.741, -11.221, -6.801, -4.868, -11.782, -7.869, -4.820, -1.450, -0.612, -5.830, -1.450, -5.811, -5.836, -2.818, -5.808, -5.618, -2.818, -5.808, -5.618, -2.818, -0.611, -5.622, -1.450, -0.612, -5.830, -11.819, -9.278, -4.820, -2.819, -9.560, -5.607, -2.812, -9.561, -4.439, -11.819, -9.278, -4.820, -2.812, -9.561, -4.439, -11.818, -9.278, -4.389, -11.932, -9.277, -4.705, -11.819, -9.278, -4.820, -11.818, -9.278, -4.389, -11.932, -9.277, -4.705, -11.818, -9.278, -4.389, -11.937, -9.277, -4.501, -1.450, -9.560, -5.689, -1.450, -5.811, -5.836, -0.000, -5.812, -5.869, -0.000, -5.812, -5.869, -0.000, -9.560, -5.719, -1.450, -9.560, -5.689, -8.864, -4.066, -4.542, -11.373, -6.688, -4.512, -11.235, -6.814, -4.385, -11.235, -6.814, -4.385, -8.564, -4.186, -4.371, -8.864, -4.066, -4.542, -11.372, -6.683, -4.741, -11.373, -6.688, -4.512, -8.864, -4.066, -4.542, -8.864, -4.066, -4.542, -8.852, -4.048, -4.846, -11.372, -6.683, -4.741, -11.221, -6.801, -4.868, -11.372, -6.683, -4.741, -8.852, -4.048, -4.846, -8.852, -4.048, -4.846, -8.553, -4.176, -5.019, -11.221, -6.801, -4.868, -2.794, -10.858, -4.452, -2.819, -9.560, -5.607, -2.793, -12.708, -4.973, -2.585, 9.684, -5.161, -2.374, 11.934, -5.087, -1.150, 11.937, -5.340, -1.150, 11.937, -5.340, -1.450, 9.684, -5.436, -2.585, 9.684, -5.161, -2.585, 9.684, -5.161, -2.842, 9.684, -5.003, -2.374, 11.934, -5.087, -2.842, 9.684, -5.003, -2.893, 9.684, -4.750, -2.374, 11.934, -5.087, -2.893, 9.684, -4.750, -2.819, 9.684, -4.619, -2.584, 10.873, -4.835, -2.584, 10.873, -4.835, -2.374, 11.934, -5.087, -2.893, 9.684, -4.750, -2.819, -9.560, -5.607, -2.818, -5.808, -5.618, -1.450, -5.811, -5.836, -1.450, -5.811, -5.836, -1.450, -9.560, -5.689, -2.819, -9.560, -5.607, -1.297, 15.968, -4.849, -0.608, 15.929, -5.009, -0.854, 14.155, -5.229, -0.854, 14.155, -5.229, -1.840, 14.207, -4.988, -1.297, 15.968, -4.849, -0.608, 15.929, -5.009, -0.000, 15.917, -5.051, -0.000, 14.142, -5.276, -0.000, 14.142, -5.276, -0.854, 14.155, -5.229, -0.608, 15.929, -5.009, -0.882, 17.196, -4.683, -1.297, 15.968, -4.849, -1.174, 16.359, -3.167, -1.174, 16.359, -3.167, -0.796, 17.438, -3.552, -0.882, 17.196, -4.683, -2.585, 9.684, -5.161, -1.450, 9.684, -5.436, -1.450, -0.612, -5.830, -1.450, -0.612, -5.830, -2.818, -0.611, -5.622, -2.585, 9.684, -5.161, -1.450, -0.612, -5.830, -0.000, -0.612, -5.844, -0.000, -5.812, -5.869, -0.000, -5.812, -5.869, -1.450, -5.811, -5.836, -1.450, -0.612, -5.830, -0.882, 17.196, -4.683, -0.324, 17.988, -4.347, -0.158, 17.983, -4.388, -0.158, 17.983, -4.388, -0.428, 17.183, -4.794, -0.882, 17.196, -4.683, -0.428, 17.183, -4.794, -0.158, 17.983, -4.388, -0.000, 17.983, -4.390, -0.000, 17.983, -4.390, -0.000, 17.182, -4.799, -0.428, 17.183, -4.794, -0.000, 17.520, -3.188, -0.000, 18.114, -3.786, -0.131, 18.112, -3.792, -0.131, 18.112, -3.792, -0.330, 17.518, -3.219, -0.000, 17.520, -3.188, -0.330, 17.518, -3.219, -0.131, 18.112, -3.792, -0.226, 18.101, -3.835, -0.226, 18.101, -3.835, -0.611, 17.481, -3.374, -0.330, 17.518, -3.219, -0.611, 17.481, -3.374, -0.226, 18.101, -3.835, -0.293, 18.077, -3.933, -0.293, 18.077, -3.933, -0.796, 17.438, -3.552, -0.611, 17.481, -3.374, -0.796, 17.438, -3.552, -0.293, 18.077, -3.933, -0.324, 17.988, -4.347, -0.324, 17.988, -4.347, -0.882, 17.196, -4.683, -0.796, 17.438, -3.552, -1.020, 12.405, -0.943, -0.813, 11.937, -0.322, -0.266, 12.128, -0.323, -0.266, 12.128, -0.323, -0.134, 12.768, -0.976, -1.020, 12.405, -0.943, -1.752, 11.925, -1.118, -1.217, 11.532, -0.310, -0.813, 11.937, -0.322, -0.813, 11.937, -0.322, -1.020, 12.405, -0.943, -1.752, 11.925, -1.118, -1.977, 11.099, -0.863, -1.479, 11.052, -0.326, -1.217, 11.532, -0.310, -1.217, 11.532, -0.310, -1.752, 11.925, -1.118, -1.977, 11.099, -0.863, -0.934, -13.398, -0.938, -0.446, -13.188, -0.742, -0.446, -12.708, -0.742, -1.599, -13.398, -1.602, -0.934, -13.398, -0.938, -0.934, -12.708, -0.938, -1.852, -13.398, -2.536, -1.599, -13.398, -1.602, -1.599, -12.708, -1.602, -1.852, -13.398, -2.536, -1.334, -13.811, -1.757, -1.599, -13.398, -1.602, -1.078, -14.183, -2.536, -1.334, -13.811, -1.757, -1.545, -13.811, -2.536, -0.550, -14.405, -2.536, -0.930, -14.183, -1.993, -1.078, -14.183, -2.536, -0.362, -13.485, -0.844, -0.582, -14.021, -1.212, -0.291, -13.693, -0.829, -0.715, -13.910, -1.307, -0.291, -14.349, -1.596, -0.582, -14.021, -1.212, -0.930, -14.183, -1.993, -0.475, -14.405, -2.259, -0.392, -14.309, -1.865, -0.930, -14.183, -1.993, -0.392, -14.309, -1.865, -0.715, -13.910, -1.307, -1.334, -13.811, -1.757, -0.930, -14.183, -1.993, -0.715, -13.910, -1.307, -0.715, -13.910, -1.307, -1.155, -13.626, -1.390, -1.334, -13.811, -1.757, -0.934, -13.398, -0.938, -1.155, -13.626, -1.390, -0.715, -13.910, -1.307, -1.155, -13.626, -1.390, -1.599, -13.398, -1.602, -1.334, -13.811, -1.757, -1.599, -13.398, -1.602, -1.155, -13.626, -1.390, -0.934, -13.398, -0.938, -0.715, -13.910, -1.307, -0.362, -13.485, -0.844, -0.934, -13.398, -0.938, -0.362, -13.485, -0.844, -0.446, -13.188, -0.742, -0.934, -13.398, -0.938, -0.559, -14.183, -3.452, -0.000, -14.183, -3.614, -0.000, -14.405, -3.087, -0.000, -14.405, -3.087, -0.278, -14.405, -3.011, -0.559, -14.183, -3.452, -1.179, -14.035, -2.851, -1.002, -14.183, -2.817, -1.078, -14.183, -2.536, -1.179, -14.035, -2.851, -1.078, -14.183, -2.536, -1.545, -13.811, -2.536, -1.179, -14.035, -2.851, -1.545, -13.811, -2.536, -1.325, -13.825, -3.290, -1.325, -13.825, -3.290, -1.545, -13.811, -2.536, -1.852, -13.398, -2.536, -1.852, -13.398, -2.536, -1.599, -13.398, -3.471, -1.325, -13.825, -3.290, -0.000, -13.811, -4.082, -0.780, -13.811, -3.870, -0.934, -13.398, -4.135, -0.934, -13.398, -4.135, -0.000, -13.398, -4.388, -0.000, -13.811, -4.082, -0.000, -13.811, -4.082, -0.000, -14.183, -3.614, -0.559, -14.183, -3.452, -0.559, -14.183, -3.452, -0.780, -13.811, -3.870, -0.000, -13.811, -4.082, -0.722, -13.985, -3.630, -1.083, -13.790, -3.589, -0.780, -13.811, -3.870, -0.780, -13.811, -3.870, -0.559, -14.183, -3.452, -0.722, -13.985, -3.630, -1.599, -13.398, -3.471, -1.852, -13.398, -2.536, -1.852, -12.708, -2.536, -1.852, -12.708, -2.536, -1.599, -12.708, -3.471, -1.599, -13.398, -3.471, -0.934, -13.398, -4.135, -1.599, -13.398, -3.471, -1.599, -12.708, -3.471, -1.599, -12.708, -3.471, -0.934, -12.708, -4.135, -0.934, -13.398, -4.135, -0.000, -13.398, -4.388, -0.934, -13.398, -4.135, -0.934, -12.708, -4.135, -0.934, -12.708, -4.135, -0.000, -12.708, -4.388, -0.000, -13.398, -4.388, -0.706, -14.311, -2.791, -0.637, -14.326, -2.908, -0.475, -14.405, -2.814, -0.706, -14.311, -2.791, -0.475, -14.405, -2.814, -0.550, -14.405, -2.536, -0.706, -14.311, -2.791, -0.550, -14.405, -2.536, -1.078, -14.183, -2.536, -0.706, -14.311, -2.791, -1.078, -14.183, -2.536, -1.002, -14.183, -2.817, -0.452, -14.277, -3.254, -0.559, -14.183, -3.452, -0.278, -14.405, -3.011, -0.278, -14.405, -3.011, -0.475, -14.405, -2.814, -0.637, -14.326, -2.908, -0.452, -14.277, -3.254, -0.278, -14.405, -3.011, -0.637, -14.326, -2.908, -0.934, -13.398, -4.135, -0.780, -13.811, -3.870, -1.083, -13.790, -3.589, -1.599, -13.398, -3.471, -0.934, -13.398, -4.135, -1.083, -13.790, -3.589, -1.599, -13.398, -3.471, -1.083, -13.790, -3.589, -1.218, -13.811, -3.432, -1.599, -13.398, -3.471, -1.218, -13.811, -3.432, -1.325, -13.825, -3.290, -1.179, -14.035, -2.851, -1.314, -14.623, -2.725, -0.707, -14.687, -2.725, -1.002, -14.183, -2.817, -1.179, -14.035, -2.851, -0.707, -14.687, -2.725, -0.706, -14.311, -2.791, -1.002, -14.183, -2.817, -0.707, -14.687, -2.725, -0.707, -14.687, -2.725, -1.314, -14.623, -2.725, -1.235, -14.380, -2.818, -1.235, -14.380, -2.818, -0.734, -14.432, -2.818, -0.707, -14.687, -2.725, -0.706, -14.311, -2.791, -0.707, -14.687, -2.725, -0.404, -14.719, -3.254, -0.637, -14.326, -2.908, -0.706, -14.311, -2.791, -0.404, -14.719, -3.254, -0.452, -14.277, -3.254, -0.637, -14.326, -2.908, -0.404, -14.719, -3.254, -0.404, -14.719, -3.254, -0.707, -14.687, -2.725, -0.734, -14.432, -2.818, -0.734, -14.432, -2.818, -0.484, -14.458, -3.254, -0.404, -14.719, -3.254, -0.559, -14.183, -3.452, -0.452, -14.277, -3.254, -0.404, -14.719, -3.254, -0.722, -13.985, -3.630, -0.559, -14.183, -3.452, -0.404, -14.719, -3.254, -0.707, -14.687, -3.782, -0.722, -13.985, -3.630, -0.404, -14.719, -3.254, -0.734, -14.432, -3.690, -0.707, -14.687, -3.782, -0.404, -14.719, -3.254, -0.404, -14.719, -3.254, -0.484, -14.458, -3.254, -0.734, -14.432, -3.690, -0.722, -13.985, -3.630, -0.707, -14.687, -3.782, -1.314, -14.623, -3.782, -1.314, -14.623, -3.782, -1.083, -13.790, -3.589, -0.722, -13.985, -3.630, -1.314, -14.623, -3.782, -0.707, -14.687, -3.782, -0.734, -14.432, -3.690, -0.734, -14.432, -3.690, -1.235, -14.380, -3.690, -1.314, -14.623, -3.782, -1.179, -14.035, -2.851, -1.325, -13.825, -3.290, -1.618, -14.591, -3.254, -1.618, -14.591, -3.254, -1.314, -14.623, -2.725, -1.179, -14.035, -2.851, -1.314, -14.623, -3.782, -1.618, -14.591, -3.254, -1.325, -13.825, -3.290, -1.314, -14.623, -3.782, -1.325, -13.825, -3.290, -1.218, -13.811, -3.432, -1.314, -14.623, -3.782, -1.218, -13.811, -3.432, -1.083, -13.790, -3.589, -1.314, -14.623, -2.725, -1.618, -14.591, -3.254, -1.485, -14.353, -3.254, -1.485, -14.353, -3.254, -1.235, -14.380, -2.818, -1.314, -14.623, -2.725, -1.314, -14.623, -3.782, -1.235, -14.380, -3.690, -1.485, -14.353, -3.254, -1.485, -14.353, -3.254, -1.618, -14.591, -3.254, -1.314, -14.623, -3.782, -0.734, -14.432, -2.818, -0.984, -14.277, -3.254, -0.484, -14.458, -3.254, -0.484, -14.458, -3.254, -0.984, -14.277, -3.254, -0.734, -14.432, -3.690, -0.734, -14.432, -3.690, -0.984, -14.277, -3.254, -1.235, -14.380, -3.690, -1.235, -14.380, -3.690, -0.984, -14.277, -3.254, -1.485, -14.353, -3.254, -1.485, -14.353, -3.254, -0.984, -14.277, -3.254, -1.235, -14.380, -2.818, -1.235, -14.380, -2.818, -0.984, -14.277, -3.254, -0.734, -14.432, -2.818, -0.000, -14.373, -2.061, -0.278, -14.373, -2.061, -0.000, -14.405, -2.259, -0.278, -14.373, -2.061, -0.475, -14.405, -2.259, -0.000, -14.405, -2.259, -0.236, -14.405, -2.675, -0.475, -14.405, -2.259, -0.550, -14.405, -2.536, -0.236, -14.405, -2.675, -0.550, -14.405, -2.536, -0.475, -14.405, -2.814, -0.236, -14.405, -2.675, -0.475, -14.405, -2.814, -0.278, -14.405, -3.011, -0.236, -14.405, -2.675, -0.278, -14.405, -3.011, -0.000, -14.405, -3.087, -0.236, -14.405, -2.675, -0.475, -14.631, -2.259, -0.475, -14.405, -2.259, -0.475, -14.631, -2.259, -0.000, -14.405, -2.259, -0.475, -14.405, -2.259, -0.000, -14.631, -3.087, -0.236, -14.405, -2.675, -0.000, -14.405, -3.087, -0.236, -14.405, -2.675, -0.000, -14.631, -3.087, -0.475, -14.631, -2.259, -0.291, -14.349, -1.596, -0.715, -13.910, -1.307, -0.392, -14.309, -1.865, -0.582, -14.021, -1.212, -0.362, -13.485, -0.844, -0.715, -13.910, -1.307, -1.334, -13.811, -1.757, -1.078, -14.183, -2.536, -0.930, -14.183, -1.993, -1.334, -13.811, -1.757, -1.852, -13.398, -2.536, -1.545, -13.811, -2.536, -1.852, -13.398, -2.536, -1.599, -12.708, -1.602, -1.852, -12.708, -2.536, -1.599, -13.398, -1.602, -0.934, -12.708, -0.938, -1.599, -12.708, -1.602, -0.934, -13.398, -0.938, -0.446, -12.708, -0.742, -0.934, -12.708, -0.938, -0.930, -14.183, -1.993, -0.550, -14.405, -2.536, -0.475, -14.405, -2.259, -0.392, -14.309, -1.865, -0.475, -14.405, -2.259, -0.278, -14.373, -2.061, -0.000, -14.394, -0.091, -0.000, -14.299, 0.137, -0.229, -14.299, -0.091, -0.000, -14.394, -0.091, -0.229, -14.299, -0.091, -0.000, -14.299, -0.319, -0.324, -14.071, -0.091, -0.229, -14.299, -0.091, -0.000, -14.299, 0.137, -0.000, -14.299, 0.137, -0.000, -14.071, 0.231, -0.324, -14.071, -0.091, -0.000, -14.071, -0.414, -0.000, -14.299, -0.319, -0.229, -14.299, -0.091, -0.229, -14.299, -0.091, -0.324, -14.071, -0.091, -0.000, -14.071, -0.414, -0.000, -14.071, 0.231, -0.000, -12.708, 0.255, -0.324, -12.708, -0.091, -0.324, -12.708, -0.091, -0.324, -14.071, -0.091, -0.000, -14.071, 0.231, -0.324, -14.071, -0.091, -0.324, -12.708, -0.091, -0.000, -12.708, -0.414, -0.000, -12.708, -0.414, -0.000, -14.071, -0.414, -0.324, -14.071, -0.091, -0.582, -14.021, -1.212, -0.299, -14.110, -1.137, -0.149, -13.941, -0.940, -0.291, -14.349, -1.596, -0.149, -14.278, -1.334, -0.299, -14.110, -1.137, -0.149, -14.278, -1.334, -0.000, -14.108, -1.135, -0.299, -14.110, -1.137, -0.149, -13.941, -0.940, -0.000, -14.108, -1.135, -0.000, -13.941, -0.940, -0.299, -14.110, -1.137, -0.000, -14.108, -1.135, -0.149, -13.941, -0.940, -0.000, -13.693, -0.829, -0.149, -13.941, -0.940, -0.000, -13.941, -0.940, -0.291, -14.349, -1.596, -0.299, -14.110, -1.137, -0.582, -14.021, -1.212, -0.582, -14.021, -1.212, -0.149, -13.941, -0.940, -0.291, -13.693, -0.829, -2.197, -12.708, -3.595, -2.052, -12.708, -2.465, -2.197, -12.708, -2.370, -1.438, -12.708, -0.921, -1.396, -12.708, 0.019, -2.088, -12.708, -0.443, -2.088, -12.708, -0.443, -2.196, -12.708, -0.925, -1.438, -12.708, -0.921, -1.438, -12.708, -0.921, -1.450, -12.708, -4.984, -0.000, -12.708, -4.988, -1.438, -12.708, -0.921, -0.000, -12.708, -4.988, -0.000, -12.708, 0.255, -2.793, -12.708, -4.973, -2.197, -12.708, -3.595, -2.768, -12.708, -4.432, -2.197, -12.708, -3.595, -1.450, -12.708, -4.984, -2.052, -12.708, -2.465, -2.197, -12.708, -3.595, -2.793, -12.708, -4.973, -1.450, -12.708, -4.984, -2.768, -12.708, -4.432, -2.197, -12.708, -3.595, -2.554, -12.708, -3.587, -2.052, -12.708, -2.465, -1.450, -12.708, -4.984, -1.438, -12.708, -0.921, -0.000, -9.062, 0.298, -0.266, -9.140, 0.275, -0.271, -9.214, 1.411, -0.271, -9.214, 1.411, -0.000, -9.131, 1.432, -0.000, -9.062, 0.298, -0.000, -9.619, 2.231, -0.000, -9.131, 1.432, -0.271, -9.214, 1.411, -0.271, -9.214, 1.411, -0.273, -9.692, 2.185, -0.000, -9.619, 2.231, -0.000, -9.619, 2.231, -0.273, -9.692, 2.185, -0.108, -15.310, 7.718, -0.108, -15.310, 7.718, -0.000, -15.242, 7.796, -0.000, -9.619, 2.231, -0.000, -15.800, 8.077, -0.000, -15.242, 7.796, -0.108, -15.310, 7.718, -0.108, -15.310, 7.718, -0.119, -15.820, 8.029, -0.000, -15.800, 8.077, -0.000, -16.426, 8.181, -0.000, -15.800, 8.077, -0.119, -15.820, 8.029, -0.119, -15.820, 8.029, -0.126, -16.429, 8.140, -0.000, -16.426, 8.181, -0.000, -16.426, 8.181, -0.126, -16.429, 8.140, -0.000, -18.198, 8.141, -0.113, -18.068, 7.485, -0.170, -17.242, 7.492, -0.143, -17.191, 7.331, -0.143, -17.191, 7.331, -0.000, -18.198, 7.326, -0.113, -18.068, 7.485, -0.170, -17.242, 7.492, -0.170, -16.951, 7.688, -0.157, -16.981, 7.479, -0.157, -16.981, 7.479, -0.143, -17.191, 7.331, -0.170, -17.242, 7.492, -0.157, -16.981, 7.479, -0.170, -16.951, 7.688, -0.180, -16.713, 7.364, -0.180, -16.713, 7.364, -0.163, -16.831, 7.274, -0.157, -16.981, 7.479, -0.316, -13.220, 1.683, -0.280, -13.272, 1.841, -0.306, -12.993, 2.047, -0.306, -12.993, 2.047, -0.348, -12.781, 2.003, -0.316, -13.220, 1.683, -0.323, -12.546, 0.263, -0.270, -12.708, 0.263, -0.308, -12.674, 0.429, -0.000, -18.198, 7.326, -0.143, -17.191, 7.331, -0.000, -17.191, 7.331, -0.143, -17.191, 7.331, -0.157, -16.981, 7.479, -0.000, -16.981, 7.479, -0.000, -16.981, 7.479, -0.000, -17.191, 7.331, -0.143, -17.191, 7.331, -0.163, -16.831, 7.274, -0.000, -16.831, 7.274, -0.000, -16.981, 7.479, -0.000, -16.981, 7.479, -0.157, -16.981, 7.479, -0.163, -16.831, 7.274, -0.280, -13.272, 1.841, -0.000, -13.272, 1.841, -0.000, -12.993, 2.047, -0.000, -12.993, 2.047, -0.306, -12.993, 2.047, -0.280, -13.272, 1.841, -0.000, -15.367, 1.835, -0.000, -13.272, 1.841, -0.280, -13.272, 1.841, -0.000, -15.367, 1.835, -0.280, -13.272, 1.841, -0.316, -13.220, 1.683, -0.000, -15.367, 1.835, -0.316, -13.220, 1.683, -0.060, -15.106, 1.678, -0.060, -15.106, 1.678, -0.060, -14.762, 1.024, -0.000, -14.873, 0.878, -0.000, -14.873, 0.878, -0.000, -15.367, 1.835, -0.060, -15.106, 1.678, -0.060, -14.762, 1.024, -0.308, -12.674, 0.429, -0.270, -12.708, 0.263, -0.270, -12.708, 0.263, -0.000, -14.873, 0.878, -0.060, -14.762, 1.024, -0.270, -12.708, 0.263, -0.000, -12.708, 0.255, -0.000, -14.873, 0.878, -0.266, -9.140, 0.275, -0.336, -9.364, 0.251, -0.336, -9.436, 1.380, -0.336, -9.436, 1.380, -0.271, -9.214, 1.411, -0.266, -9.140, 0.275, -0.336, -9.436, 1.380, -0.336, -9.891, 2.026, -0.273, -9.692, 2.185, -0.273, -9.692, 2.185, -0.271, -9.214, 1.411, -0.336, -9.436, 1.380, -0.336, -9.891, 2.026, -0.170, -15.468, 7.554, -0.108, -15.310, 7.718, -0.108, -15.310, 7.718, -0.273, -9.692, 2.185, -0.336, -9.891, 2.026, -0.108, -15.310, 7.718, -0.170, -15.468, 7.554, -0.170, -15.884, 7.902, -0.170, -15.884, 7.902, -0.119, -15.820, 8.029, -0.108, -15.310, 7.718, -0.170, -15.884, 7.902, -0.170, -16.433, 8.024, -0.126, -16.429, 8.140, -0.126, -16.429, 8.140, -0.119, -15.820, 8.029, -0.170, -15.884, 7.902, -0.126, -16.429, 8.140, -0.170, -16.433, 8.024, -0.113, -18.068, 8.020, -0.113, -18.068, 8.020, -0.000, -18.198, 8.141, -0.126, -16.429, 8.140, -0.000, -18.198, 7.326, -0.000, -18.198, 8.141, -0.113, -18.068, 8.020, -0.113, -18.068, 8.020, -0.113, -18.068, 7.485, -0.000, -18.198, 7.326, -0.000, -12.708, 0.255, -0.270, -12.708, 0.263, -1.396, -12.708, 0.019, -1.396, -12.708, 0.019, -1.438, -12.708, -0.921, -0.000, -12.708, 0.255, -0.000, -14.631, -2.259, -0.475, -14.631, -2.259, -0.000, -14.631, -3.087, -0.000, -14.405, -2.259, -0.475, -14.631, -2.259, -0.000, -14.631, -2.259, -0.000, -14.108, -1.135, -0.149, -14.278, -1.334, -0.000, -14.278, -1.334, -0.362, -13.485, -0.844, -0.291, -13.693, -0.829, -0.000, -13.693, -0.829, -0.000, -13.188, -0.742, -0.362, -13.485, -0.844, -0.000, -13.485, -0.844, -0.000, -12.708, -0.742, -0.446, -13.188, -0.742, -0.000, -13.188, -0.742, -0.000, -14.309, -1.865, -0.392, -14.309, -1.865, -0.278, -14.373, -2.061, -0.291, -14.349, -1.596, -0.392, -14.309, -1.865, -0.000, -14.309, -1.865, -0.000, -14.278, -1.334, -0.149, -14.278, -1.334, -0.000, -14.349, -1.596, -0.149, -14.278, -1.334, -0.291, -14.349, -1.596, -0.000, -14.349, -1.596, -0.000, -12.708, -0.742, -0.446, -12.708, -0.742, -0.446, -13.188, -0.742, -0.000, -13.188, -0.742, -0.446, -13.188, -0.742, -0.362, -13.485, -0.844, -0.000, -13.693, -0.829, -0.291, -13.693, -0.829, -0.149, -13.941, -0.940, -0.000, -14.309, -1.865, -0.000, -14.349, -1.596, -0.291, -14.349, -1.596, -0.278, -14.373, -2.061, -0.000, -14.373, -2.061, -0.000, -14.309, -1.865, -0.000, -13.693, -0.829, -0.000, -13.485, -0.844, -0.362, -13.485, -0.844, -11.818, -9.278, -4.389, -2.812, -9.561, -4.439, -2.813, -9.067, -4.435, -2.813, -9.067, -4.435, -11.813, -9.076, -4.389, -11.818, -9.278, -4.389, -2.794, -10.858, -4.452, -2.812, -9.561, -4.439, -2.819, -9.560, -5.607, -2.793, -12.708, -4.973, -2.768, -12.708, -4.432, -2.794, -10.858, -4.452, 0.060, -15.106, 1.678, -0.000, -15.367, 1.835, -0.000, -14.873, 0.878, -0.000, -14.873, 0.878, 0.060, -14.762, 1.024, 0.060, -15.106, 1.678, -0.306, -12.993, 2.047, -0.000, -12.993, 2.047, -0.000, -13.316, 2.487, -0.000, -13.316, 2.487, -0.294, -13.316, 2.487, -0.306, -12.993, 2.047, -0.155, -13.599, 2.293, -0.000, -13.599, 2.293, -0.000, -17.114, 7.081, -0.330, -13.199, 2.574, -0.348, -12.781, 2.003, -0.306, -12.993, 2.047, -0.306, -12.993, 2.047, -0.294, -13.316, 2.487, -0.330, -13.199, 2.574, -0.330, -13.199, 2.574, -0.294, -13.316, 2.487, -0.163, -16.831, 7.274, -0.163, -16.831, 7.274, -0.180, -16.713, 7.364, -0.330, -13.199, 2.574, -0.000, -16.831, 7.274, -0.163, -16.831, 7.274, -0.000, -17.114, 7.081, -0.163, -16.831, 7.274, -0.294, -13.316, 2.487, -0.155, -13.599, 2.293, -0.155, -13.599, 2.293, -0.000, -17.114, 7.081, -0.163, -16.831, 7.274, -0.294, -13.316, 2.487, -0.000, -13.316, 2.487, -0.000, -13.599, 2.293, -0.000, -13.599, 2.293, -0.155, -13.599, 2.293, -0.294, -13.316, 2.487, -0.000, 18.192, -4.148, -0.000, 17.983, -4.390, -0.158, 17.983, -4.388, -2.191, 12.789, -2.224, -2.204, 12.789, -5.057, -2.374, 11.934, -5.087, -2.374, 11.934, -5.087, -2.360, 11.934, -2.002, -2.191, 12.789, -2.224, -2.584, 10.873, -4.835, -2.566, 10.873, -1.781, -2.360, 11.934, -2.002, -2.360, 11.934, -2.002, -2.374, 11.934, -5.087, -2.584, 10.873, -4.835, -0.131, 18.112, -3.792, -0.000, 18.114, -3.786, -0.000, 18.216, -4.035, -0.226, 18.101, -3.835, -0.131, 18.112, -3.792, -0.000, 18.216, -4.035, -0.293, 18.077, -3.933, -0.226, 18.101, -3.835, -0.000, 18.216, -4.035, -0.000, 18.192, -4.148, -0.324, 17.988, -4.347, -0.293, 18.077, -3.933, -0.293, 18.077, -3.933, -0.000, 18.216, -4.035, -0.000, 18.192, -4.148, -0.158, 17.983, -4.388, -0.324, 17.988, -4.347, -0.000, 18.192, -4.148, 1.450, -0.612, -5.830, -0.000, -0.612, -5.844, -0.000, 9.684, -5.476, -0.000, 9.684, -5.476, 1.450, 9.684, -5.436, 1.450, -0.612, -5.830, 5.088, -0.121, -4.586, 2.893, 9.684, -4.750, 2.819, 9.684, -4.619, 2.819, 9.684, -4.619, 4.652, -0.336, -4.352, 5.088, -0.121, -4.586, 4.653, -0.339, -5.238, 2.585, 9.684, -5.161, 2.842, 9.684, -5.003, 2.842, 9.684, -5.003, 5.083, -0.108, -5.004, 4.653, -0.339, -5.238, -0.000, -9.560, -5.719, 1.450, -9.560, -5.689, 1.450, -12.708, -4.984, 1.450, -12.708, -4.984, -0.000, -12.708, -4.988, -0.000, -9.560, -5.719, 1.450, -9.560, -5.689, 2.819, -9.560, -5.607, 2.793, -12.708, -4.973, 2.793, -12.708, -4.973, 1.450, -12.708, -4.984, 1.450, -9.560, -5.689, 11.782, -7.869, -4.820, 11.819, -9.278, -4.820, 2.819, -9.560, -5.607, 11.221, -6.801, -4.868, 11.782, -7.869, -4.820, 2.819, -9.560, -5.607, 8.553, -4.176, -5.019, 11.221, -6.801, -4.868, 2.819, -9.560, -5.607, 8.553, -4.176, -5.019, 2.819, -9.560, -5.607, 2.818, -5.808, -5.618, 4.653, -0.339, -5.238, 8.553, -4.176, -5.019, 2.818, -5.808, -5.618, 4.653, -0.339, -5.238, 2.818, -5.808, -5.618, 2.818, -0.611, -5.622, 2.585, 9.684, -5.161, 4.653, -0.339, -5.238, 2.818, -0.611, -5.622, 5.088, -0.121, -4.586, 5.083, -0.108, -5.004, 2.842, 9.684, -5.003, 2.842, 9.684, -5.003, 2.893, 9.684, -4.750, 5.088, -0.121, -4.586, 5.088, -0.121, -4.586, 4.652, -0.336, -4.352, 8.564, -4.186, -4.371, 8.564, -4.186, -4.371, 8.864, -4.066, -4.542, 5.088, -0.121, -4.586, 11.918, -7.792, -4.705, 11.919, -7.797, -4.502, 11.937, -9.277, -4.501, 11.937, -9.277, -4.501, 11.932, -9.277, -4.705, 11.918, -7.792, -4.705, 11.819, -9.278, -4.820, 11.782, -7.869, -4.820, 11.918, -7.792, -4.705, 11.918, -7.792, -4.705, 11.932, -9.277, -4.705, 11.819, -9.278, -4.820, 11.813, -9.076, -4.389, 11.818, -9.278, -4.389, 11.937, -9.277, -4.501, 11.782, -7.869, -4.389, 11.813, -9.076, -4.389, 11.937, -9.277, -4.501, 11.782, -7.869, -4.389, 11.937, -9.277, -4.501, 11.919, -7.797, -4.502, 5.088, -0.121, -4.586, 8.864, -4.066, -4.542, 8.852, -4.048, -4.846, 8.852, -4.048, -4.846, 5.083, -0.108, -5.004, 5.088, -0.121, -4.586, 5.083, -0.108, -5.004, 8.852, -4.048, -4.846, 8.553, -4.176, -5.019, 8.553, -4.176, -5.019, 4.653, -0.339, -5.238, 5.083, -0.108, -5.004, -0.000, 11.935, -5.394, 1.150, 11.937, -5.340, 1.450, 9.684, -5.436, 1.450, 9.684, -5.436, -0.000, 9.684, -5.476, -0.000, 11.935, -5.394, 1.150, 11.937, -5.340, 1.036, 12.788, -5.317, 2.204, 12.789, -5.057, 2.204, 12.789, -5.057, 2.374, 11.934, -5.087, 1.150, 11.937, -5.340, -0.000, 11.935, -5.394, -0.000, 12.788, -5.369, 1.036, 12.788, -5.317, 1.036, 12.788, -5.317, 1.150, 11.937, -5.340, -0.000, 11.935, -5.394, 1.698, 14.695, -2.693, 2.191, 12.789, -2.224, 2.204, 12.789, -5.057, 2.204, 12.789, -5.057, 1.840, 14.207, -4.988, 1.698, 14.695, -2.693, 0.882, 17.196, -4.683, 1.297, 15.968, -4.849, 0.608, 15.929, -5.009, 0.608, 15.929, -5.009, 0.428, 17.183, -4.794, 0.882, 17.196, -4.683, 0.428, 17.183, -4.794, 0.608, 15.929, -5.009, -0.000, 15.917, -5.051, -0.000, 15.917, -5.051, -0.000, 17.182, -4.799, 0.428, 17.183, -4.794, 1.297, 15.968, -4.849, 1.174, 16.359, -3.167, 1.698, 14.695, -2.693, 1.698, 14.695, -2.693, 1.840, 14.207, -4.988, 1.297, 15.968, -4.849, 1.036, 12.788, -5.317, 0.854, 14.155, -5.229, 1.840, 14.207, -4.988, 1.840, 14.207, -4.988, 2.204, 12.789, -5.057, 1.036, 12.788, -5.317, -0.000, 12.788, -5.369, -0.000, 14.142, -5.276, 0.854, 14.155, -5.229, 0.854, 14.155, -5.229, 1.036, 12.788, -5.317, -0.000, 12.788, -5.369, 11.373, -6.688, -4.512, 11.235, -6.814, -4.385, 11.782, -7.869, -4.389, 11.782, -7.869, -4.389, 11.919, -7.797, -4.502, 11.373, -6.688, -4.512, 11.918, -7.792, -4.705, 11.372, -6.683, -4.741, 11.373, -6.688, -4.512, 11.373, -6.688, -4.512, 11.919, -7.797, -4.502, 11.918, -7.792, -4.705, 11.782, -7.869, -4.820, 11.221, -6.801, -4.868, 11.372, -6.683, -4.741, 11.372, -6.683, -4.741, 11.918, -7.792, -4.705, 11.782, -7.869, -4.820, 1.450, -0.612, -5.830, 2.818, -0.611, -5.622, 2.818, -5.808, -5.618, 2.818, -5.808, -5.618, 1.450, -5.811, -5.836, 1.450, -0.612, -5.830, 11.932, -9.277, -4.705, 11.937, -9.277, -4.501, 11.818, -9.278, -4.389, 2.812, -9.561, -4.439, 2.819, -9.560, -5.607, 11.819, -9.278, -4.820, 11.818, -9.278, -4.389, 2.812, -9.561, -4.439, 11.819, -9.278, -4.820, 11.932, -9.277, -4.705, 11.818, -9.278, -4.389, 11.819, -9.278, -4.820, 1.450, -9.560, -5.689, -0.000, -9.560, -5.719, -0.000, -5.812, -5.869, -0.000, -5.812, -5.869, 1.450, -5.811, -5.836, 1.450, -9.560, -5.689, 8.864, -4.066, -4.542, 8.564, -4.186, -4.371, 11.235, -6.814, -4.385, 11.235, -6.814, -4.385, 11.373, -6.688, -4.512, 8.864, -4.066, -4.542, 11.372, -6.683, -4.741, 8.852, -4.048, -4.846, 8.864, -4.066, -4.542, 8.864, -4.066, -4.542, 11.373, -6.688, -4.512, 11.372, -6.683, -4.741, 11.221, -6.801, -4.868, 8.553, -4.176, -5.019, 8.852, -4.048, -4.846, 8.852, -4.048, -4.846, 11.372, -6.683, -4.741, 11.221, -6.801, -4.868, 2.794, -10.858, -4.452, 2.793, -12.708, -4.973, 2.819, -9.560, -5.607, 2.585, 9.684, -5.161, 1.450, 9.684, -5.436, 1.150, 11.937, -5.340, 1.150, 11.937, -5.340, 2.374, 11.934, -5.087, 2.585, 9.684, -5.161, 2.585, 9.684, -5.161, 2.374, 11.934, -5.087, 2.842, 9.684, -5.003, 2.842, 9.684, -5.003, 2.374, 11.934, -5.087, 2.893, 9.684, -4.750, 2.893, 9.684, -4.750, 2.374, 11.934, -5.087, 2.584, 10.873, -4.835, 2.584, 10.873, -4.835, 2.819, 9.684, -4.619, 2.893, 9.684, -4.750, 2.819, -9.560, -5.607, 1.450, -9.560, -5.689, 1.450, -5.811, -5.836, 1.450, -5.811, -5.836, 2.818, -5.808, -5.618, 2.819, -9.560, -5.607, 1.297, 15.968, -4.849, 1.840, 14.207, -4.988, 0.854, 14.155, -5.229, 0.854, 14.155, -5.229, 0.608, 15.929, -5.009, 1.297, 15.968, -4.849, 0.608, 15.929, -5.009, 0.854, 14.155, -5.229, -0.000, 14.142, -5.276, -0.000, 14.142, -5.276, -0.000, 15.917, -5.051, 0.608, 15.929, -5.009, 0.882, 17.196, -4.683, 0.796, 17.438, -3.552, 1.174, 16.359, -3.167, 1.174, 16.359, -3.167, 1.297, 15.968, -4.849, 0.882, 17.196, -4.683, 2.585, 9.684, -5.161, 2.818, -0.611, -5.622, 1.450, -0.612, -5.830, 1.450, -0.612, -5.830, 1.450, 9.684, -5.436, 2.585, 9.684, -5.161, 1.450, -0.612, -5.830, 1.450, -5.811, -5.836, -0.000, -5.812, -5.869, -0.000, -5.812, -5.869, -0.000, -0.612, -5.844, 1.450, -0.612, -5.830, 0.882, 17.196, -4.683, 0.428, 17.183, -4.794, 0.158, 17.983, -4.388, 0.158, 17.983, -4.388, 0.324, 17.988, -4.347, 0.882, 17.196, -4.683, 0.428, 17.183, -4.794, -0.000, 17.182, -4.799, -0.000, 17.983, -4.390, -0.000, 17.983, -4.390, 0.158, 17.983, -4.388, 0.428, 17.183, -4.794, -0.000, 17.520, -3.188, 0.330, 17.518, -3.219, 0.131, 18.112, -3.792, 0.131, 18.112, -3.792, -0.000, 18.114, -3.786, -0.000, 17.520, -3.188, 0.330, 17.518, -3.219, 0.611, 17.481, -3.374, 0.226, 18.101, -3.835, 0.226, 18.101, -3.835, 0.131, 18.112, -3.792, 0.330, 17.518, -3.219, 0.611, 17.481, -3.374, 0.796, 17.438, -3.552, 0.293, 18.077, -3.933, 0.293, 18.077, -3.933, 0.226, 18.101, -3.835, 0.611, 17.481, -3.374, 0.796, 17.438, -3.552, 0.882, 17.196, -4.683, 0.324, 17.988, -4.347, 0.324, 17.988, -4.347, 0.293, 18.077, -3.933, 0.796, 17.438, -3.552, 1.020, 12.405, -0.943, 0.134, 12.768, -0.976, 0.266, 12.128, -0.323, 0.266, 12.128, -0.323, 0.813, 11.937, -0.322, 1.020, 12.405, -0.943, 1.752, 11.925, -1.118, 1.020, 12.405, -0.943, 0.813, 11.937, -0.322, 0.813, 11.937, -0.322, 1.217, 11.532, -0.310, 1.752, 11.925, -1.118, 1.977, 11.099, -0.863, 1.752, 11.925, -1.118, 1.217, 11.532, -0.310, 1.217, 11.532, -0.310, 1.479, 11.052, -0.326, 1.977, 11.099, -0.863, 0.934, -13.398, -0.938, 0.446, -12.708, -0.742, 0.446, -13.188, -0.742, 1.599, -13.398, -1.602, 0.934, -12.708, -0.938, 0.934, -13.398, -0.938, 1.852, -13.398, -2.536, 1.599, -12.708, -1.602, 1.599, -13.398, -1.602, 1.852, -13.398, -2.536, 1.599, -13.398, -1.602, 1.334, -13.811, -1.757, 1.078, -14.183, -2.536, 1.545, -13.811, -2.536, 1.334, -13.811, -1.757, 0.550, -14.405, -2.536, 1.078, -14.183, -2.536, 0.930, -14.183, -1.993, 0.362, -13.485, -0.844, 0.291, -13.693, -0.829, 0.582, -14.021, -1.212, 0.715, -13.910, -1.307, 0.582, -14.021, -1.212, 0.291, -14.349, -1.596, 0.930, -14.183, -1.993, 0.392, -14.309, -1.865, 0.475, -14.405, -2.259, 0.930, -14.183, -1.993, 0.715, -13.910, -1.307, 0.392, -14.309, -1.865, 1.334, -13.811, -1.757, 0.715, -13.910, -1.307, 0.930, -14.183, -1.993, 0.715, -13.910, -1.307, 1.334, -13.811, -1.757, 1.155, -13.626, -1.390, 0.934, -13.398, -0.938, 0.715, -13.910, -1.307, 1.155, -13.626, -1.390, 1.155, -13.626, -1.390, 1.334, -13.811, -1.757, 1.599, -13.398, -1.602, 1.599, -13.398, -1.602, 0.934, -13.398, -0.938, 1.155, -13.626, -1.390, 0.715, -13.910, -1.307, 0.934, -13.398, -0.938, 0.362, -13.485, -0.844, 0.362, -13.485, -0.844, 0.934, -13.398, -0.938, 0.446, -13.188, -0.742, 0.559, -14.183, -3.452, 0.278, -14.405, -3.011, -0.000, -14.405, -3.087, -0.000, -14.405, -3.087, -0.000, -14.183, -3.614, 0.559, -14.183, -3.452, 1.179, -14.035, -2.851, 1.325, -13.825, -3.290, 1.545, -13.811, -2.536, 1.179, -14.035, -2.851, 1.545, -13.811, -2.536, 1.078, -14.183, -2.536, 1.179, -14.035, -2.851, 1.078, -14.183, -2.536, 1.002, -14.183, -2.817, 1.325, -13.825, -3.290, 1.599, -13.398, -3.471, 1.852, -13.398, -2.536, 1.852, -13.398, -2.536, 1.545, -13.811, -2.536, 1.325, -13.825, -3.290, -0.000, -13.811, -4.082, -0.000, -13.398, -4.388, 0.934, -13.398, -4.135, 0.934, -13.398, -4.135, 0.780, -13.811, -3.870, -0.000, -13.811, -4.082, -0.000, -13.811, -4.082, 0.780, -13.811, -3.870, 0.559, -14.183, -3.452, 0.559, -14.183, -3.452, -0.000, -14.183, -3.614, -0.000, -13.811, -4.082, 0.722, -13.985, -3.630, 0.559, -14.183, -3.452, 0.780, -13.811, -3.870, 0.780, -13.811, -3.870, 1.083, -13.790, -3.589, 0.722, -13.985, -3.630, 1.599, -13.398, -3.471, 1.599, -12.708, -3.471, 1.852, -12.708, -2.536, 1.852, -12.708, -2.536, 1.852, -13.398, -2.536, 1.599, -13.398, -3.471, 0.934, -13.398, -4.135, 0.934, -12.708, -4.135, 1.599, -12.708, -3.471, 1.599, -12.708, -3.471, 1.599, -13.398, -3.471, 0.934, -13.398, -4.135, -0.000, -13.398, -4.388, -0.000, -12.708, -4.388, 0.934, -12.708, -4.135, 0.934, -12.708, -4.135, 0.934, -13.398, -4.135, -0.000, -13.398, -4.388, 0.706, -14.311, -2.791, 1.002, -14.183, -2.817, 1.078, -14.183, -2.536, 0.706, -14.311, -2.791, 1.078, -14.183, -2.536, 0.550, -14.405, -2.536, 0.706, -14.311, -2.791, 0.550, -14.405, -2.536, 0.475, -14.405, -2.814, 0.706, -14.311, -2.791, 0.475, -14.405, -2.814, 0.637, -14.326, -2.908, 0.637, -14.326, -2.908, 0.475, -14.405, -2.814, 0.278, -14.405, -3.011, 0.452, -14.277, -3.254, 0.637, -14.326, -2.908, 0.278, -14.405, -3.011, 0.452, -14.277, -3.254, 0.278, -14.405, -3.011, 0.559, -14.183, -3.452, 1.599, -13.398, -3.471, 1.325, -13.825, -3.290, 1.218, -13.811, -3.432, 1.599, -13.398, -3.471, 1.218, -13.811, -3.432, 1.083, -13.790, -3.589, 1.083, -13.790, -3.589, 0.780, -13.811, -3.870, 0.934, -13.398, -4.135, 1.599, -13.398, -3.471, 1.083, -13.790, -3.589, 0.934, -13.398, -4.135, 0.707, -14.687, -2.725, 1.314, -14.623, -2.725, 1.179, -14.035, -2.851, 0.707, -14.687, -2.725, 1.179, -14.035, -2.851, 1.002, -14.183, -2.817, 0.706, -14.311, -2.791, 0.707, -14.687, -2.725, 1.002, -14.183, -2.817, 0.707, -14.687, -2.725, 0.734, -14.432, -2.818, 1.235, -14.380, -2.818, 1.235, -14.380, -2.818, 1.314, -14.623, -2.725, 0.707, -14.687, -2.725, 0.404, -14.719, -3.254, 0.707, -14.687, -2.725, 0.706, -14.311, -2.791, 0.404, -14.719, -3.254, 0.706, -14.311, -2.791, 0.637, -14.326, -2.908, 0.452, -14.277, -3.254, 0.404, -14.719, -3.254, 0.637, -14.326, -2.908, 0.404, -14.719, -3.254, 0.484, -14.458, -3.254, 0.734, -14.432, -2.818, 0.734, -14.432, -2.818, 0.707, -14.687, -2.725, 0.404, -14.719, -3.254, 0.404, -14.719, -3.254, 0.452, -14.277, -3.254, 0.559, -14.183, -3.452, 0.404, -14.719, -3.254, 0.559, -14.183, -3.452, 0.722, -13.985, -3.630, 0.707, -14.687, -3.782, 0.404, -14.719, -3.254, 0.722, -13.985, -3.630, 0.734, -14.432, -3.690, 0.484, -14.458, -3.254, 0.404, -14.719, -3.254, 0.404, -14.719, -3.254, 0.707, -14.687, -3.782, 0.734, -14.432, -3.690, 0.722, -13.985, -3.630, 1.083, -13.790, -3.589, 1.314, -14.623, -3.782, 1.314, -14.623, -3.782, 0.707, -14.687, -3.782, 0.722, -13.985, -3.630, 1.314, -14.623, -3.782, 1.235, -14.380, -3.690, 0.734, -14.432, -3.690, 0.734, -14.432, -3.690, 0.707, -14.687, -3.782, 1.314, -14.623, -3.782, 1.179, -14.035, -2.851, 1.314, -14.623, -2.725, 1.618, -14.591, -3.254, 1.618, -14.591, -3.254, 1.325, -13.825, -3.290, 1.179, -14.035, -2.851, 1.314, -14.623, -3.782, 1.083, -13.790, -3.589, 1.218, -13.811, -3.432, 1.314, -14.623, -3.782, 1.218, -13.811, -3.432, 1.325, -13.825, -3.290, 1.314, -14.623, -3.782, 1.325, -13.825, -3.290, 1.618, -14.591, -3.254, 1.314, -14.623, -2.725, 1.235, -14.380, -2.818, 1.485, -14.353, -3.254, 1.485, -14.353, -3.254, 1.618, -14.591, -3.254, 1.314, -14.623, -2.725, 1.314, -14.623, -3.782, 1.618, -14.591, -3.254, 1.485, -14.353, -3.254, 1.485, -14.353, -3.254, 1.235, -14.380, -3.690, 1.314, -14.623, -3.782, 0.734, -14.432, -2.818, 0.484, -14.458, -3.254, 0.984, -14.277, -3.254, 0.484, -14.458, -3.254, 0.734, -14.432, -3.690, 0.984, -14.277, -3.254, 0.734, -14.432, -3.690, 1.235, -14.380, -3.690, 0.984, -14.277, -3.254, 1.235, -14.380, -3.690, 1.485, -14.353, -3.254, 0.984, -14.277, -3.254, 1.485, -14.353, -3.254, 1.235, -14.380, -2.818, 0.984, -14.277, -3.254, 1.235, -14.380, -2.818, 0.734, -14.432, -2.818, 0.984, -14.277, -3.254, -0.000, -14.373, -2.061, -0.000, -14.405, -2.259, 0.278, -14.373, -2.061, 0.278, -14.373, -2.061, -0.000, -14.405, -2.259, 0.475, -14.405, -2.259, 0.236, -14.405, -2.675, 0.550, -14.405, -2.536, 0.475, -14.405, -2.259, 0.236, -14.405, -2.675, 0.475, -14.405, -2.814, 0.550, -14.405, -2.536, 0.236, -14.405, -2.675, 0.278, -14.405, -3.011, 0.475, -14.405, -2.814, 0.236, -14.405, -2.675, -0.000, -14.405, -3.087, 0.278, -14.405, -3.011, 0.236, -14.405, -2.675, 0.475, -14.405, -2.259, 0.475, -14.631, -2.259, 0.475, -14.631, -2.259, 0.475, -14.405, -2.259, -0.000, -14.405, -2.259, -0.000, -14.631, -3.087, -0.000, -14.405, -3.087, 0.236, -14.405, -2.675, 0.236, -14.405, -2.675, 0.475, -14.631, -2.259, -0.000, -14.631, -3.087, 0.291, -14.349, -1.596, 0.392, -14.309, -1.865, 0.715, -13.910, -1.307, 0.582, -14.021, -1.212, 0.715, -13.910, -1.307, 0.362, -13.485, -0.844, 1.334, -13.811, -1.757, 0.930, -14.183, -1.993, 1.078, -14.183, -2.536, 1.334, -13.811, -1.757, 1.545, -13.811, -2.536, 1.852, -13.398, -2.536, 1.852, -13.398, -2.536, 1.852, -12.708, -2.536, 1.599, -12.708, -1.602, 1.599, -13.398, -1.602, 1.599, -12.708, -1.602, 0.934, -12.708, -0.938, 0.934, -13.398, -0.938, 0.934, -12.708, -0.938, 0.446, -12.708, -0.742, 0.930, -14.183, -1.993, 0.475, -14.405, -2.259, 0.550, -14.405, -2.536, 0.392, -14.309, -1.865, 0.278, -14.373, -2.061, 0.475, -14.405, -2.259, -0.000, -14.394, -0.091, 0.229, -14.299, -0.091, -0.000, -14.299, 0.137, -0.000, -14.394, -0.091, -0.000, -14.299, -0.319, 0.229, -14.299, -0.091, 0.324, -14.071, -0.091, -0.000, -14.071, 0.231, -0.000, -14.299, 0.137, -0.000, -14.299, 0.137, 0.229, -14.299, -0.091, 0.324, -14.071, -0.091, -0.000, -14.071, -0.414, 0.324, -14.071, -0.091, 0.229, -14.299, -0.091, 0.229, -14.299, -0.091, -0.000, -14.299, -0.319, -0.000, -14.071, -0.414, -0.000, -14.071, 0.231, 0.324, -14.071, -0.091, 0.324, -12.708, -0.091, 0.324, -12.708, -0.091, -0.000, -12.708, 0.255, -0.000, -14.071, 0.231, 0.324, -14.071, -0.091, -0.000, -14.071, -0.414, -0.000, -12.708, -0.414, -0.000, -12.708, -0.414, 0.324, -12.708, -0.091, 0.324, -14.071, -0.091, 0.582, -14.021, -1.212, 0.149, -13.941, -0.940, 0.299, -14.110, -1.137, 0.291, -14.349, -1.596, 0.299, -14.110, -1.137, 0.149, -14.278, -1.334, 0.149, -14.278, -1.334, 0.299, -14.110, -1.137, -0.000, -14.108, -1.135, 0.149, -13.941, -0.940, -0.000, -13.941, -0.940, -0.000, -14.108, -1.135, 0.299, -14.110, -1.137, 0.149, -13.941, -0.940, -0.000, -14.108, -1.135, -0.000, -13.693, -0.829, -0.000, -13.941, -0.940, 0.149, -13.941, -0.940, 0.291, -14.349, -1.596, 0.582, -14.021, -1.212, 0.299, -14.110, -1.137, 0.582, -14.021, -1.212, 0.291, -13.693, -0.829, 0.149, -13.941, -0.940, 2.197, -12.708, -3.595, 2.197, -12.708, -2.370, 2.052, -12.708, -2.465, 1.438, -12.708, -0.921, 2.196, -12.708, -0.925, 2.088, -12.708, -0.443, 2.088, -12.708, -0.443, 1.396, -12.708, 0.019, 1.438, -12.708, -0.921, 1.438, -12.708, -0.921, -0.000, -12.708, -4.988, 1.450, -12.708, -4.984, 1.438, -12.708, -0.921, -0.000, -12.708, 0.255, -0.000, -12.708, -4.988, 2.793, -12.708, -4.973, 2.768, -12.708, -4.432, 2.197, -12.708, -3.595, 2.197, -12.708, -3.595, 2.052, -12.708, -2.465, 1.450, -12.708, -4.984, 2.197, -12.708, -3.595, 1.450, -12.708, -4.984, 2.793, -12.708, -4.973, 2.768, -12.708, -4.432, 2.554, -12.708, -3.587, 2.197, -12.708, -3.595, 2.052, -12.708, -2.465, 1.438, -12.708, -0.921, 1.450, -12.708, -4.984, -0.000, -9.062, 0.298, -0.000, -9.131, 1.432, 0.271, -9.214, 1.411, 0.271, -9.214, 1.411, 0.266, -9.140, 0.275, -0.000, -9.062, 0.298, -0.000, -9.619, 2.231, 0.273, -9.692, 2.185, 0.271, -9.214, 1.411, 0.271, -9.214, 1.411, -0.000, -9.131, 1.432, -0.000, -9.619, 2.231, -0.000, -9.619, 2.231, -0.000, -15.242, 7.796, 0.108, -15.310, 7.718, 0.108, -15.310, 7.718, 0.273, -9.692, 2.185, -0.000, -9.619, 2.231, -0.000, -15.800, 8.077, 0.119, -15.820, 8.029, 0.108, -15.310, 7.718, 0.108, -15.310, 7.718, -0.000, -15.242, 7.796, -0.000, -15.800, 8.077, -0.000, -16.426, 8.181, 0.126, -16.429, 8.140, 0.119, -15.820, 8.029, 0.119, -15.820, 8.029, -0.000, -15.800, 8.077, -0.000, -16.426, 8.181, -0.000, -16.426, 8.181, -0.000, -18.198, 8.141, 0.126, -16.429, 8.140, 0.113, -18.068, 7.485, -0.000, -18.198, 7.326, 0.143, -17.191, 7.331, 0.143, -17.191, 7.331, 0.170, -17.242, 7.492, 0.113, -18.068, 7.485, 0.170, -17.242, 7.492, 0.143, -17.191, 7.331, 0.157, -16.981, 7.479, 0.157, -16.981, 7.479, 0.170, -16.951, 7.688, 0.170, -17.242, 7.492, 0.157, -16.981, 7.479, 0.163, -16.831, 7.274, 0.180, -16.713, 7.364, 0.180, -16.713, 7.364, 0.170, -16.951, 7.688, 0.157, -16.981, 7.479, 0.316, -13.220, 1.683, 0.348, -12.781, 2.003, 0.306, -12.993, 2.047, 0.306, -12.993, 2.047, 0.280, -13.272, 1.841, 0.316, -13.220, 1.683, 0.323, -12.546, 0.263, 0.308, -12.674, 0.429, 0.270, -12.708, 0.263, -0.000, -18.198, 7.326, -0.000, -17.191, 7.331, 0.143, -17.191, 7.331, 0.143, -17.191, 7.331, -0.000, -17.191, 7.331, -0.000, -16.981, 7.479, -0.000, -16.981, 7.479, 0.157, -16.981, 7.479, 0.143, -17.191, 7.331, 0.163, -16.831, 7.274, 0.157, -16.981, 7.479, -0.000, -16.981, 7.479, -0.000, -16.981, 7.479, -0.000, -16.831, 7.274, 0.163, -16.831, 7.274, 0.280, -13.272, 1.841, 0.306, -12.993, 2.047, -0.000, -12.993, 2.047, -0.000, -12.993, 2.047, -0.000, -13.272, 1.841, 0.280, -13.272, 1.841, -0.000, -15.367, 1.835, 0.060, -15.106, 1.678, 0.316, -13.220, 1.683, -0.000, -15.367, 1.835, 0.316, -13.220, 1.683, 0.280, -13.272, 1.841, -0.000, -15.367, 1.835, 0.280, -13.272, 1.841, -0.000, -13.272, 1.841, 0.060, -15.106, 1.678, -0.000, -15.367, 1.835, -0.000, -14.873, 0.878, -0.000, -14.873, 0.878, 0.060, -14.762, 1.024, 0.060, -15.106, 1.678, 0.060, -14.762, 1.024, -0.000, -14.873, 0.878, 0.270, -12.708, 0.263, 0.270, -12.708, 0.263, 0.308, -12.674, 0.429, 0.060, -14.762, 1.024, 0.270, -12.708, 0.263, -0.000, -14.873, 0.878, -0.000, -12.708, 0.255, 0.266, -9.140, 0.275, 0.271, -9.214, 1.411, 0.336, -9.436, 1.380, 0.336, -9.436, 1.380, 0.336, -9.364, 0.251, 0.266, -9.140, 0.275, 0.336, -9.436, 1.380, 0.271, -9.214, 1.411, 0.273, -9.692, 2.185, 0.273, -9.692, 2.185, 0.336, -9.891, 2.026, 0.336, -9.436, 1.380, 0.336, -9.891, 2.026, 0.273, -9.692, 2.185, 0.108, -15.310, 7.718, 0.108, -15.310, 7.718, 0.170, -15.468, 7.554, 0.336, -9.891, 2.026, 0.108, -15.310, 7.718, 0.119, -15.820, 8.029, 0.170, -15.884, 7.902, 0.170, -15.884, 7.902, 0.170, -15.468, 7.554, 0.108, -15.310, 7.718, 0.170, -15.884, 7.902, 0.119, -15.820, 8.029, 0.126, -16.429, 8.140, 0.126, -16.429, 8.140, 0.170, -16.433, 8.024, 0.170, -15.884, 7.902, 0.126, -16.429, 8.140, -0.000, -18.198, 8.141, 0.113, -18.068, 8.020, 0.113, -18.068, 8.020, 0.170, -16.433, 8.024, 0.126, -16.429, 8.140, -0.000, -18.198, 7.326, 0.113, -18.068, 7.485, 0.113, -18.068, 8.020, 0.113, -18.068, 8.020, -0.000, -18.198, 8.141, -0.000, -18.198, 7.326, -0.000, -12.708, 0.255, 1.438, -12.708, -0.921, 1.396, -12.708, 0.019, 1.396, -12.708, 0.019, 0.270, -12.708, 0.263, -0.000, -12.708, 0.255, -0.000, -14.631, -2.259, -0.000, -14.631, -3.087, 0.475, -14.631, -2.259, -0.000, -14.405, -2.259, -0.000, -14.631, -2.259, 0.475, -14.631, -2.259, -0.000, -14.108, -1.135, -0.000, -14.278, -1.334, 0.149, -14.278, -1.334, 0.362, -13.485, -0.844, -0.000, -13.693, -0.829, 0.291, -13.693, -0.829, -0.000, -13.188, -0.742, -0.000, -13.485, -0.844, 0.362, -13.485, -0.844, -0.000, -12.708, -0.742, -0.000, -13.188, -0.742, 0.446, -13.188, -0.742, -0.000, -14.309, -1.865, 0.278, -14.373, -2.061, 0.392, -14.309, -1.865, 0.291, -14.349, -1.596, -0.000, -14.309, -1.865, 0.392, -14.309, -1.865, -0.000, -14.278, -1.334, -0.000, -14.349, -1.596, 0.149, -14.278, -1.334, 0.149, -14.278, -1.334, -0.000, -14.349, -1.596, 0.291, -14.349, -1.596, -0.000, -12.708, -0.742, 0.446, -13.188, -0.742, 0.446, -12.708, -0.742, -0.000, -13.188, -0.742, 0.362, -13.485, -0.844, 0.446, -13.188, -0.742, -0.000, -13.693, -0.829, 0.149, -13.941, -0.940, 0.291, -13.693, -0.829, -0.000, -14.309, -1.865, 0.291, -14.349, -1.596, -0.000, -14.349, -1.596, 0.278, -14.373, -2.061, -0.000, -14.309, -1.865, -0.000, -14.373, -2.061, -0.000, -13.693, -0.829, 0.362, -13.485, -0.844, -0.000, -13.485, -0.844, 11.818, -9.278, -4.389, 11.813, -9.076, -4.389, 2.813, -9.067, -4.435, 2.813, -9.067, -4.435, 2.812, -9.561, -4.439, 11.818, -9.278, -4.389, 2.794, -10.858, -4.452, 2.819, -9.560, -5.607, 2.812, -9.561, -4.439, 2.793, -12.708, -4.973, 2.794, -10.858, -4.452, 2.768, -12.708, -4.432, -0.060, -15.106, 1.678, -0.060, -14.762, 1.024, -0.000, -14.873, 0.878, -0.000, -14.873, 0.878, -0.000, -15.367, 1.835, -0.060, -15.106, 1.678, 0.306, -12.993, 2.047, 0.294, -13.316, 2.487, -0.000, -13.316, 2.487, -0.000, -13.316, 2.487, -0.000, -12.993, 2.047, 0.306, -12.993, 2.047, -0.000, -17.114, 7.081, -0.000, -13.599, 2.293, 0.155, -13.599, 2.293, 0.330, -13.199, 2.574, 0.294, -13.316, 2.487, 0.306, -12.993, 2.047, 0.306, -12.993, 2.047, 0.348, -12.781, 2.003, 0.330, -13.199, 2.574, 0.330, -13.199, 2.574, 0.180, -16.713, 7.364, 0.163, -16.831, 7.274, 0.163, -16.831, 7.274, 0.294, -13.316, 2.487, 0.330, -13.199, 2.574, -0.000, -16.831, 7.274, -0.000, -17.114, 7.081, 0.163, -16.831, 7.274, 0.163, -16.831, 7.274, -0.000, -17.114, 7.081, 0.155, -13.599, 2.293, 0.155, -13.599, 2.293, 0.294, -13.316, 2.487, 0.163, -16.831, 7.274, 0.294, -13.316, 2.487, 0.155, -13.599, 2.293, -0.000, -13.599, 2.293, -0.000, -13.599, 2.293, -0.000, -13.316, 2.487, 0.294, -13.316, 2.487, -0.000, 18.192, -4.148, 0.158, 17.983, -4.388, -0.000, 17.983, -4.390, 2.191, 12.789, -2.224, 2.360, 11.934, -2.002, 2.374, 11.934, -5.087, 2.374, 11.934, -5.087, 2.204, 12.789, -5.057, 2.191, 12.789, -2.224, 2.584, 10.873, -4.835, 2.374, 11.934, -5.087, 2.360, 11.934, -2.002, 2.360, 11.934, -2.002, 2.566, 10.873, -1.781, 2.584, 10.873, -4.835, 0.131, 18.112, -3.792, -0.000, 18.216, -4.035, -0.000, 18.114, -3.786, 0.226, 18.101, -3.835, -0.000, 18.216, -4.035, 0.131, 18.112, -3.792, 0.293, 18.077, -3.933, -0.000, 18.216, -4.035, 0.226, 18.101, -3.835, -0.000, 18.192, -4.148, -0.000, 18.216, -4.035, 0.293, 18.077, -3.933, 0.293, 18.077, -3.933, 0.324, 17.988, -4.347, -0.000, 18.192, -4.148, 0.158, 17.983, -4.388, -0.000, 18.192, -4.148, 0.324, 17.988, -4.347 ]) }, normal: { itemSize: 3, array: new Float32Array([ -0.083, 0.022, -0.996, -0.138, 0.048, -0.989, 0.000, 0.037, -0.999, 0.000, 0.037, -0.999, -0.000, 0.020, -1.000, -0.083, 0.022, -0.996, -0.714, 0.396, 0.577, -0.380, 0.212, 0.901, -0.843, 0.225, 0.488, -0.843, 0.225, 0.488, -0.960, 0.228, 0.165, -0.714, 0.396, 0.577, -0.388, 0.194, -0.901, -0.387, 0.196, -0.901, -0.726, 0.141, -0.673, -0.726, 0.141, -0.673, -0.522, 0.094, -0.848, -0.388, 0.194, -0.901, 0.000, -0.131, -0.991, 0.000, -0.226, -0.974, -0.008, -0.221, -0.975, -0.008, -0.221, -0.975, -0.037, -0.126, -0.991, 0.000, -0.131, -0.991, -0.037, -0.126, -0.991, -0.008, -0.221, -0.975, -0.021, -0.213, -0.977, -0.021, -0.213, -0.977, -0.059, -0.197, -0.979, -0.037, -0.126, -0.991, -0.087, 0.002, -0.996, -0.087, 0.002, -0.996, -0.087, 0.002, -0.996, -0.087, 0.001, -0.996, -0.087, 0.002, -0.996, -0.084, 0.010, -0.996, -0.080, 0.024, -0.997, -0.084, 0.010, -0.996, -0.088, 0.025, -0.996, -0.135, 0.004, -0.991, -0.105, -0.003, -0.995, -0.088, 0.025, -0.996, -0.135, 0.004, -0.991, -0.088, 0.025, -0.996, -0.169, 0.031, -0.985, -0.176, 0.022, -0.984, -0.135, 0.004, -0.991, -0.169, 0.031, -0.985, -0.225, 0.039, -0.974, -0.176, 0.022, -0.984, -0.169, 0.031, -0.985, -0.714, 0.396, 0.577, -0.960, 0.228, 0.165, -0.958, 0.211, -0.191, -0.975, 0.223, -0.005, -0.975, 0.223, -0.005, -0.714, 0.396, 0.577, -0.714, 0.396, 0.577, -0.619, 0.600, 0.506, -0.352, 0.349, 0.869, -0.352, 0.349, 0.869, -0.380, 0.212, 0.901, -0.714, 0.396, 0.577, -0.971, 0.238, -0.002, -1.000, 0.009, -0.024, -0.922, 0.014, 0.387, -0.922, 0.014, 0.387, -0.878, 0.218, 0.426, -0.971, 0.238, -0.002, -0.709, 0.008, -0.705, -0.715, 0.007, -0.699, -0.715, 0.007, -0.699, -0.639, 0.017, -0.769, -0.599, 0.117, -0.792, -0.709, 0.008, -0.705, -0.591, 0.124, 0.797, -0.878, 0.218, 0.426, -0.922, 0.014, 0.387, -0.922, 0.014, 0.387, -0.688, 0.018, 0.726, -0.688, 0.018, 0.726, -0.591, 0.124, 0.797, -0.922, 0.014, 0.387, -0.688, 0.018, 0.726, -0.714, 0.396, 0.577, -0.722, 0.691, 0.013, -0.722, 0.691, 0.013, -0.722, 0.691, 0.013, -0.619, 0.600, 0.506, -0.714, 0.396, 0.577, -0.387, 0.196, -0.901, -0.388, 0.194, -0.901, -0.367, 0.319, -0.874, -0.367, 0.319, -0.874, -0.369, 0.318, -0.873, -0.387, 0.196, -0.901, -0.000, 0.038, -0.999, 0.000, 0.037, -0.999, -0.138, 0.048, -0.989, -0.138, 0.048, -0.989, -0.130, 0.051, -0.990, -0.000, 0.038, -0.999, -0.130, 0.051, -0.990, -0.202, 0.062, -0.977, -0.211, 0.083, -0.974, -0.211, 0.083, -0.974, -0.134, 0.065, -0.989, -0.130, 0.051, -0.990, -0.000, 0.038, -0.999, -0.130, 0.051, -0.990, -0.134, 0.065, -0.989, -0.134, 0.065, -0.989, 0.000, 0.050, -0.999, -0.000, 0.038, -0.999, -0.962, 0.274, 0.002, -0.964, 0.267, 0.003, -0.969, 0.248, 0.007, -0.968, 0.251, 0.005, -0.976, 0.219, 0.005, -0.962, 0.274, 0.002, -0.215, 0.315, -0.925, -0.120, 0.337, -0.934, -0.139, 0.163, -0.977, -0.139, 0.163, -0.977, -0.216, 0.171, -0.961, -0.215, 0.315, -0.925, -0.120, 0.337, -0.934, 0.000, 0.328, -0.945, -0.000, 0.153, -0.988, -0.000, 0.153, -0.988, -0.139, 0.163, -0.977, -0.120, 0.337, -0.934, -0.956, 0.295, -0.003, -0.964, 0.267, 0.003, -0.962, 0.274, 0.002, -0.962, 0.274, 0.002, -0.950, 0.313, -0.001, -0.954, 0.301, 0.000, -0.134, 0.065, -0.989, -0.211, 0.083, -0.974, -0.216, 0.103, -0.971, -0.231, 0.093, -0.968, -0.141, 0.110, -0.984, -0.134, 0.065, -0.989, 0.000, 0.050, -0.999, -0.134, 0.065, -0.989, -0.141, 0.110, -0.984, -0.141, 0.110, -0.984, 0.000, 0.098, -0.995, 0.000, 0.050, -0.999, -0.727, 0.516, 0.453, -0.878, 0.218, 0.426, -0.591, 0.124, 0.797, -0.591, 0.124, 0.797, -0.460, 0.325, 0.826, -0.727, 0.516, 0.453, -0.971, 0.238, -0.002, -0.878, 0.218, 0.426, -0.727, 0.516, 0.453, -0.727, 0.516, 0.453, -0.817, 0.577, 0.010, -0.971, 0.238, -0.002, -0.599, 0.117, -0.792, -0.541, 0.241, -0.805, -0.541, 0.241, -0.805, -0.517, 0.234, -0.824, -0.468, 0.300, -0.831, -0.599, 0.117, -0.792, -0.083, 0.022, -0.996, -0.085, -0.012, -0.996, -0.135, 0.004, -0.991, -0.135, 0.004, -0.991, -0.176, 0.022, -0.984, -0.083, 0.022, -0.996, -0.025, -1.000, 0.000, -0.031, -1.000, -0.000, -0.031, -1.000, -0.000, -0.025, -1.000, 0.000, -0.031, -1.000, -0.000, -0.025, -1.000, 0.000, -0.012, -1.000, 0.000, -0.025, -1.000, 0.000, -0.025, -1.000, 0.000, -0.011, -1.000, -0.000, -0.025, -1.000, 0.000, -0.011, -1.000, -0.000, -0.037, -0.126, -0.991, -0.085, -0.012, -0.996, -0.000, -0.019, -1.000, -0.000, -0.019, -1.000, 0.000, -0.131, -0.991, -0.037, -0.126, -0.991, -0.619, 0.600, 0.506, -0.727, 0.516, 0.453, -0.460, 0.325, 0.826, -0.460, 0.325, 0.826, -0.352, 0.349, 0.869, -0.619, 0.600, 0.506, -0.817, 0.577, 0.010, -0.727, 0.516, 0.453, -0.619, 0.600, 0.506, -0.619, 0.600, 0.506, -0.722, 0.691, 0.013, -0.817, 0.577, 0.010, -0.468, 0.300, -0.831, -0.418, 0.367, -0.831, -0.418, 0.367, -0.831, -0.367, 0.323, -0.873, -0.367, 0.319, -0.874, -0.468, 0.300, -0.831, -1.000, -0.008, 0.016, -1.000, -0.005, 0.016, -1.000, -0.005, 0.016, -0.202, 0.051, -0.978, -0.202, 0.062, -0.977, -0.130, 0.051, -0.990, -0.130, 0.051, -0.990, -0.138, 0.048, -0.989, -0.235, 0.072, -0.969, -0.522, 0.094, -0.848, -0.726, 0.141, -0.673, -0.523, 0.077, -0.849, -0.726, 0.141, -0.673, -0.960, 0.228, 0.165, -0.962, 0.193, -0.192, -0.960, 0.228, 0.165, -0.843, 0.225, 0.488, -0.902, 0.259, 0.345, -0.902, 0.259, 0.345, -0.904, 0.259, 0.340, -0.960, 0.228, 0.165, -0.158, -0.003, -0.987, -0.135, 0.004, -0.991, -0.085, -0.012, -0.996, -0.085, -0.012, -0.996, -0.037, -0.126, -0.991, -0.060, -0.039, -0.997, -0.216, 0.171, -0.961, -0.139, 0.163, -0.977, -0.141, 0.110, -0.984, -0.141, 0.110, -0.984, -0.227, 0.146, -0.963, -0.216, 0.171, -0.961, -0.139, 0.163, -0.977, -0.000, 0.153, -0.988, 0.000, 0.098, -0.995, 0.000, 0.098, -0.995, -0.141, 0.110, -0.984, -0.139, 0.163, -0.977, -0.947, 0.321, -0.005, -0.947, 0.321, -0.005, -0.950, 0.313, -0.001, -0.950, 0.313, -0.001, -0.825, 0.553, 0.116, -0.944, 0.331, 0.001, -0.225, 0.039, -0.974, -0.138, 0.048, -0.989, -0.083, 0.022, -0.996, -0.083, 0.022, -0.996, -0.176, 0.022, -0.984, -0.225, 0.039, -0.974, -0.083, 0.022, -0.996, -0.000, 0.020, -1.000, -0.000, -0.019, -1.000, -0.000, -0.019, -1.000, -0.085, -0.012, -0.996, -0.083, 0.022, -0.996, -0.215, 0.315, -0.925, -0.194, 0.495, -0.847, -0.089, 0.475, -0.876, -0.089, 0.475, -0.876, -0.120, 0.337, -0.934, -0.215, 0.315, -0.925, -0.120, 0.337, -0.934, -0.089, 0.475, -0.876, 0.000, 0.455, -0.890, 0.000, 0.455, -0.890, 0.000, 0.328, -0.945, -0.120, 0.337, -0.934, 0.000, 0.707, 0.707, 0.000, 0.831, 0.557, -0.179, 0.836, 0.519, -0.179, 0.836, 0.519, -0.253, 0.712, 0.655, 0.000, 0.707, 0.707, -0.253, 0.712, 0.655, -0.179, 0.836, 0.519, -0.458, 0.821, 0.341, -0.458, 0.821, 0.341, -0.511, 0.702, 0.496, -0.253, 0.712, 0.655, -0.511, 0.702, 0.496, -0.458, 0.821, 0.341, -0.634, 0.772, 0.046, -0.634, 0.772, 0.046, -0.825, 0.553, 0.116, -0.511, 0.702, 0.496, -0.825, 0.553, 0.116, -0.634, 0.772, 0.046, -0.609, 0.759, -0.228, -0.609, 0.759, -0.228, -0.802, 0.593, -0.066, -0.825, 0.553, 0.116, -0.403, 0.659, 0.635, -0.408, 0.654, 0.637, -0.262, 0.722, 0.640, -0.262, 0.722, 0.640, -0.269, 0.715, 0.646, -0.403, 0.659, 0.635, -0.607, 0.483, 0.631, -0.612, 0.465, 0.640, -0.408, 0.654, 0.637, -0.408, 0.654, 0.637, -0.403, 0.659, 0.635, -0.607, 0.483, 0.631, -0.675, 0.369, 0.639, -0.673, 0.346, 0.654, -0.612, 0.465, 0.640, -0.612, 0.465, 0.640, -0.607, 0.483, 0.631, -0.675, 0.369, 0.639, -0.488, -0.335, 0.806, -0.167, -0.154, 0.974, -0.190, 0.000, 0.982, -0.826, -0.299, 0.478, -0.488, -0.335, 0.806, -0.551, 0.000, 0.834, -0.954, -0.300, -0.001, -0.826, -0.299, 0.478, -0.865, 0.000, 0.501, -0.954, -0.300, -0.001, -0.628, -0.685, 0.369, -0.826, -0.299, 0.478, -0.526, -0.850, 0.000, -0.628, -0.685, 0.369, -0.730, -0.683, -0.002, -0.229, -0.973, 0.000, -0.444, -0.852, 0.277, -0.526, -0.850, 0.000, -0.373, -0.063, 0.926, -0.620, -0.594, 0.512, -0.317, -0.231, 0.920, -0.737, -0.517, 0.436, -0.303, -0.944, 0.131, -0.620, -0.594, 0.512, -0.444, -0.852, 0.277, -0.215, -0.964, 0.157, -0.187, -0.925, 0.332, -0.444, -0.852, 0.277, -0.187, -0.925, 0.332, -0.404, -0.716, 0.569, -0.628, -0.685, 0.369, -0.444, -0.852, 0.277, -0.404, -0.716, 0.569, -0.404, -0.716, 0.569, -0.546, -0.610, 0.574, -0.628, -0.685, 0.369, -0.488, -0.335, 0.806, -0.546, -0.610, 0.574, -0.404, -0.716, 0.569, -0.546, -0.610, 0.574, -0.826, -0.299, 0.478, -0.628, -0.685, 0.369, -0.826, -0.299, 0.478, -0.546, -0.610, 0.574, -0.488, -0.335, 0.806, -0.404, -0.716, 0.569, -0.119, -0.425, 0.897, -0.488, -0.335, 0.806, -0.119, -0.425, 0.897, -0.167, -0.154, 0.974, -0.488, -0.335, 0.806, -0.167, -0.844, -0.510, 0.000, -0.850, -0.527, 0.000, -0.961, -0.277, 0.000, -0.961, -0.277, -0.114, -0.973, -0.201, -0.167, -0.844, -0.510, -0.614, -0.772, -0.166, -0.497, -0.858, -0.134, -0.526, -0.850, 0.000, -0.614, -0.772, -0.166, -0.526, -0.850, 0.000, -0.730, -0.683, -0.002, -0.614, -0.772, -0.166, -0.730, -0.683, -0.002, -0.696, -0.640, -0.326, -0.696, -0.640, -0.326, -0.730, -0.683, -0.002, -0.954, -0.300, -0.001, -0.954, -0.300, -0.001, -0.825, -0.303, -0.477, -0.696, -0.640, -0.326, 0.000, -0.686, -0.728, -0.365, -0.687, -0.628, -0.478, -0.299, -0.826, -0.478, -0.299, -0.826, -0.000, -0.299, -0.954, 0.000, -0.686, -0.728, 0.000, -0.686, -0.728, 0.000, -0.850, -0.527, -0.167, -0.844, -0.510, -0.167, -0.844, -0.510, -0.365, -0.687, -0.628, 0.000, -0.686, -0.728, -0.454, -0.771, -0.447, -0.557, -0.620, -0.553, -0.365, -0.687, -0.628, -0.365, -0.687, -0.628, -0.167, -0.844, -0.510, -0.454, -0.771, -0.447, -0.825, -0.303, -0.477, -0.954, -0.300, -0.001, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -0.865, -0.000, -0.501, -0.825, -0.303, -0.477, -0.478, -0.299, -0.826, -0.825, -0.303, -0.477, -0.865, -0.000, -0.501, -0.865, -0.000, -0.501, -0.501, -0.000, -0.865, -0.478, -0.299, -0.826, -0.000, -0.299, -0.954, -0.478, -0.299, -0.826, -0.501, -0.000, -0.865, -0.501, -0.000, -0.865, 0.000, -0.000, -1.000, -0.000, -0.299, -0.954, -0.385, -0.917, -0.104, -0.334, -0.922, -0.195, -0.198, -0.974, -0.114, -0.385, -0.917, -0.104, -0.198, -0.974, -0.114, -0.229, -0.973, 0.000, -0.385, -0.917, -0.104, -0.229, -0.973, 0.000, -0.526, -0.850, 0.000, -0.385, -0.917, -0.104, -0.526, -0.850, 0.000, -0.497, -0.858, -0.134, -0.282, -0.917, -0.282, -0.167, -0.844, -0.510, -0.114, -0.973, -0.201, -0.114, -0.973, -0.201, -0.198, -0.974, -0.114, -0.334, -0.922, -0.195, -0.282, -0.917, -0.282, -0.114, -0.973, -0.201, -0.334, -0.922, -0.195, -0.478, -0.299, -0.826, -0.365, -0.687, -0.628, -0.557, -0.620, -0.553, -0.825, -0.303, -0.477, -0.478, -0.299, -0.826, -0.557, -0.620, -0.553, -0.825, -0.303, -0.477, -0.557, -0.620, -0.553, -0.588, -0.593, -0.550, -0.825, -0.303, -0.477, -0.588, -0.593, -0.550, -0.696, -0.640, -0.326, 0.022, 0.205, 0.979, 0.022, 0.205, 0.979, 0.003, 0.189, 0.982, -0.082, 0.132, 0.988, -0.082, 0.132, 0.988, 0.003, 0.189, 0.982, -0.011, 0.173, 0.985, -0.011, 0.173, 0.985, 0.003, 0.189, 0.982, -0.036, -0.345, -0.938, -0.036, -0.345, -0.938, -0.036, -0.345, -0.938, -0.036, -0.345, -0.938, -0.036, -0.345, -0.938, -0.036, -0.345, -0.938, 0.866, 0.084, 0.492, 0.866, 0.084, 0.492, 0.869, 0.089, 0.486, 0.864, 0.075, 0.498, 0.864, 0.075, 0.498, 0.869, 0.089, 0.486, 0.872, 0.096, 0.480, 0.872, 0.096, 0.480, 0.869, 0.089, 0.486, -0.844, -0.260, -0.469, -0.844, -0.260, -0.469, -0.844, -0.260, -0.469, -0.844, -0.260, -0.469, -0.844, -0.260, -0.469, -0.844, -0.260, -0.469, 0.895, 0.099, -0.434, 0.895, 0.099, -0.434, 0.860, 0.099, -0.500, 0.705, -0.057, -0.707, 0.705, -0.057, -0.707, 0.860, 0.099, -0.500, 0.864, 0.124, -0.489, 0.864, 0.124, -0.489, 0.860, 0.099, -0.500, -0.844, -0.260, 0.469, -0.844, -0.260, 0.469, -0.844, -0.260, 0.469, -0.844, -0.260, 0.469, -0.844, -0.260, 0.469, -0.844, -0.260, 0.469, 0.022, 0.212, -0.977, 0.022, 0.212, -0.977, 0.018, 0.216, -0.976, 0.018, 0.216, -0.976, 0.009, 0.224, -0.975, 0.009, 0.224, -0.975, -0.036, -0.345, 0.938, -0.036, -0.345, 0.938, -0.036, -0.345, 0.938, -0.036, -0.345, 0.938, -0.036, -0.345, 0.938, -0.036, -0.345, 0.938, -0.832, 0.339, 0.438, -0.832, 0.339, 0.438, -0.827, 0.313, 0.468, -0.827, 0.313, 0.468, -0.821, 0.293, 0.489, -0.821, 0.293, 0.489, -0.803, 0.304, -0.513, -0.822, 0.291, -0.490, -0.822, 0.291, -0.490, -0.803, 0.304, -0.513, -0.771, 0.327, -0.547, -0.771, 0.327, -0.547, -0.803, 0.304, -0.513, -0.734, 0.340, -0.588, -0.734, 0.340, -0.588, 0.772, -0.430, -0.469, 0.772, -0.430, -0.469, 0.772, -0.430, -0.469, 0.772, -0.430, -0.469, 0.772, -0.430, -0.469, 0.772, -0.430, -0.469, 0.772, -0.430, 0.469, 0.772, -0.430, 0.469, 0.772, -0.430, 0.469, 0.772, -0.430, 0.469, 0.772, -0.430, 0.469, 0.772, -0.430, 0.469, -0.223, -0.952, -0.210, -0.097, -0.995, -0.000, -0.340, -0.940, 0.000, -0.340, -0.940, 0.000, -0.097, -0.995, -0.000, -0.223, -0.952, 0.210, -0.223, -0.952, 0.210, -0.097, -0.995, -0.000, 0.022, -0.976, 0.216, 0.022, -0.976, 0.216, -0.097, -0.995, -0.000, 0.150, -0.989, 0.000, 0.150, -0.989, 0.000, -0.097, -0.995, -0.000, 0.022, -0.976, -0.216, 0.022, -0.976, -0.216, -0.097, -0.995, -0.000, -0.223, -0.952, -0.210, 0.000, -0.972, 0.237, -0.029, -0.971, 0.238, 0.000, -0.987, 0.159, -0.029, -0.971, 0.238, -0.215, -0.964, 0.157, 0.000, -0.987, 0.159, 0.000, -1.000, 0.000, -0.215, -0.964, 0.157, -0.229, -0.973, 0.000, 0.000, -1.000, 0.000, -0.229, -0.973, 0.000, -0.198, -0.974, -0.114, 0.000, -1.000, 0.000, -0.198, -0.974, -0.114, -0.114, -0.973, -0.201, 0.000, -1.000, 0.000, -0.114, -0.973, -0.201, 0.000, -0.961, -0.277, -0.867, -0.000, -0.498, -0.867, -0.000, -0.498, -0.867, 0.000, -0.498, -0.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.000, -0.000, -1.000, -0.867, -0.000, -0.498, 0.000, -0.000, -1.000, -0.867, -0.000, -0.498, 0.000, -0.000, -1.000, -0.867, -0.000, -0.498, -0.303, -0.944, 0.131, -0.737, -0.517, 0.436, -0.338, -0.941, -0.010, -0.620, -0.594, 0.512, -0.373, -0.063, 0.926, -0.737, -0.517, 0.436, -0.628, -0.685, 0.369, -0.526, -0.850, 0.000, -0.444, -0.852, 0.277, -0.628, -0.685, 0.369, -0.954, -0.300, -0.001, -0.730, -0.683, -0.002, -0.954, -0.300, -0.001, -0.865, 0.000, 0.501, -1.000, -0.000, 0.000, -0.826, -0.299, 0.478, -0.551, 0.000, 0.834, -0.865, 0.000, 0.501, -0.488, -0.335, 0.806, -0.190, 0.000, 0.982, -0.551, 0.000, 0.834, -0.444, -0.852, 0.277, -0.229, -0.973, 0.000, -0.215, -0.964, 0.157, -0.187, -0.925, 0.332, -0.215, -0.964, 0.157, -0.029, -0.971, 0.238, 0.000, -1.000, 0.000, -0.000, -0.629, 0.778, -0.777, -0.629, 0.000, 0.000, -1.000, 0.000, -0.777, -0.629, 0.000, 0.000, -0.629, -0.778, -0.924, -0.383, 0.000, -0.777, -0.629, 0.000, -0.000, -0.629, 0.778, -0.000, -0.629, 0.778, 0.000, -0.383, 0.924, -0.924, -0.383, 0.000, 0.000, -0.382, -0.924, 0.000, -0.629, -0.778, -0.777, -0.629, 0.000, -0.777, -0.629, 0.000, -0.924, -0.383, 0.000, 0.000, -0.382, -0.924, -0.730, -0.012, 0.683, 0.000, -0.017, 1.000, -1.000, -0.007, -0.014, -1.000, -0.007, -0.014, -0.706, 0.000, 0.708, -0.706, 0.000, 0.708, -0.706, -0.000, -0.708, -1.000, -0.007, -0.014, 0.000, -0.000, -1.000, 0.000, -0.000, -1.000, -0.706, -0.000, -0.708, -0.706, -0.000, -0.708, -0.620, -0.594, 0.512, -0.254, -0.735, 0.628, -0.127, -0.593, 0.795, -0.303, -0.944, 0.131, -0.127, -0.878, 0.461, -0.254, -0.735, 0.628, -0.127, -0.878, 0.461, -0.000, -0.760, 0.649, -0.254, -0.735, 0.628, -0.127, -0.593, 0.795, -0.000, -0.760, 0.649, 0.000, -0.599, 0.801, -0.254, -0.735, 0.628, -0.000, -0.760, 0.649, -0.127, -0.593, 0.795, 0.000, -0.173, 0.985, -0.127, -0.593, 0.795, 0.000, -0.599, 0.801, -0.303, -0.944, 0.131, -0.254, -0.735, 0.628, -0.620, -0.594, 0.512, -0.620, -0.594, 0.512, -0.127, -0.593, 0.795, -0.317, -0.231, 0.920, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, 0.000, -0.000, -1.000, 0.000, -0.000, -1.000, 0.000, -0.000, -1.000, 0.001, -0.000, -1.000, 0.001, 0.000, -1.000, 0.001, -0.000, -1.000, 0.000, -0.000, -1.000, 0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, -0.000, -1.000, 0.000, 0.000, -1.000, -0.000, 0.000, -1.000, 0.000, -0.000, -1.000, 0.000, 0.000, -1.000, -0.000, -0.001, -1.000, 0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, -0.000, -1.000, 0.000, 0.000, -1.000, -0.000, -0.001, -1.000, 0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, -0.000, -1.000, 0.000, 0.000, 0.998, 0.063, -0.716, 0.697, 0.044, -0.680, 0.700, 0.218, -0.680, 0.700, 0.218, 0.000, 0.955, 0.297, 0.000, 0.998, 0.063, 0.000, 0.782, 0.623, 0.000, 0.955, 0.297, -0.680, 0.700, 0.218, -0.680, 0.700, 0.218, -0.711, 0.543, 0.447, 0.000, 0.782, 0.623, 0.000, 0.782, 0.623, -0.711, 0.543, 0.447, -0.840, 0.324, 0.435, -0.840, 0.324, 0.435, 0.000, 0.588, 0.809, 0.000, 0.782, 0.623, 0.000, 0.349, 0.937, 0.000, 0.588, 0.809, -0.840, 0.324, 0.435, -0.840, 0.324, 0.435, -0.706, 0.258, 0.659, 0.000, 0.349, 0.937, 0.000, 0.079, 0.997, 0.000, 0.349, 0.937, -0.706, 0.258, 0.659, -0.706, 0.258, 0.659, -0.682, 0.054, 0.729, 0.000, 0.079, 0.997, 0.000, 0.079, 0.997, -0.682, 0.054, 0.729, 0.000, -0.075, 0.997, -0.870, -0.422, -0.254, -0.988, -0.011, -0.153, -0.981, -0.018, -0.195, -0.981, -0.018, -0.195, -0.868, -0.406, -0.287, -0.870, -0.422, -0.254, -0.988, -0.011, -0.153, -0.998, -0.027, -0.058, -0.997, -0.031, -0.070, -0.997, -0.031, -0.070, -0.981, -0.018, -0.195, -0.988, -0.011, -0.153, -0.997, -0.031, -0.070, -0.998, -0.027, -0.058, -0.993, -0.109, -0.050, -0.993, -0.109, -0.050, -0.993, -0.110, -0.052, -0.997, -0.031, -0.070, -0.973, -0.163, 0.162, -0.861, -0.150, 0.487, -0.981, -0.195, 0.000, -0.981, -0.195, 0.000, -0.982, -0.190, 0.007, -0.973, -0.163, 0.162, -0.939, -0.309, -0.151, -0.957, -0.234, -0.172, -0.960, -0.219, -0.174, 0.000, 0.005, -1.000, 0.000, 0.005, -1.000, 0.000, 0.005, -1.000, 0.000, 0.577, -0.816, 0.000, 0.577, -0.816, 0.000, 0.577, -0.816, 0.000, 0.577, -0.816, 0.000, 0.577, -0.816, 0.000, 0.577, -0.816, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.593, 0.805, 0.000, -0.593, 0.805, 0.000, -0.593, 0.805, 0.000, -0.593, 0.805, 0.000, -0.593, 0.805, 0.000, -0.593, 0.805, -0.917, -0.125, 0.378, 0.000, -0.003, 1.000, -0.861, -0.150, 0.487, -0.917, -0.125, 0.378, -0.861, -0.150, 0.487, -0.973, -0.163, 0.162, -0.917, -0.125, 0.378, -0.973, -0.163, 0.162, -0.974, -0.225, -0.002, -0.941, -0.300, -0.158, -0.941, -0.300, -0.158, -0.941, -0.300, -0.158, -0.937, -0.312, -0.161, -0.937, -0.312, -0.161, -0.937, -0.312, -0.161, -0.951, -0.188, -0.244, -0.960, -0.219, -0.174, -0.957, -0.234, -0.172, -0.957, -0.234, -0.172, -0.948, -0.245, -0.203, -0.951, -0.188, -0.244, -0.031, -0.276, -0.961, -0.031, -0.276, -0.961, -0.031, -0.276, -0.961, -0.716, 0.697, 0.044, -0.955, 0.297, 0.019, -0.960, 0.264, 0.092, -0.960, 0.264, 0.092, -0.680, 0.700, 0.218, -0.716, 0.697, 0.044, -0.960, 0.264, 0.092, -0.970, 0.177, 0.164, -0.711, 0.543, 0.447, -0.711, 0.543, 0.447, -0.680, 0.700, 0.218, -0.960, 0.264, 0.092, -0.970, 0.177, 0.164, -0.965, 0.170, 0.202, -0.840, 0.324, 0.435, -0.840, 0.324, 0.435, -0.711, 0.543, 0.447, -0.970, 0.177, 0.164, -0.840, 0.324, 0.435, -0.965, 0.170, 0.202, -0.944, 0.130, 0.303, -0.944, 0.130, 0.303, -0.706, 0.258, 0.659, -0.840, 0.324, 0.435, -0.944, 0.130, 0.303, -0.935, 0.025, 0.355, -0.682, 0.054, 0.729, -0.682, 0.054, 0.729, -0.706, 0.258, 0.659, -0.944, 0.130, 0.303, -0.682, 0.054, 0.729, -0.935, 0.025, 0.355, -0.764, -0.053, 0.643, -0.764, -0.053, 0.643, 0.000, -0.075, 0.997, -0.682, 0.054, 0.729, -0.868, -0.406, -0.287, -0.755, -0.656, 0.000, -0.755, -0.656, 0.000, -0.755, -0.656, 0.000, -0.870, -0.422, -0.254, -0.868, -0.406, -0.287, -0.000, -1.000, 0.002, -0.000, -1.000, 0.002, -0.000, -1.000, 0.000, -0.000, -1.000, 0.000, -0.000, -1.000, 0.000, -0.000, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, 0.000, 1.000, -0.000, 0.000, 1.000, 0.000, 0.000, 1.000, -0.000, -0.760, 0.649, -0.127, -0.878, 0.461, 0.000, -0.885, 0.466, -0.373, -0.063, 0.926, -0.317, -0.231, 0.920, 0.000, -0.173, 0.985, -0.000, -0.166, 0.986, -0.119, -0.425, 0.897, -0.000, -0.326, 0.945, 0.000, 0.000, 1.000, -0.167, -0.154, 0.974, -0.000, -0.166, 0.986, -0.000, -0.950, 0.311, -0.187, -0.925, 0.332, -0.029, -0.971, 0.238, -0.303, -0.944, 0.131, -0.338, -0.941, -0.010, -0.000, -0.989, -0.146, 0.000, -0.885, 0.466, -0.127, -0.878, 0.461, -0.000, -0.998, 0.058, -0.127, -0.878, 0.461, -0.303, -0.944, 0.131, -0.000, -0.998, 0.058, 0.000, 0.000, 1.000, -0.190, 0.000, 0.982, -0.167, -0.154, 0.974, -0.000, -0.166, 0.986, -0.167, -0.154, 0.974, -0.119, -0.425, 0.897, 0.000, -0.173, 0.985, -0.317, -0.231, 0.920, -0.127, -0.593, 0.795, -0.000, -0.989, -0.146, -0.000, -0.998, 0.058, -0.303, -0.944, 0.131, -0.029, -0.971, 0.238, 0.000, -0.972, 0.237, -0.000, -0.950, 0.311, 0.000, -0.173, 0.985, 0.000, 0.073, 0.997, -0.373, -0.063, 0.926, 0.005, -0.000, 1.000, 0.005, -0.008, 1.000, 0.005, -0.008, 1.000, 0.005, -0.008, 1.000, 0.005, -0.000, 1.000, 0.005, -0.000, 1.000, -1.000, -0.008, 0.016, -1.000, -0.014, 0.006, -1.000, -0.014, 0.006, -0.999, -0.014, 0.046, -0.999, -0.014, 0.046, -1.000, -0.008, 0.016, 0.937, -0.312, -0.161, 0.937, -0.312, -0.161, 0.937, -0.312, -0.161, 0.941, -0.300, -0.158, 0.941, -0.300, -0.158, 0.941, -0.300, -0.158, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, -0.000, -0.806, -0.592, -0.000, -0.806, -0.592, -0.000, -0.806, -0.592, -0.000, -0.806, -0.592, -0.000, -0.806, -0.592, -0.000, -0.806, -0.592, -0.971, -0.205, -0.123, -0.982, -0.190, 0.007, -0.981, -0.195, 0.000, -0.981, -0.195, 0.000, -0.971, -0.204, -0.123, -0.971, -0.205, -0.123, -0.971, -0.205, -0.123, -0.971, -0.204, -0.123, -0.993, -0.110, -0.052, -0.993, -0.110, -0.052, -0.993, -0.109, -0.050, -0.971, -0.205, -0.123, -0.000, -0.564, 0.825, -0.000, -0.564, 0.825, -0.000, -0.564, 0.825, -0.927, -0.315, -0.206, -0.927, -0.315, -0.206, -0.927, -0.315, -0.206, -0.903, -0.359, -0.234, -0.903, -0.359, -0.234, -0.903, -0.359, -0.234, 0.000, 0.564, -0.825, 0.000, 0.564, -0.825, 0.000, 0.564, -0.825, 0.000, 0.565, -0.825, 0.000, 0.565, -0.825, 0.000, 0.565, -0.825, 0.000, 0.942, -0.337, 0.000, 0.756, -0.654, -0.080, 0.777, -0.624, -0.976, 0.219, 0.005, -0.981, 0.195, 0.005, -0.981, 0.195, 0.005, -0.981, 0.195, 0.005, -0.981, 0.193, 0.005, -0.976, 0.219, 0.005, -0.981, 0.194, 0.005, -0.981, 0.192, 0.006, -0.981, 0.193, 0.005, -0.981, 0.193, 0.005, -0.981, 0.195, 0.005, -0.981, 0.194, 0.005, -0.179, 0.836, 0.519, 0.000, 0.831, 0.557, -0.000, 1.000, -0.018, -0.458, 0.821, 0.341, -0.179, 0.836, 0.519, -0.000, 1.000, -0.018, -0.634, 0.772, 0.046, -0.458, 0.821, 0.341, -0.000, 1.000, -0.018, 0.000, 0.942, -0.337, -0.609, 0.759, -0.228, -0.634, 0.772, 0.046, -0.634, 0.772, 0.046, -0.000, 1.000, -0.018, 0.000, 0.942, -0.337, -0.080, 0.777, -0.624, -0.609, 0.759, -0.228, 0.000, 0.942, -0.337, 0.083, 0.022, -0.996, -0.000, 0.020, -1.000, 0.000, 0.037, -0.999, 0.000, 0.037, -0.999, 0.138, 0.048, -0.989, 0.083, 0.022, -0.996, 0.714, 0.396, 0.577, 0.960, 0.228, 0.165, 0.843, 0.225, 0.488, 0.843, 0.225, 0.488, 0.380, 0.212, 0.901, 0.714, 0.396, 0.577, 0.388, 0.194, -0.901, 0.522, 0.094, -0.848, 0.726, 0.141, -0.673, 0.726, 0.141, -0.673, 0.387, 0.196, -0.901, 0.388, 0.194, -0.901, 0.000, -0.131, -0.991, 0.037, -0.126, -0.991, 0.008, -0.221, -0.975, 0.008, -0.221, -0.975, 0.000, -0.226, -0.974, 0.000, -0.131, -0.991, 0.037, -0.126, -0.991, 0.059, -0.197, -0.979, 0.021, -0.213, -0.977, 0.021, -0.213, -0.977, 0.008, -0.221, -0.975, 0.037, -0.126, -0.991, 0.087, 0.002, -0.996, 0.087, 0.002, -0.996, 0.087, 0.002, -0.996, 0.084, 0.010, -0.996, 0.087, 0.002, -0.996, 0.087, 0.001, -0.996, 0.088, 0.025, -0.996, 0.084, 0.010, -0.996, 0.080, 0.024, -0.997, 0.088, 0.025, -0.996, 0.105, -0.003, -0.995, 0.135, 0.004, -0.991, 0.169, 0.031, -0.985, 0.088, 0.025, -0.996, 0.135, 0.004, -0.991, 0.169, 0.031, -0.985, 0.135, 0.004, -0.991, 0.176, 0.022, -0.984, 0.225, 0.039, -0.974, 0.169, 0.031, -0.985, 0.176, 0.022, -0.984, 0.714, 0.396, 0.577, 0.975, 0.223, -0.005, 0.975, 0.223, -0.005, 0.958, 0.211, -0.191, 0.960, 0.228, 0.165, 0.714, 0.396, 0.577, 0.714, 0.396, 0.577, 0.380, 0.212, 0.901, 0.352, 0.349, 0.869, 0.352, 0.349, 0.869, 0.619, 0.600, 0.506, 0.714, 0.396, 0.577, 0.971, 0.238, -0.002, 0.878, 0.218, 0.426, 0.922, 0.014, 0.387, 0.922, 0.014, 0.387, 1.000, 0.009, -0.024, 0.971, 0.238, -0.002, 0.709, 0.008, -0.705, 0.599, 0.117, -0.792, 0.639, 0.017, -0.769, 0.715, 0.007, -0.699, 0.715, 0.007, -0.699, 0.709, 0.008, -0.705, 0.688, 0.018, 0.726, 0.688, 0.018, 0.726, 0.922, 0.014, 0.387, 0.591, 0.124, 0.797, 0.688, 0.018, 0.726, 0.922, 0.014, 0.387, 0.591, 0.124, 0.797, 0.922, 0.014, 0.387, 0.878, 0.218, 0.426, 0.714, 0.396, 0.577, 0.619, 0.600, 0.506, 0.722, 0.691, 0.013, 0.722, 0.691, 0.013, 0.722, 0.691, 0.013, 0.714, 0.396, 0.577, 0.387, 0.196, -0.901, 0.369, 0.318, -0.873, 0.367, 0.319, -0.874, 0.367, 0.319, -0.874, 0.388, 0.194, -0.901, 0.387, 0.196, -0.901, -0.000, 0.038, -0.999, 0.130, 0.051, -0.990, 0.138, 0.048, -0.989, 0.138, 0.048, -0.989, 0.000, 0.037, -0.999, -0.000, 0.038, -0.999, 0.130, 0.051, -0.990, 0.134, 0.065, -0.989, 0.211, 0.083, -0.974, 0.211, 0.083, -0.974, 0.202, 0.062, -0.977, 0.130, 0.051, -0.990, -0.000, 0.038, -0.999, 0.000, 0.050, -0.999, 0.134, 0.065, -0.989, 0.134, 0.065, -0.989, 0.130, 0.051, -0.990, -0.000, 0.038, -0.999, 0.962, 0.274, 0.002, 0.976, 0.219, 0.005, 0.968, 0.251, 0.005, 0.969, 0.248, 0.007, 0.964, 0.267, 0.003, 0.962, 0.274, 0.002, 0.215, 0.315, -0.925, 0.216, 0.171, -0.961, 0.139, 0.163, -0.977, 0.139, 0.163, -0.977, 0.120, 0.337, -0.934, 0.215, 0.315, -0.925, 0.120, 0.337, -0.934, 0.139, 0.163, -0.977, -0.000, 0.153, -0.988, -0.000, 0.153, -0.988, 0.000, 0.328, -0.945, 0.120, 0.337, -0.934, 0.954, 0.301, 0.000, 0.950, 0.313, -0.001, 0.962, 0.274, 0.002, 0.962, 0.274, 0.002, 0.964, 0.267, 0.003, 0.956, 0.295, -0.003, 0.134, 0.065, -0.989, 0.141, 0.110, -0.984, 0.231, 0.093, -0.968, 0.216, 0.103, -0.971, 0.211, 0.083, -0.974, 0.134, 0.065, -0.989, 0.000, 0.050, -0.999, 0.000, 0.098, -0.995, 0.141, 0.110, -0.984, 0.141, 0.110, -0.984, 0.134, 0.065, -0.989, 0.000, 0.050, -0.999, 0.727, 0.516, 0.453, 0.460, 0.325, 0.826, 0.591, 0.124, 0.797, 0.591, 0.124, 0.797, 0.878, 0.218, 0.426, 0.727, 0.516, 0.453, 0.971, 0.238, -0.002, 0.817, 0.577, 0.010, 0.727, 0.516, 0.453, 0.727, 0.516, 0.453, 0.878, 0.218, 0.426, 0.971, 0.238, -0.002, 0.599, 0.117, -0.792, 0.468, 0.300, -0.831, 0.517, 0.234, -0.824, 0.541, 0.241, -0.805, 0.541, 0.241, -0.805, 0.599, 0.117, -0.792, 0.083, 0.022, -0.996, 0.176, 0.022, -0.984, 0.135, 0.004, -0.991, 0.135, 0.004, -0.991, 0.085, -0.012, -0.996, 0.083, 0.022, -0.996, 0.011, -1.000, -0.000, 0.011, -1.000, -0.000, 0.025, -1.000, 0.000, 0.031, -1.000, -0.000, 0.031, -1.000, -0.000, 0.025, -1.000, 0.000, 0.025, -1.000, 0.000, 0.031, -1.000, -0.000, 0.025, -1.000, 0.000, 0.012, -1.000, 0.000, 0.025, -1.000, 0.000, 0.025, -1.000, 0.000, 0.037, -0.126, -0.991, 0.000, -0.131, -0.991, -0.000, -0.019, -1.000, -0.000, -0.019, -1.000, 0.085, -0.012, -0.996, 0.037, -0.126, -0.991, 0.619, 0.600, 0.506, 0.352, 0.349, 0.869, 0.460, 0.325, 0.826, 0.460, 0.325, 0.826, 0.727, 0.516, 0.453, 0.619, 0.600, 0.506, 0.817, 0.577, 0.010, 0.722, 0.691, 0.013, 0.619, 0.600, 0.506, 0.619, 0.600, 0.506, 0.727, 0.516, 0.453, 0.817, 0.577, 0.010, 0.468, 0.300, -0.831, 0.367, 0.319, -0.874, 0.367, 0.323, -0.873, 0.418, 0.367, -0.831, 0.418, 0.367, -0.831, 0.468, 0.300, -0.831, 1.000, -0.008, 0.016, 1.000, -0.005, 0.016, 1.000, -0.005, 0.016, 0.235, 0.072, -0.969, 0.138, 0.048, -0.989, 0.130, 0.051, -0.990, 0.130, 0.051, -0.990, 0.202, 0.062, -0.977, 0.202, 0.051, -0.978, 0.522, 0.094, -0.848, 0.523, 0.077, -0.849, 0.726, 0.141, -0.673, 0.726, 0.141, -0.673, 0.962, 0.193, -0.192, 0.960, 0.228, 0.165, 0.960, 0.228, 0.165, 0.904, 0.259, 0.340, 0.902, 0.259, 0.345, 0.902, 0.259, 0.345, 0.843, 0.225, 0.488, 0.960, 0.228, 0.165, 0.060, -0.039, -0.997, 0.037, -0.126, -0.991, 0.085, -0.012, -0.996, 0.085, -0.012, -0.996, 0.135, 0.004, -0.991, 0.158, -0.003, -0.987, 0.216, 0.171, -0.961, 0.227, 0.146, -0.963, 0.141, 0.110, -0.984, 0.141, 0.110, -0.984, 0.139, 0.163, -0.977, 0.216, 0.171, -0.961, 0.139, 0.163, -0.977, 0.141, 0.110, -0.984, 0.000, 0.098, -0.995, 0.000, 0.098, -0.995, -0.000, 0.153, -0.988, 0.139, 0.163, -0.977, 0.944, 0.331, 0.001, 0.825, 0.553, 0.116, 0.950, 0.313, -0.001, 0.950, 0.313, -0.001, 0.947, 0.321, -0.005, 0.947, 0.321, -0.005, 0.225, 0.039, -0.974, 0.176, 0.022, -0.984, 0.083, 0.022, -0.996, 0.083, 0.022, -0.996, 0.138, 0.048, -0.989, 0.225, 0.039, -0.974, 0.083, 0.022, -0.996, 0.085, -0.012, -0.996, -0.000, -0.019, -1.000, -0.000, -0.019, -1.000, -0.000, 0.020, -1.000, 0.083, 0.022, -0.996, 0.215, 0.315, -0.925, 0.120, 0.337, -0.934, 0.089, 0.475, -0.876, 0.089, 0.475, -0.876, 0.194, 0.495, -0.847, 0.215, 0.315, -0.925, 0.120, 0.337, -0.934, 0.000, 0.328, -0.945, 0.000, 0.455, -0.890, 0.000, 0.455, -0.890, 0.089, 0.475, -0.876, 0.120, 0.337, -0.934, 0.000, 0.707, 0.707, 0.253, 0.712, 0.655, 0.179, 0.836, 0.519, 0.179, 0.836, 0.519, 0.000, 0.831, 0.557, 0.000, 0.707, 0.707, 0.253, 0.712, 0.655, 0.511, 0.702, 0.496, 0.458, 0.821, 0.341, 0.458, 0.821, 0.341, 0.179, 0.836, 0.519, 0.253, 0.712, 0.655, 0.511, 0.702, 0.496, 0.825, 0.553, 0.116, 0.634, 0.772, 0.046, 0.634, 0.772, 0.046, 0.458, 0.821, 0.341, 0.511, 0.702, 0.496, 0.825, 0.553, 0.116, 0.802, 0.593, -0.066, 0.609, 0.759, -0.228, 0.609, 0.759, -0.228, 0.634, 0.772, 0.046, 0.825, 0.553, 0.116, 0.403, 0.659, 0.635, 0.269, 0.715, 0.646, 0.262, 0.722, 0.640, 0.262, 0.722, 0.640, 0.408, 0.654, 0.637, 0.403, 0.659, 0.635, 0.607, 0.483, 0.631, 0.403, 0.659, 0.635, 0.408, 0.654, 0.637, 0.408, 0.654, 0.637, 0.612, 0.465, 0.640, 0.607, 0.483, 0.631, 0.675, 0.369, 0.639, 0.607, 0.483, 0.631, 0.612, 0.465, 0.640, 0.612, 0.465, 0.640, 0.673, 0.346, 0.654, 0.675, 0.369, 0.639, 0.488, -0.335, 0.806, 0.190, 0.000, 0.982, 0.167, -0.154, 0.974, 0.826, -0.299, 0.478, 0.551, 0.000, 0.834, 0.488, -0.335, 0.806, 0.954, -0.300, -0.001, 0.865, 0.000, 0.501, 0.826, -0.299, 0.478, 0.954, -0.300, -0.001, 0.826, -0.299, 0.478, 0.628, -0.685, 0.369, 0.526, -0.850, 0.000, 0.730, -0.683, -0.002, 0.628, -0.685, 0.369, 0.229, -0.973, 0.000, 0.526, -0.850, 0.000, 0.444, -0.852, 0.277, 0.373, -0.063, 0.926, 0.317, -0.231, 0.920, 0.620, -0.594, 0.512, 0.737, -0.517, 0.436, 0.620, -0.594, 0.512, 0.303, -0.944, 0.131, 0.444, -0.852, 0.277, 0.187, -0.925, 0.332, 0.215, -0.964, 0.157, 0.444, -0.852, 0.277, 0.404, -0.716, 0.569, 0.187, -0.925, 0.332, 0.628, -0.685, 0.369, 0.404, -0.716, 0.569, 0.444, -0.852, 0.277, 0.404, -0.716, 0.569, 0.628, -0.685, 0.369, 0.546, -0.610, 0.574, 0.488, -0.335, 0.806, 0.404, -0.716, 0.569, 0.546, -0.610, 0.574, 0.546, -0.610, 0.574, 0.628, -0.685, 0.369, 0.826, -0.299, 0.478, 0.826, -0.299, 0.478, 0.488, -0.335, 0.806, 0.546, -0.610, 0.574, 0.404, -0.716, 0.569, 0.488, -0.335, 0.806, 0.119, -0.425, 0.897, 0.119, -0.425, 0.897, 0.488, -0.335, 0.806, 0.167, -0.154, 0.974, 0.167, -0.844, -0.510, 0.114, -0.973, -0.201, 0.000, -0.961, -0.277, 0.000, -0.961, -0.277, 0.000, -0.850, -0.527, 0.167, -0.844, -0.510, 0.614, -0.772, -0.166, 0.696, -0.640, -0.326, 0.730, -0.683, -0.002, 0.614, -0.772, -0.166, 0.730, -0.683, -0.002, 0.526, -0.850, 0.000, 0.614, -0.772, -0.166, 0.526, -0.850, 0.000, 0.497, -0.858, -0.134, 0.696, -0.640, -0.326, 0.825, -0.303, -0.477, 0.954, -0.300, -0.001, 0.954, -0.300, -0.001, 0.730, -0.683, -0.002, 0.696, -0.640, -0.326, 0.000, -0.686, -0.728, -0.000, -0.299, -0.954, 0.478, -0.299, -0.826, 0.478, -0.299, -0.826, 0.365, -0.687, -0.628, 0.000, -0.686, -0.728, 0.000, -0.686, -0.728, 0.365, -0.687, -0.628, 0.167, -0.844, -0.510, 0.167, -0.844, -0.510, 0.000, -0.850, -0.527, 0.000, -0.686, -0.728, 0.454, -0.771, -0.447, 0.167, -0.844, -0.510, 0.365, -0.687, -0.628, 0.365, -0.687, -0.628, 0.557, -0.620, -0.553, 0.454, -0.771, -0.447, 0.825, -0.303, -0.477, 0.865, -0.000, -0.501, 1.000, -0.000, 0.000, 1.000, -0.000, 0.000, 0.954, -0.300, -0.001, 0.825, -0.303, -0.477, 0.478, -0.299, -0.826, 0.501, -0.000, -0.865, 0.865, -0.000, -0.501, 0.865, -0.000, -0.501, 0.825, -0.303, -0.477, 0.478, -0.299, -0.826, -0.000, -0.299, -0.954, 0.000, -0.000, -1.000, 0.501, -0.000, -0.865, 0.501, -0.000, -0.865, 0.478, -0.299, -0.826, -0.000, -0.299, -0.954, 0.385, -0.917, -0.104, 0.497, -0.858, -0.134, 0.526, -0.850, 0.000, 0.385, -0.917, -0.104, 0.526, -0.850, 0.000, 0.229, -0.973, 0.000, 0.385, -0.917, -0.104, 0.229, -0.973, 0.000, 0.198, -0.974, -0.114, 0.385, -0.917, -0.104, 0.198, -0.974, -0.114, 0.334, -0.922, -0.195, 0.334, -0.922, -0.195, 0.198, -0.974, -0.114, 0.114, -0.973, -0.201, 0.282, -0.917, -0.282, 0.334, -0.922, -0.195, 0.114, -0.973, -0.201, 0.282, -0.917, -0.282, 0.114, -0.973, -0.201, 0.167, -0.844, -0.510, 0.825, -0.303, -0.477, 0.696, -0.640, -0.326, 0.588, -0.593, -0.550, 0.825, -0.303, -0.477, 0.588, -0.593, -0.550, 0.557, -0.620, -0.553, 0.557, -0.620, -0.553, 0.365, -0.687, -0.628, 0.478, -0.299, -0.826, 0.825, -0.303, -0.477, 0.557, -0.620, -0.553, 0.478, -0.299, -0.826, -0.003, 0.189, 0.982, -0.022, 0.205, 0.979, -0.022, 0.205, 0.979, -0.003, 0.189, 0.982, 0.082, 0.132, 0.988, 0.082, 0.132, 0.988, 0.011, 0.173, 0.985, -0.003, 0.189, 0.982, 0.011, 0.173, 0.985, 0.036, -0.345, -0.938, 0.036, -0.345, -0.938, 0.036, -0.345, -0.938, 0.036, -0.345, -0.938, 0.036, -0.345, -0.938, 0.036, -0.345, -0.938, -0.869, 0.089, 0.486, -0.866, 0.084, 0.492, -0.866, 0.084, 0.492, -0.869, 0.089, 0.486, -0.864, 0.075, 0.498, -0.864, 0.075, 0.498, -0.872, 0.096, 0.480, -0.869, 0.089, 0.486, -0.872, 0.096, 0.480, 0.844, -0.260, -0.469, 0.844, -0.260, -0.469, 0.844, -0.260, -0.469, 0.844, -0.260, -0.469, 0.844, -0.260, -0.469, 0.844, -0.260, -0.469, -0.860, 0.099, -0.500, -0.895, 0.099, -0.434, -0.895, 0.099, -0.434, -0.860, 0.099, -0.500, -0.705, -0.057, -0.707, -0.705, -0.057, -0.707, -0.864, 0.124, -0.489, -0.860, 0.099, -0.500, -0.864, 0.124, -0.489, 0.844, -0.260, 0.469, 0.844, -0.260, 0.469, 0.844, -0.260, 0.469, 0.844, -0.260, 0.469, 0.844, -0.260, 0.469, 0.844, -0.260, 0.469, -0.009, 0.224, -0.975, -0.009, 0.224, -0.975, -0.018, 0.216, -0.976, -0.018, 0.216, -0.976, -0.022, 0.212, -0.977, -0.022, 0.212, -0.977, 0.036, -0.345, 0.938, 0.036, -0.345, 0.938, 0.036, -0.345, 0.938, 0.036, -0.345, 0.938, 0.036, -0.345, 0.938, 0.036, -0.345, 0.938, 0.821, 0.293, 0.489, 0.821, 0.293, 0.489, 0.827, 0.313, 0.468, 0.827, 0.313, 0.468, 0.832, 0.339, 0.438, 0.832, 0.339, 0.438, 0.803, 0.304, -0.513, 0.734, 0.340, -0.588, 0.734, 0.340, -0.588, 0.803, 0.304, -0.513, 0.771, 0.327, -0.547, 0.771, 0.327, -0.547, 0.803, 0.304, -0.513, 0.822, 0.291, -0.490, 0.822, 0.291, -0.490, -0.772, -0.430, -0.469, -0.772, -0.430, -0.469, -0.772, -0.430, -0.469, -0.772, -0.430, -0.469, -0.772, -0.430, -0.469, -0.772, -0.430, -0.469, -0.772, -0.430, 0.469, -0.772, -0.430, 0.469, -0.772, -0.430, 0.469, -0.772, -0.430, 0.469, -0.772, -0.430, 0.469, -0.772, -0.430, 0.469, 0.223, -0.952, -0.210, 0.340, -0.940, 0.000, 0.097, -0.995, -0.000, 0.340, -0.940, 0.000, 0.223, -0.952, 0.210, 0.097, -0.995, -0.000, 0.223, -0.952, 0.210, -0.022, -0.976, 0.216, 0.097, -0.995, -0.000, -0.022, -0.976, 0.216, -0.150, -0.989, 0.000, 0.097, -0.995, -0.000, -0.150, -0.989, 0.000, -0.022, -0.976, -0.216, 0.097, -0.995, -0.000, -0.022, -0.976, -0.216, 0.223, -0.952, -0.210, 0.097, -0.995, -0.000, 0.000, -0.972, 0.237, 0.000, -0.987, 0.159, 0.029, -0.971, 0.238, 0.029, -0.971, 0.238, 0.000, -0.987, 0.159, 0.215, -0.964, 0.157, -0.000, -1.000, 0.000, 0.229, -0.973, 0.000, 0.215, -0.964, 0.157, -0.000, -1.000, 0.000, 0.198, -0.974, -0.114, 0.229, -0.973, 0.000, -0.000, -1.000, 0.000, 0.114, -0.973, -0.201, 0.198, -0.974, -0.114, -0.000, -1.000, 0.000, 0.000, -0.961, -0.277, 0.114, -0.973, -0.201, 0.867, -0.000, -0.498, 0.867, 0.000, -0.498, 0.867, -0.000, -0.498, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.000, -0.000, -1.000, 0.000, -0.000, -1.000, 0.867, -0.000, -0.498, 0.867, -0.000, -0.498, 0.867, -0.000, -0.498, 0.000, -0.000, -1.000, 0.303, -0.944, 0.131, 0.338, -0.941, -0.010, 0.737, -0.517, 0.436, 0.620, -0.594, 0.512, 0.737, -0.517, 0.436, 0.373, -0.063, 0.926, 0.628, -0.685, 0.369, 0.444, -0.852, 0.277, 0.526, -0.850, 0.000, 0.628, -0.685, 0.369, 0.730, -0.683, -0.002, 0.954, -0.300, -0.001, 0.954, -0.300, -0.001, 1.000, -0.000, 0.000, 0.865, 0.000, 0.501, 0.826, -0.299, 0.478, 0.865, 0.000, 0.501, 0.551, 0.000, 0.834, 0.488, -0.335, 0.806, 0.551, 0.000, 0.834, 0.190, 0.000, 0.982, 0.444, -0.852, 0.277, 0.215, -0.964, 0.157, 0.229, -0.973, 0.000, 0.187, -0.925, 0.332, 0.029, -0.971, 0.238, 0.215, -0.964, 0.157, 0.000, -1.000, 0.000, 0.777, -0.629, 0.000, -0.000, -0.629, 0.778, 0.000, -1.000, 0.000, 0.000, -0.629, -0.778, 0.777, -0.629, 0.000, 0.924, -0.383, 0.000, 0.000, -0.383, 0.924, -0.000, -0.629, 0.778, -0.000, -0.629, 0.778, 0.777, -0.629, 0.000, 0.924, -0.383, 0.000, 0.000, -0.382, -0.924, 0.924, -0.383, 0.000, 0.777, -0.629, 0.000, 0.777, -0.629, 0.000, 0.000, -0.629, -0.778, 0.000, -0.382, -0.924, 0.706, 0.000, 0.708, 0.706, 0.000, 0.708, 1.000, -0.007, -0.014, 1.000, -0.007, -0.014, 0.000, -0.017, 1.000, 0.730, -0.012, 0.683, 0.706, -0.000, -0.708, 0.706, -0.000, -0.708, 0.000, -0.000, -1.000, 0.000, -0.000, -1.000, 1.000, -0.007, -0.014, 0.706, -0.000, -0.708, 0.620, -0.594, 0.512, 0.127, -0.593, 0.795, 0.254, -0.735, 0.628, 0.303, -0.944, 0.131, 0.254, -0.735, 0.628, 0.127, -0.878, 0.461, 0.127, -0.878, 0.461, 0.254, -0.735, 0.628, -0.000, -0.760, 0.649, 0.127, -0.593, 0.795, 0.000, -0.599, 0.801, -0.000, -0.760, 0.649, 0.254, -0.735, 0.628, 0.127, -0.593, 0.795, -0.000, -0.760, 0.649, 0.000, -0.173, 0.985, 0.000, -0.599, 0.801, 0.127, -0.593, 0.795, 0.303, -0.944, 0.131, 0.620, -0.594, 0.512, 0.254, -0.735, 0.628, 0.620, -0.594, 0.512, 0.317, -0.231, 0.920, 0.127, -0.593, 0.795, -0.000, -1.000, -0.000, -0.000, -1.000, 0.000, -0.000, -1.000, -0.000, 0.000, -1.000, 0.000, -0.000, -1.000, 0.001, 0.000, -1.000, 0.001, 0.000, -1.000, 0.001, 0.000, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, -1.000, -0.000, -0.000, -1.000, -0.000, 0.000, -1.000, 0.000, -0.000, -1.000, 0.000, 0.000, -1.000, -0.000, 0.000, -1.000, 0.000, 0.001, -1.000, 0.000, -0.000, -1.000, -0.000, -0.000, -1.000, -0.000, -0.000, -1.000, -0.000, -0.000, -1.000, -0.000, -0.000, -1.000, -0.000, -0.000, -1.000, -0.000, 0.000, -1.000, 0.000, 0.001, -1.000, 0.000, -0.000, -1.000, -0.000, -0.000, -1.000, -0.000, -0.000, -1.000, -0.000, 0.000, -1.000, 0.000, -0.000, -1.000, -0.000, 0.000, 0.998, 0.063, 0.000, 0.955, 0.297, 0.680, 0.700, 0.218, 0.680, 0.700, 0.218, 0.716, 0.697, 0.044, 0.000, 0.998, 0.063, 0.000, 0.782, 0.623, 0.711, 0.543, 0.447, 0.680, 0.700, 0.218, 0.680, 0.700, 0.218, 0.000, 0.955, 0.297, 0.000, 0.782, 0.623, 0.000, 0.782, 0.623, 0.000, 0.588, 0.809, 0.840, 0.324, 0.435, 0.840, 0.324, 0.435, 0.711, 0.543, 0.447, 0.000, 0.782, 0.623, 0.000, 0.349, 0.937, 0.706, 0.258, 0.659, 0.840, 0.324, 0.435, 0.840, 0.324, 0.435, 0.000, 0.588, 0.809, 0.000, 0.349, 0.937, 0.000, 0.079, 0.997, 0.682, 0.054, 0.729, 0.706, 0.258, 0.659, 0.706, 0.258, 0.659, 0.000, 0.349, 0.937, 0.000, 0.079, 0.997, 0.000, 0.079, 0.997, 0.000, -0.075, 0.997, 0.682, 0.054, 0.729, 0.870, -0.422, -0.254, 0.868, -0.406, -0.287, 0.981, -0.018, -0.195, 0.981, -0.018, -0.195, 0.988, -0.011, -0.153, 0.870, -0.422, -0.254, 0.988, -0.011, -0.153, 0.981, -0.018, -0.195, 0.997, -0.031, -0.070, 0.997, -0.031, -0.070, 0.998, -0.027, -0.058, 0.988, -0.011, -0.153, 0.997, -0.031, -0.070, 0.993, -0.110, -0.052, 0.993, -0.109, -0.050, 0.993, -0.109, -0.050, 0.998, -0.027, -0.058, 0.997, -0.031, -0.070, 0.973, -0.163, 0.162, 0.982, -0.190, 0.007, 0.981, -0.195, 0.000, 0.981, -0.195, 0.000, 0.861, -0.150, 0.487, 0.973, -0.163, 0.162, 0.939, -0.309, -0.151, 0.960, -0.219, -0.174, 0.957, -0.234, -0.172, -0.000, 0.005, -1.000, -0.000, 0.005, -1.000, -0.000, 0.005, -1.000, -0.000, 0.577, -0.816, -0.000, 0.577, -0.816, -0.000, 0.577, -0.816, 0.000, 0.577, -0.816, 0.000, 0.577, -0.816, 0.000, 0.577, -0.816, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, -0.000, -0.806, -0.592, -0.000, -0.806, -0.592, -0.000, -0.806, -0.592, 0.000, -0.593, 0.805, 0.000, -0.593, 0.805, 0.000, -0.593, 0.805, 0.000, -0.593, 0.805, 0.000, -0.593, 0.805, 0.000, -0.593, 0.805, 0.967, -0.229, 0.111, 0.974, -0.225, -0.002, 0.973, -0.163, 0.162, 0.967, -0.229, 0.111, 0.973, -0.163, 0.162, 0.861, -0.150, 0.487, 0.967, -0.229, 0.111, 0.861, -0.150, 0.487, 0.000, -0.003, 1.000, 0.974, -0.225, -0.002, 0.967, -0.229, 0.111, 0.948, -0.245, -0.203, 0.948, -0.245, -0.203, 0.949, -0.245, -0.201, 0.974, -0.225, -0.002, 0.949, -0.245, -0.201, 0.948, -0.245, -0.203, 0.957, -0.234, -0.172, 0.957, -0.234, -0.172, 0.960, -0.219, -0.174, 0.949, -0.245, -0.201, 0.031, -0.276, -0.961, 0.031, -0.276, -0.961, 0.031, -0.276, -0.961, 0.716, 0.697, 0.044, 0.680, 0.700, 0.218, 0.960, 0.264, 0.092, 0.960, 0.264, 0.092, 0.955, 0.297, 0.019, 0.716, 0.697, 0.044, 0.960, 0.264, 0.092, 0.680, 0.700, 0.218, 0.711, 0.543, 0.447, 0.711, 0.543, 0.447, 0.970, 0.177, 0.164, 0.960, 0.264, 0.092, 0.970, 0.177, 0.164, 0.711, 0.543, 0.447, 0.840, 0.324, 0.435, 0.840, 0.324, 0.435, 0.965, 0.170, 0.202, 0.970, 0.177, 0.164, 0.840, 0.324, 0.435, 0.706, 0.258, 0.659, 0.944, 0.130, 0.303, 0.944, 0.130, 0.303, 0.965, 0.170, 0.202, 0.840, 0.324, 0.435, 0.944, 0.130, 0.303, 0.706, 0.258, 0.659, 0.682, 0.054, 0.729, 0.682, 0.054, 0.729, 0.935, 0.025, 0.355, 0.944, 0.130, 0.303, 0.682, 0.054, 0.729, 0.000, -0.075, 0.997, 0.764, -0.053, 0.643, 0.764, -0.053, 0.643, 0.935, 0.025, 0.355, 0.682, 0.054, 0.729, 0.868, -0.406, -0.287, 0.870, -0.422, -0.254, 0.755, -0.656, 0.000, 0.755, -0.656, 0.000, 0.755, -0.656, 0.000, 0.868, -0.406, -0.287, 0.000, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, -1.000, 0.002, 0.000, -1.000, 0.002, 0.000, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, -0.000, -0.760, 0.649, 0.000, -0.885, 0.466, 0.127, -0.878, 0.461, 0.373, -0.063, 0.926, 0.000, -0.173, 0.985, 0.317, -0.231, 0.920, -0.000, -0.166, 0.986, -0.000, -0.326, 0.945, 0.119, -0.425, 0.897, 0.000, 0.000, 1.000, -0.000, -0.166, 0.986, 0.167, -0.154, 0.974, -0.000, -0.950, 0.311, 0.029, -0.971, 0.238, 0.187, -0.925, 0.332, 0.303, -0.944, 0.131, -0.000, -0.989, -0.146, 0.338, -0.941, -0.010, 0.000, -0.885, 0.466, -0.000, -0.998, 0.058, 0.127, -0.878, 0.461, 0.127, -0.878, 0.461, -0.000, -0.998, 0.058, 0.303, -0.944, 0.131, 0.000, 0.000, 1.000, 0.167, -0.154, 0.974, 0.190, 0.000, 0.982, -0.000, -0.166, 0.986, 0.119, -0.425, 0.897, 0.167, -0.154, 0.974, 0.000, -0.173, 0.985, 0.127, -0.593, 0.795, 0.317, -0.231, 0.920, -0.000, -0.989, -0.146, 0.303, -0.944, 0.131, -0.000, -0.998, 0.058, 0.029, -0.971, 0.238, -0.000, -0.950, 0.311, 0.000, -0.972, 0.237, 0.000, -0.173, 0.985, 0.373, -0.063, 0.926, 0.000, 0.073, 0.997, -0.005, -0.000, 1.000, -0.005, -0.000, 1.000, -0.005, -0.008, 1.000, -0.005, -0.008, 1.000, -0.005, -0.008, 1.000, -0.005, -0.000, 1.000, 1.000, -0.008, 0.016, 1.000, -0.014, 0.006, 1.000, -0.014, 0.006, 0.999, -0.014, 0.046, 1.000, -0.008, 0.016, 0.999, -0.014, 0.046, -0.974, -0.225, -0.002, -0.941, -0.300, -0.158, -0.948, -0.245, -0.203, -0.948, -0.245, -0.203, -0.937, -0.312, -0.161, -0.974, -0.225, -0.002, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.000, -0.806, -0.592, 0.971, -0.205, -0.123, 0.971, -0.204, -0.123, 0.981, -0.195, 0.000, 0.981, -0.195, 0.000, 0.982, -0.190, 0.007, 0.971, -0.205, -0.123, 0.971, -0.205, -0.123, 0.993, -0.109, -0.050, 0.993, -0.110, -0.052, 0.993, -0.110, -0.052, 0.971, -0.204, -0.123, 0.971, -0.205, -0.123, 0.000, -0.564, 0.825, 0.000, -0.564, 0.825, 0.000, -0.564, 0.825, 0.903, -0.359, -0.234, 0.903, -0.359, -0.234, 0.903, -0.359, -0.234, 0.927, -0.315, -0.206, 0.927, -0.315, -0.206, 0.927, -0.315, -0.206, -0.000, 0.565, -0.825, -0.000, 0.565, -0.825, -0.000, 0.565, -0.825, -0.000, 0.564, -0.825, -0.000, 0.564, -0.825, -0.000, 0.564, -0.825, 0.000, 0.942, -0.337, 0.080, 0.777, -0.624, 0.000, 0.756, -0.654, 0.976, 0.219, 0.005, 0.981, 0.193, 0.005, 0.981, 0.195, 0.005, 0.981, 0.195, 0.005, 0.981, 0.195, 0.005, 0.976, 0.219, 0.005, 0.981, 0.194, 0.005, 0.981, 0.195, 0.005, 0.981, 0.193, 0.005, 0.981, 0.193, 0.005, 0.981, 0.192, 0.006, 0.981, 0.194, 0.005, 0.179, 0.836, 0.519, -0.000, 1.000, -0.018, 0.000, 0.831, 0.557, 0.458, 0.821, 0.341, -0.000, 1.000, -0.018, 0.179, 0.836, 0.519, 0.634, 0.772, 0.046, -0.000, 1.000, -0.018, 0.458, 0.821, 0.341, 0.000, 0.942, -0.337, -0.000, 1.000, -0.018, 0.634, 0.772, 0.046, 0.634, 0.772, 0.046, 0.609, 0.759, -0.228, 0.000, 0.942, -0.337, 0.080, 0.777, -0.624, 0.000, 0.942, -0.337, 0.609, 0.759, -0.228 ]) } };  }},  \r\n			Obj0         : {get once(){return { position: { itemSize: 3, array: new Float32Array([ -4.667, -0.810, -0.090, -4.927, 1.285, -0.281, 0.489, 1.285, -0.281, 0.489, 1.285, -0.281, 0.230, -0.810, -0.090, -4.667, -0.810, -0.090, -4.667, -0.805, 0.040, -4.667, -0.810, -0.090, 0.230, -0.810, -0.090, 0.230, -0.810, -0.090, 0.230, -0.805, 0.040, -4.667, -0.805, 0.040, -4.927, 1.194, 0.239, -4.667, -0.805, 0.040, 0.230, -0.805, 0.040, 0.230, -0.805, 0.040, 0.489, 1.194, 0.239, -4.927, 1.194, 0.239, -4.927, 1.391, 0.195, -4.927, 1.194, 0.239, 0.489, 1.194, 0.239, 0.489, 1.194, 0.239, 0.489, 1.391, 0.195, -4.927, 1.391, 0.195, -4.927, 1.499, 0.025, -4.927, 1.391, 0.195, 0.489, 1.391, 0.195, 0.489, 1.391, 0.195, 0.489, 1.499, 0.025, -4.927, 1.499, 0.025, -4.927, 1.456, -0.172, -4.927, 1.499, 0.025, 0.489, 1.499, 0.025, 0.489, 1.499, 0.025, 0.489, 1.456, -0.172, -4.927, 1.456, -0.172, -4.927, 1.285, -0.281, -4.927, 1.456, -0.172, 0.489, 1.456, -0.172, 0.489, 1.456, -0.172, 0.489, 1.285, -0.281, -4.927, 1.285, -0.281, 0.489, 1.456, -0.172, 0.489, 1.499, 0.025, 0.489, 1.391, 0.195, 0.489, 1.285, -0.281, 0.489, 1.456, -0.172, 0.489, 1.391, 0.195, 0.489, 1.285, -0.281, 0.489, 1.391, 0.195, 0.489, 1.194, 0.239, 0.489, 1.285, -0.281, 0.489, 1.194, 0.239, 0.230, -0.805, 0.040, 0.489, 1.285, -0.281, 0.230, -0.805, 0.040, 0.230, -0.810, -0.090, -4.927, 1.391, 0.195, -4.927, 1.499, 0.025, -4.927, 1.456, -0.172, -4.927, 1.391, 0.195, -4.927, 1.456, -0.172, -4.927, 1.285, -0.281, -4.927, 1.194, 0.239, -4.927, 1.391, 0.195, -4.927, 1.285, -0.281, -4.667, -0.805, 0.040, -4.927, 1.194, 0.239, -4.927, 1.285, -0.281, -4.667, -0.810, -0.090, -4.667, -0.805, 0.040, -4.927, 1.285, -0.281 ]) }, normal: { itemSize: 3, array: new Float32Array([ 0.000, -0.090, -0.996, 0.000, -0.090, -0.996, 0.000, -0.090, -0.996, 0.000, -0.090, -0.996, 0.000, -0.090, -0.996, 0.000, -0.090, -0.996, -0.000, -0.999, 0.037, -0.000, -0.999, 0.037, -0.000, -0.999, 0.037, -0.000, -0.999, 0.037, -0.000, -0.999, 0.037, -0.000, -0.999, 0.037, -0.000, -0.099, 0.995, -0.000, -0.099, 0.995, -0.000, -0.099, 0.995, -0.000, -0.099, 0.995, -0.000, -0.099, 0.995, -0.000, -0.099, 0.995, 0.000, 0.574, 0.819, -0.000, 0.217, 0.976, -0.000, 0.217, 0.976, -0.000, 0.217, 0.976, 0.000, 0.574, 0.819, 0.000, 0.574, 0.819, 0.000, 0.985, 0.174, 0.000, 0.574, 0.819, 0.000, 0.574, 0.819, 0.000, 0.574, 0.819, 0.000, 0.985, 0.174, 0.000, 0.985, 0.174, 0.000, 0.819, -0.574, 0.000, 0.985, 0.174, 0.000, 0.985, 0.174, 0.000, 0.985, 0.174, 0.000, 0.819, -0.574, 0.000, 0.819, -0.574, 0.000, 0.538, -0.843, 0.000, 0.819, -0.574, 0.000, 0.819, -0.574, 0.000, 0.819, -0.574, 0.000, 0.538, -0.843, 0.000, 0.538, -0.843, 1.000, -0.000, 0.000, 1.000, -0.000, 0.000, 1.000, -0.000, 0.000, 0.998, -0.067, -0.011, 1.000, -0.000, 0.000, 1.000, -0.000, 0.000, 0.998, -0.067, -0.011, 1.000, -0.000, 0.000, 0.997, -0.074, -0.013, 0.998, -0.067, -0.011, 0.997, -0.074, -0.013, 0.992, -0.123, 0.001, 0.998, -0.067, -0.011, 0.992, -0.123, 0.001, 0.992, -0.122, 0.004, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, -1.000, 0.000, 0.000, -0.998, -0.067, -0.011, -0.997, -0.074, -0.013, -1.000, 0.000, 0.000, -0.998, -0.067, -0.011, -0.992, -0.123, 0.001, -0.997, -0.074, -0.013, -0.998, -0.067, -0.011, -0.992, -0.122, 0.004, -0.992, -0.123, 0.001, -0.998, -0.067, -0.011 ]) } }; }},\r\n			\r\n			ElevInT      : {get once(){return { position: { itemSize: 3, array: new Float32Array([ 0.095, -0.880, -0.013, 0.090, -0.880, 0.088, -4.236, -1.499, 0.153, -4.236, -1.499, 0.153, -4.230, -1.499, 0.020, 0.095, -0.880, -0.013, 0.164, 1.170, -0.346, 0.095, -0.880, -0.013, -4.230, -1.499, 0.020, -4.230, -1.499, 0.020, -4.141, 1.110, -0.453, 0.164, 1.170, -0.346 ]) }, normal: { itemSize: 3, array: new Float32Array([ 0.142, -0.990, 0.014, 0.142, -0.990, 0.014, 0.142, -0.990, 0.012, 0.142, -0.990, 0.012, 0.142, -0.990, 0.012, 0.142, -0.990, 0.014, 0.020, -0.167, -0.986, 0.016, -0.161, -0.987, 0.024, -0.174, -0.984, 0.024, -0.174, -0.984, 0.027, -0.179, -0.983, 0.020, -0.167, -0.986 ]) } }; }},\r\n			ElevInB      : {get once(){return { position: { itemSize: 3, array: new Float32Array([ 0.090, -0.880, 0.088, 0.133, 1.203, 0.343, -4.184, 1.112, 0.491, -4.184, 1.112, 0.491, -4.236, -1.499, 0.153, 0.090, -0.880, 0.088, 0.162, 1.422, 0.271, 0.169, 1.462, -0.335, -4.066, 1.476, -0.491, -4.066, 1.476, -0.491, -4.107, 1.442, 0.385, 0.162, 1.422, 0.271, -4.141, 1.110, -0.453, -4.230, -1.499, 0.020, -4.236, -1.499, 0.153, -4.236, -1.499, 0.153, -4.184, 1.112, 0.491, -4.141, 1.110, -0.453, 0.090, -0.880, 0.088, 0.095, -0.880, -0.013, 0.164, 1.170, -0.346, 0.164, 1.170, -0.346, 0.133, 1.203, 0.343, 0.090, -0.880, 0.088, -4.184, 1.112, 0.491, 0.133, 1.203, 0.343, 0.162, 1.422, 0.271, 0.162, 1.422, 0.271, -4.107, 1.442, 0.385, -4.184, 1.112, 0.491, 0.133, 1.203, 0.343, 0.164, 1.170, -0.346, 0.169, 1.462, -0.335, 0.169, 1.462, -0.335, 0.162, 1.422, 0.271, 0.133, 1.203, 0.343, 0.164, 1.170, -0.346, -4.141, 1.110, -0.453, -4.066, 1.476, -0.491, -4.066, 1.476, -0.491, 0.169, 1.462, -0.335, 0.164, 1.170, -0.346, -4.141, 1.110, -0.453, -4.184, 1.112, 0.491, -4.107, 1.442, 0.385, -4.107, 1.442, 0.385, -4.066, 1.476, -0.491, -4.141, 1.110, -0.453 ]) }, normal: { itemSize: 3, array: new Float32Array([ 0.036, -0.125, 0.992, 0.032, 0.109, 0.994, 0.032, 0.068, 0.997, 0.032, 0.068, 0.997, 0.033, -0.129, 0.991, 0.036, -0.125, 0.992, 0.001, 0.998, 0.062, 0.001, 0.998, 0.066, 0.005, 0.999, 0.041, 0.005, 0.999, 0.041, 0.006, 0.999, 0.039, 0.001, 0.998, 0.062, -0.999, 0.026, -0.046, -0.999, 0.026, -0.045, -0.999, 0.026, -0.045, -0.999, 0.026, -0.045, -0.999, 0.026, -0.046, -0.999, 0.026, -0.046, 0.999, -0.026, 0.045, 0.999, -0.026, 0.045, 0.999, -0.026, 0.045, 0.999, -0.026, 0.045, 0.999, -0.026, 0.045, 0.999, -0.026, 0.045, 0.032, 0.068, 0.997, 0.032, 0.109, 0.994, 0.026, 0.309, 0.951, 0.026, 0.309, 0.951, 0.027, 0.301, 0.953, 0.032, 0.068, 0.997, 0.995, -0.094, 0.017, 0.999, -0.019, 0.045, 0.998, -0.041, 0.037, 0.998, -0.041, 0.037, 0.992, -0.128, 0.003, 0.995, -0.094, 0.017, 0.036, 0.029, -0.999, 0.026, -0.109, -0.994, 0.027, -0.103, -0.994, 0.027, -0.103, -0.994, 0.037, 0.037, -0.999, 0.036, 0.029, -0.999, -0.979, 0.201, -0.040, -0.976, 0.215, -0.045, -0.977, 0.211, -0.044, -0.977, 0.211, -0.044, -0.980, 0.197, -0.038, -0.979, 0.201, -0.040 ]) } };}},\r\n			ElevOuT      : {get once(){return { position: { itemSize: 3, array: new Float32Array([ 4.863, -0.204, -0.086, 4.858, -0.203, 0.014, 0.192, -0.863, 0.087, 0.192, -0.863, 0.087, 0.196, -0.863, -0.015, 4.863, -0.204, -0.086, 4.843, 1.239, -0.221, 4.863, -0.204, -0.086, 0.196, -0.863, -0.015, 0.196, -0.863, -0.015, 0.264, 1.171, -0.344, 4.843, 1.239, -0.221 ]) }, normal: { itemSize: 3, array: new Float32Array([ 0.140, -0.990, 0.013, 0.140, -0.990, 0.012, 0.140, -0.990, 0.014, 0.140, -0.990, 0.014, 0.140, -0.990, 0.014, 0.140, -0.990, 0.013, 0.006, -0.111, -0.994, -0.002, -0.093, -0.996, 0.023, -0.147, -0.989, 0.023, -0.147, -0.989, 0.029, -0.160, -0.987, 0.006, -0.111, -0.994 ]) } }; }},\r\n			ElevOuB      : {get once(){return { position: { itemSize: 3, array: new Float32Array([ 4.858, -0.203, 0.014, 4.821, 1.241, 0.175, 0.233, 1.172, 0.342, 0.233, 1.172, 0.342, 0.192, -0.863, 0.087, 4.858, -0.203, 0.014, 0.268, 1.463, -0.333, 0.261, 1.421, 0.270, 4.823, 1.441, 0.150, 0.268, 1.463, -0.333, 4.823, 1.441, 0.150, 4.940, 1.447, 0.067, 0.268, 1.463, -0.333, 4.940, 1.447, 0.067, 4.948, 1.457, -0.097, 0.268, 1.463, -0.333, 4.948, 1.457, -0.097, 4.840, 1.469, -0.197, 0.264, 1.171, -0.344, 0.196, -0.863, -0.015, 0.192, -0.863, 0.087, 0.192, -0.863, 0.087, 0.233, 1.172, 0.342, 0.264, 1.171, -0.344, 4.843, 1.239, -0.221, 4.946, 1.237, -0.115, 4.863, -0.204, -0.086, 4.939, 1.238, 0.061, 4.821, 1.241, 0.175, 4.858, -0.203, 0.014, 4.946, 1.237, -0.115, 4.939, 1.238, 0.061, 4.858, -0.203, 0.014, 4.858, -0.203, 0.014, 4.863, -0.204, -0.086, 4.946, 1.237, -0.115, 0.233, 1.172, 0.342, 4.821, 1.241, 0.175, 4.823, 1.441, 0.150, 4.823, 1.441, 0.150, 0.261, 1.421, 0.270, 0.233, 1.172, 0.342, 4.821, 1.241, 0.175, 4.939, 1.238, 0.061, 4.940, 1.447, 0.067, 4.940, 1.447, 0.067, 4.823, 1.441, 0.150, 4.821, 1.241, 0.175, 4.939, 1.238, 0.061, 4.946, 1.237, -0.115, 4.948, 1.457, -0.097, 4.948, 1.457, -0.097, 4.940, 1.447, 0.067, 4.939, 1.238, 0.061, 4.946, 1.237, -0.115, 4.843, 1.239, -0.221, 4.840, 1.469, -0.197, 4.840, 1.469, -0.197, 4.948, 1.457, -0.097, 4.946, 1.237, -0.115, 4.843, 1.239, -0.221, 0.264, 1.171, -0.344, 0.268, 1.463, -0.333, 0.268, 1.463, -0.333, 4.840, 1.469, -0.197, 4.843, 1.239, -0.221, 0.264, 1.171, -0.344, 0.233, 1.172, 0.342, 0.261, 1.421, 0.270, 0.261, 1.421, 0.270, 0.268, 1.463, -0.333, 0.264, 1.171, -0.344 ]) }, normal: { itemSize: 3, array: new Float32Array([ 0.037, -0.114, 0.993, 0.036, 0.007, 0.999, 0.030, 0.066, 0.997, 0.030, 0.066, 0.997, 0.033, -0.125, 0.992, 0.037, -0.114, 0.993, -0.003, 0.998, 0.070, -0.003, 0.998, 0.069, -0.003, 0.998, 0.069, -0.003, 0.998, 0.070, -0.003, 0.998, 0.069, -0.002, 0.998, 0.062, -0.003, 0.998, 0.070, -0.002, 0.998, 0.062, -0.003, 0.997, 0.081, -0.003, 0.998, 0.070, -0.003, 0.997, 0.081, -0.005, 0.991, 0.134, -0.999, 0.026, -0.045, -0.999, 0.026, -0.045, -0.999, 0.026, -0.045, -0.999, 0.026, -0.045, -0.999, 0.026, -0.045, -0.999, 0.026, -0.045, 0.711, 0.014, -0.703, 0.928, -0.013, -0.372, 0.998, -0.058, 0.000, 0.911, -0.041, 0.410, 0.672, -0.020, 0.740, 0.994, -0.058, 0.091, 0.928, -0.013, -0.372, 0.911, -0.041, 0.410, 0.994, -0.058, 0.091, 0.994, -0.058, 0.091, 0.998, -0.058, 0.000, 0.928, -0.013, -0.372, 0.030, 0.066, 0.997, 0.036, 0.007, 0.999, 0.034, 0.128, 0.991, 0.034, 0.128, 0.991, 0.024, 0.278, 0.960, 0.030, 0.066, 0.997, 0.672, -0.020, 0.740, 0.911, -0.041, 0.410, 0.897, 0.017, 0.442, 0.897, 0.017, 0.442, 0.575, 0.092, 0.813, 0.672, -0.020, 0.740, 0.911, -0.041, 0.410, 0.928, -0.013, -0.372, 0.925, 0.026, -0.378, 0.925, 0.026, -0.378, 0.897, 0.017, 0.442, 0.911, -0.041, 0.410, 0.928, -0.013, -0.372, 0.711, 0.014, -0.703, 0.691, 0.066, -0.720, 0.691, 0.066, -0.720, 0.925, 0.026, -0.378, 0.928, -0.013, -0.372, 0.029, 0.101, -0.994, 0.026, 0.035, -0.999, 0.026, 0.037, -0.999, 0.026, 0.037, -0.999, 0.030, 0.104, -0.994, 0.029, 0.101, -0.994, -0.999, 0.034, -0.019, -0.994, 0.097, -0.045, -0.996, 0.077, -0.037, -0.996, 0.077, -0.037, -1.000, 0.012, -0.011, -0.999, 0.034, -0.019 ]) } };}},\r\n			\r\n			\r\n			\r\n			\r\n			Obj3         : {get once(){return { position: { itemSize: 3, array: new Float32Array([ -1.480, -0.789, -0.114, 0.409, -0.503, -0.111, 0.207, -0.326, -0.091, 0.207, -0.326, -0.091, -1.388, -0.567, -0.112, -1.480, -0.789, -0.114, -1.480, -0.789, -0.172, 0.409, -0.503, -0.172, 0.409, -0.503, -0.111, 0.409, -0.503, -0.111, -1.480, -0.789, -0.114, -1.480, -0.789, -0.172, -2.711, 0.890, 0.108, -1.480, -0.789, -0.114, -1.388, -0.567, -0.112, -1.388, -0.567, -0.112, -2.506, 0.958, 0.108, -2.711, 0.890, 0.108, -2.711, 0.890, -0.172, -1.480, -0.789, -0.172, -1.480, -0.789, -0.114, -1.480, -0.789, -0.114, -2.711, 0.890, 0.108, -2.711, 0.890, -0.172, -2.713, 1.239, 0.135, -2.711, 0.890, 0.108, -2.506, 0.958, 0.108, -2.506, 0.958, 0.108, -2.507, 1.034, 0.108, -2.713, 1.239, 0.135, -2.713, 1.239, -0.172, -2.711, 0.890, -0.172, -2.711, 0.890, 0.108, -2.711, 0.890, 0.108, -2.713, 1.239, 0.135, -2.713, 1.239, -0.172, 0.436, 1.238, 0.061, -2.713, 1.239, 0.135, -2.507, 1.034, 0.108, -2.507, 1.034, 0.108, 0.228, 1.033, 0.061, 0.436, 1.238, 0.061, 0.436, 1.238, -0.172, -2.713, 1.239, -0.172, -2.713, 1.239, 0.135, -2.713, 1.239, 0.135, 0.436, 1.238, 0.061, 0.436, 1.238, -0.172, 0.409, -0.503, -0.111, 0.436, 1.238, 0.061, 0.228, 1.033, 0.061, 0.228, 1.033, 0.061, 0.207, -0.326, -0.091, 0.409, -0.503, -0.111, 0.436, 1.238, 0.061, 0.409, -0.503, -0.111, 0.409, -0.503, -0.172, 0.436, 1.238, 0.061, 0.409, -0.503, -0.172, 0.431, 0.888, -0.172, 0.436, 1.238, 0.061, 0.431, 0.888, -0.172, 0.436, 1.238, -0.172, 0.517, 1.239, 0.058, 0.486, -0.499, -0.111, 0.696, -0.260, -0.086, 0.696, -0.260, -0.086, 0.718, 1.034, 0.058, 0.517, 1.239, 0.058, 0.486, -0.499, -0.111, 0.517, 1.239, 0.058, 0.517, 1.239, -0.172, 0.486, -0.499, -0.111, 0.517, 1.239, -0.172, 0.511, 0.888, -0.172, 0.486, -0.499, -0.111, 0.511, 0.888, -0.172, 0.486, -0.499, -0.172, 3.914, 1.240, -0.014, 0.517, 1.239, 0.058, 0.718, 1.034, 0.058, 0.718, 1.034, 0.058, 3.668, 1.033, -0.014, 3.914, 1.240, -0.014, 3.914, 1.240, -0.172, 0.517, 1.239, -0.172, 0.517, 1.239, 0.058, 0.517, 1.239, 0.058, 3.914, 1.240, -0.014, 3.914, 1.240, -0.172, 3.921, 0.906, -0.028, 3.914, 1.240, -0.014, 3.668, 1.033, -0.014, 3.668, 1.033, -0.014, 3.671, 0.900, -0.028, 3.921, 0.906, -0.028, 3.921, 0.906, -0.172, 3.914, 1.240, -0.172, 3.914, 1.240, -0.014, 3.914, 1.240, -0.014, 3.921, 0.906, -0.028, 3.921, 0.906, -0.172, 4.507, 0.109, -0.107, 3.921, 0.906, -0.028, 3.671, 0.900, -0.028, 3.671, 0.900, -0.028, 4.140, 0.262, -0.107, 4.507, 0.109, -0.107, 4.507, 0.109, -0.172, 3.921, 0.906, -0.172, 3.921, 0.906, -0.028, 3.921, 0.906, -0.028, 4.507, 0.109, -0.107, 4.507, 0.109, -0.172, 0.486, -0.499, -0.111, 4.507, 0.109, -0.107, 4.140, 0.262, -0.107, 4.140, 0.262, -0.107, 0.696, -0.260, -0.086, 0.486, -0.499, -0.111, 0.486, -0.499, -0.172, 4.507, 0.109, -0.172, 4.507, 0.109, -0.107, 4.507, 0.109, -0.107, 0.486, -0.499, -0.111, 0.486, -0.499, -0.172, 0.517, 1.239, -0.172, 3.914, 1.240, -0.172, 3.921, 0.906, -0.172, 3.921, 0.906, -0.172, 0.511, 0.888, -0.172, 0.517, 1.239, -0.172, -2.713, 1.239, -0.172, 0.436, 1.238, -0.172, 0.431, 0.888, -0.172, 0.431, 0.888, -0.172, -2.711, 0.890, -0.172, -2.713, 1.239, -0.172 ]) }, normal: { itemSize: 3, array: new Float32Array([ 0.049, -0.033, 0.998, 0.016, -0.104, 0.994, 0.008, -0.103, 0.995, 0.008, -0.103, 0.995, 0.045, -0.029, 0.999, 0.049, -0.033, 0.998, 0.149, -0.989, -0.000, 0.149, -0.989, 0.000, 0.149, -0.989, 0.000, 0.149, -0.989, 0.000, 0.149, -0.989, -0.000, 0.149, -0.989, -0.000, 0.035, -0.093, 0.995, 0.049, -0.033, 0.998, 0.045, -0.029, 0.999, 0.045, -0.029, 0.999, 0.049, -0.083, 0.995, 0.035, -0.093, 0.995, -0.949, -0.314, -0.000, -0.806, -0.591, -0.000, -0.806, -0.591, -0.000, -0.806, -0.591, -0.000, -0.955, -0.296, 0.000, -0.949, -0.314, -0.000, 0.035, -0.084, 0.996, 0.035, -0.093, 0.995, 0.049, -0.083, 0.995, 0.049, -0.083, 0.995, 0.077, -0.052, 0.996, 0.035, -0.084, 0.996, -1.000, -0.007, -0.000, -0.949, -0.314, -0.000, -0.955, -0.296, 0.000, -0.955, -0.296, 0.000, -1.000, -0.007, -0.000, -1.000, -0.007, -0.000, 0.058, -0.063, 0.996, 0.035, -0.084, 0.996, 0.077, -0.052, 0.996, 0.077, -0.052, 0.996, 0.055, -0.059, 0.997, 0.058, -0.063, 0.996, 0.000, 1.000, -0.000, 0.000, 1.000, 0.000, 0.000, 1.000, -0.000, 0.000, 1.000, -0.000, 0.000, 1.000, -0.000, 0.000, 1.000, -0.000, 0.016, -0.104, 0.994, 0.058, -0.063, 0.996, 0.055, -0.059, 0.997, 0.055, -0.059, 0.997, 0.008, -0.103, 0.995, 0.016, -0.104, 0.994, 1.000, -0.016, 0.000, 1.000, -0.016, 0.000, 1.000, -0.016, 0.000, 1.000, -0.016, 0.000, 1.000, -0.016, 0.000, 1.000, -0.016, 0.000, 1.000, -0.016, 0.000, 1.000, -0.016, 0.000, 1.000, -0.016, 0.000, -0.036, -0.043, 0.998, 0.006, -0.107, 0.994, 0.004, -0.113, 0.994, 0.004, -0.113, 0.994, -0.044, -0.044, 0.998, -0.036, -0.043, 0.998, -1.000, 0.017, -0.000, -1.000, 0.017, -0.000, -1.000, 0.017, -0.000, -1.000, 0.017, -0.000, -1.000, 0.017, -0.000, -1.000, 0.017, 0.000, -1.000, 0.017, -0.000, -1.000, 0.017, 0.000, -1.000, 0.017, -0.000, 0.030, -0.033, 0.999, -0.036, -0.043, 0.998, -0.044, -0.044, 0.998, -0.044, -0.044, 0.998, 0.022, -0.049, 0.999, 0.030, -0.033, 0.999, -0.000, 1.000, -0.000, -0.000, 1.000, -0.000, -0.000, 1.000, -0.000, -0.000, 1.000, -0.000, -0.000, 1.000, -0.000, -0.000, 1.000, -0.000, 0.011, -0.081, 0.997, 0.030, -0.033, 0.999, 0.022, -0.049, 0.999, 0.022, -0.049, 0.999, -0.003, -0.106, 0.994, 0.011, -0.081, 0.997, 0.947, 0.322, -0.000, 1.000, 0.020, -0.000, 1.000, 0.020, -0.000, 1.000, 0.020, -0.000, 0.951, 0.310, -0.000, 0.947, 0.322, -0.000, -0.025, -0.076, 0.997, 0.011, -0.081, 0.997, -0.003, -0.106, 0.994, -0.003, -0.106, 0.994, -0.036, -0.090, 0.995, -0.025, -0.076, 0.997, 0.805, 0.593, 0.000, 0.947, 0.322, -0.000, 0.951, 0.310, -0.000, 0.951, 0.310, -0.000, 0.805, 0.593, 0.000, 0.805, 0.593, 0.000, 0.006, -0.107, 0.994, -0.025, -0.076, 0.997, -0.036, -0.090, 0.995, -0.036, -0.090, 0.995, 0.004, -0.113, 0.994, 0.006, -0.107, 0.994, 0.150, -0.989, 0.000, 0.150, -0.989, -0.000, 0.150, -0.989, -0.000, 0.150, -0.989, -0.000, 0.150, -0.989, 0.000, 0.150, -0.989, 0.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000 ]) } }; }},\r\n			Obj4         : {get once(){return { position: { itemSize: 3, array: new Float32Array([ 0.511, 0.889, -0.172, 3.921, 0.906, -0.172, 4.507, 0.109, -0.172, 4.507, 0.109, -0.172, 0.487, -0.499, -0.172, 0.511, 0.889, -0.172, 0.409, -0.503, -0.172, -1.480, -0.789, -0.172, -2.711, 0.890, -0.172, -2.711, 0.890, -0.172, 0.430, 0.888, -0.172, 0.409, -0.503, -0.172, 0.696, -0.260, -0.086, 4.140, 0.262, -0.107, 3.671, 0.900, -0.028, 0.696, -0.260, -0.086, 3.671, 0.900, -0.028, 3.668, 1.033, -0.014, 0.696, -0.260, -0.086, 3.668, 1.033, -0.014, 0.718, 1.034, 0.058, 0.207, -0.326, -0.091, 0.228, 1.033, 0.061, -2.507, 1.034, 0.108, 0.207, -0.326, -0.091, -2.507, 1.034, 0.108, -2.506, 0.958, 0.108, 0.207, -0.326, -0.091, -2.506, 0.958, 0.108, -1.388, -0.567, -0.112 ]) }, normal: { itemSize: 3, array: new Float32Array([ -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, 0.000, -1.000, -0.000, -0.000, -1.000, -0.000, -0.000, -1.000, -0.000, -0.000, -1.000, -0.000, -0.000, -1.000, -0.000, -0.000, -1.000, -0.000, -0.000, -1.000, 0.024, -0.110, 0.994, 0.022, -0.106, 0.994, 0.021, -0.104, 0.994, 0.024, -0.110, 0.994, 0.021, -0.104, 0.994, 0.021, -0.104, 0.994, 0.024, -0.110, 0.994, 0.021, -0.104, 0.994, 0.024, -0.110, 0.994, 0.015, -0.119, 0.993, 0.017, -0.111, 0.994, 0.057, -0.033, 0.998, 0.015, -0.119, 0.993, 0.057, -0.033, 0.998, 0.060, -0.027, 0.998, 0.015, -0.119, 0.993, 0.060, -0.027, 0.998, 0.008, -0.137, 0.991 ]) } };}},\r\n\r\n			CreateShape : function(iBuffGeomAA, iIsBackSide, iPosFixV$Vector3, iRotFixE$Euler, iScaFixV$Vector3, iColor, iName, oMesh)\r\n			 {\r\n				var oMesh = new Mesh();\r\n				{\r\n					if(iName)               oMesh.name       = iName;\r\n					if(iPosFixV)            oMesh.position   . copy(iPosFixV);\r\n					//if(iRotFixE)            oMesh.quaternion = new Quaternion().setFromEuler(iRotFixE.clone());\r\n					if(iRotFixE)            oMesh.quaternion . setFromEuler(iRotFixE);\r\n					if(iScaFixV)            oMesh.scale      . copy(iScaFixV);\r\n					if(iColor == undefined) iColor = 0xaaaaaa;\r\n\r\n					//var _EmisC = new Color(iColor).multiplyScalar(1);//.getHex();\r\n\r\n					//var _Mat  = new MeshBasicMaterial({color : iColor != undefined ? iColor : 0xaaaaaa, specular : 0x555555,  shininess : 30, side : iIsBackSide ? BackSide : FrontSide})\r\n					//~~var _Mat  = new MeshPhongMaterial({color : iColor != undefined ? iColor : 0xaaaaaa, specular : 0x555555,  shininess : 30, emissive : new Color(iColor).multiplyScalar(0.75).getHex(), side : iIsBackSide ? BackSide : FrontSide});\r\n					//var _Mat  = new MeshPhongMaterial({color : iColor != undefined ? iColor : 0xaaaaaa, specular : 0x555555,  shininess : 30, emissive : new Color(iColor).multiplyScalar(0.75).getHex(), side : iIsBackSide ? BackSide : FrontSide});\r\n					var _Mat  = new MeshLambertMaterial({color : iColor != undefined ? iColor : 0xaaaaaa, specular : 0x555555,  shininess : 30, emissive : new Color(iColor).multiplyScalar(0.75).getHex(), side : iIsBackSide ? BackSide : FrontSide});\r\n					//var _Mat  = new MeshLambertMaterial({color : iColor != undefined ? iColor : 0xaaaaaa, specular : 0x666666, shininess : 20,   wireframe : true, side : iIsBackSide ? BackSide : FrontSide})\r\n					//var _Mat  = new MeshBasicMaterial({color : iColor != undefined ? iColor : 0xaaaaaa, specular : 0x666666, shininess : 20,   wireframe : true, side : iIsBackSide ? BackSide : FrontSide})\r\n					var _Geom = new BufferGeometry();\r\n					{\r\n						_Geom.attributes = iBuffGeomAA;\r\n						_Geom = _Geom.clone();\r\n\r\n						if(iIsBackSide) for(var _NN = _Geom.attributes.normal.array, Ni = 0; Ni < _NN.length; Ni++)\r\n						{\r\n							_NN[Ni] = -_NN[Ni];\r\n						}\r\n						//_Geom.\r\n					}\r\n					oMesh.geometry = _Geom;\r\n					oMesh.material = _Mat;\r\n				}\r\n				return oMesh;\r\n			 },\r\n			\r\n		 },\r\n		BuranElements :\r\n		 {\r\n			CreateSurface     : function(iName, iSpan, ixCh, iyCh, iIsFlap, iColor, oObj)\r\n			 {\r\n				if(iColor == undefined) iColor = 0xffff00;\r\n				if(iName  == undefined) iName  = \"\";\r\n				\r\n				if(ixCh   == undefined) ixCh = 1;\r\n				if(iyCh   == undefined) iyCh = ixCh;\r\n\r\n				\r\n				var _Y1 = ixCh;\r\n\r\n				return Drafting.Line\r\n				(\r\n					iName, iColor, 3, LineStrip,\r\n					(\r\n						iIsFlap ?\r\n						[\r\n							//0,  0, +1 * ((ixCh + iyCh) / 2),\r\n							//0,  0,  0,\r\n							//0, +1 * ((ixCh + iyCh) / 2),  0,\r\n							//0, +0.1, 0,\r\n\r\n							-1, +0.1,        0,\r\n							-1, -0.9 * ixCh, 0,\r\n							+1, -0.9 * iyCh, 0,\r\n							+1, +0.1 * iyCh, 0,\r\n							 //0, +0.1 * ixCh, 0,\r\n						]\r\n						:\r\n						[\r\n							//-1, +0.4 * ixCh,  0.0,\r\n							//-1,  0.0 * ixCh, +0.5,\r\n							//-1, -0.6 * ixCh,  0.0,\r\n							//-1,  0.0 * ixCh, -0.5,\r\n							//-1, +0.4 * ixCh,  0.0,\r\n\r\n							//+1, +0.4 * iyCh,  0.0,\r\n							//+1,  0.0 * iyCh, +0.5,\r\n							//+1, -0.6 * iyCh,  0.0,\r\n							//+1,  0.0 * iyCh, -0.5,\r\n							//+1, +0.4 * iyCh,  0.0,\r\n\r\n\r\n						]\r\n					),\r\n					null,\r\n					null,\r\n					new Vector3(iSpan / 2, 1, 1)\r\n				);\r\n			 },\r\n			//CreateSurface     : function(iName, iSpan, ixChord, iyChord, iIsFlap, iColor, oObj)\r\n			 //{\r\n				//if(iColor == undefined) iColor = 0xffff00;\r\n				//if(iName  == undefined) iName  = \"\";\r\n				\r\n				//if(ixChord == undefined) ixChord = 1;\r\n				//if(iyChord == undefined) iyChord = ixChord;\r\n\r\n\r\n\r\n				//oObj = new Object3D();\r\n				//{\r\n					//oObj.name = iName;\r\n					////new Mesh(, ),\r\n					//var _SfcO = new Line(new Geometry(), new LineBasicMaterial({color : iColor}));\r\n					//{\r\n						//var _VV =\r\n						//(\r\n							//iIsFlap\r\n							//? [[+0.1, +0.5], [-0.9,  0.0], [+0.1, -0.5], [+0.1, +0.5]]\r\n							//: [[+0.4,  0.0], [ 0.0, +0.5], [-0.6,  0.0], [ 0.0, -0.5], [+0.4,  0.0]]\r\n						//);\r\n\r\n\r\n						//for(var _StepCount = Clamp(iSpan / Abs(ixChord - iyChord) * 10, 2, 2), cStep = 0, cX; cX = (-iSpan / 2) + (iSpan * cStep), cStep <= 1; cStep += 1 / _StepCount)\r\n						//{\r\n							//var cScaY = (ixChord * (1 - cStep)) + (iyChord * cStep);\r\n							//var cScaZ = cScaY / 5;\r\n\r\n							//for(var cV,Vi = 0; cV = _VV[Vi]; Vi++)\r\n							//{\r\n								//_SfcO.geometry.vertices.Push(new Vector3(cX, cV[0] * cScaY, cV[1] * cScaZ));\r\n							//}\r\n						//}\r\n						////var _ScaX = iChord, _ScaY = iChord / 5, _VV =\r\n						////[\r\n							////[-0.3,  0.0],\r\n							////[ 0.0, +0.5],\r\n							////[+0.7,  0.0],\r\n							////[ 0.0, -0.5],\r\n							////[-0.3,  0.0],\r\n						////];\r\n						////for(var cZ = -iSpan / 2; cZ <= iSpan / 2; cZ += iSpan / 10) for(var cV,Vi = 0; cV = _VV[Vi]; Vi++)\r\n						////{\r\n							////_SfcO.geometry.vertices.Push(new Vector3(cV[0] * _ScaX, cV[1] * _ScaY, cZ));\r\n						////}\r\n					//}\r\n					//var _CntO = new Line(new Geometry(), new LineBasicMaterial({color : iColor}));\r\n					//{\r\n						//var _VV = _CntO.geometry.vertices;\r\n						//{\r\n							////_VV.Push(new Vector3(0,0,0));\r\n							////_VV.Push(new Vector3(0,Avg(iSpan, ixChord, iyChord) / 3,0));\r\n\r\n							////_VV.Push(new Vector3(0,0,0));\r\n							////_VV.Push(new Vector3(0,0,Avg(iSpan, ixChord, iyChord) / 3));\r\n\r\n							//_VV.Push(new Vector3(0,0,0));\r\n							//_VV.Push(new Vector3(0,Avg(iSpan, ixChord, iyChord) / 3,0));\r\n\r\n							//_VV.Push(new Vector3(0,0,0));\r\n							//_VV.Push(new Vector3(0,0,Avg(iSpan, ixChord, iyChord) / 3));\r\n						//}\r\n					//}\r\n					////var _AxsO = new Mesh(new CubeGeometry(iSpan,0.2,0.2), new MeshBasicMaterial({color : iColor}));\r\n\r\n					//oObj.add(_CntO);\r\n					////oObj.add(_AxsO);\r\n					//oObj.add(_SfcO);\r\n				//}\r\n				//return oObj;\r\n			 //},\r\n			CreateLandingGear : function(iName, iWheelRad, iIsSteering, oObj)\r\n			 {\r\n				return new Drafting.Line\r\n				(\r\n					iName, 0xffff00, 3, LineStrip, iIsSteering\r\n\r\n					? [0,-1,+1, 0,0,0, 0,+1,+1, 0,+3,+1]\r\n					: [0,-1,+1, 0,0,0, 0,+1,+1]\r\n				);\r\n			 },\r\n\r\n			//CreateLandingGear : function(iWheelRad, iName, oObj)\r\n			 //{\r\n				////if(iColor == undefined) iColor = 0xffff00;\r\n				//if(iName == undefined) iName  = \"\";\r\n\r\n\r\n				//oObj = new Object3D();\r\n				//{\r\n					//oObj.name = iName;\r\n					////new Mesh(, ),\r\n					////var _AxsO = new Mesh(new CubeGeometry(iSpan,0.2,0.2), new MeshBasicMaterial({color : iColor}));\r\n					//var _WheelL = new Line(new CylinderGeometry(iWheelRad, iWheelRad, iWheelRad *.7), new LineBasicMaterial({color : 0xffff00}));\r\n					//var _WheelR = new Line(new CylinderGeometry(iWheelRad, iWheelRad, iWheelRad *.7), new LineBasicMaterial({color : 0xffff00}));\r\n					//{\r\n						//_WheelL.position.z += iWheelRad;\r\n						//_WheelL.position.x -= iWheelRad *.7;\r\n						//_WheelL.rotateZ(D090);\r\n\r\n						//_WheelR.position.z += iWheelRad;\r\n						//_WheelR.position.x += iWheelRad *.7;\r\n						//_WheelR.rotateZ(D090);\r\n					//}\r\n\r\n					//oObj.add(_WheelL);\r\n					//oObj.add(_WheelR);\r\n				//}\r\n				//return oObj;\r\n			 //}\r\n		 },\r\n		CreateBuran : function(oObj)\r\n		 {\r\n			var oObj = new Object3D();\r\n			{\r\n				if(gApp.Renderer.IsWebGL)\r\n				{\r\n					Body : \r\n					{\r\n						var _BodyOffsV = new Vector3(0,+2.1,+3.6);\r\n						\r\n						oObj.add(BuranGeometry.CreateShape(BuranGeometry.Top,          false, _BodyOffsV, null, null, 0xffffff, \"Top\"));\r\n						oObj.add(BuranGeometry.CreateShape(BuranGeometry.Bottom,       false, _BodyOffsV, null, null, 0x333333, \"Bottom\"));\r\n						oObj.add(BuranGeometry.CreateShape(BuranGeometry.LandingGears, false, _BodyOffsV, null, null, 0x333333, \"LandingGears\"));\r\n					}\r\n					Surfaces : \r\n					{\r\n						var _ElevLS = new Vector3(+0.97,1,1.1);\r\n						var _ElevRS = new Vector3(-0.97,1,1.1);\r\n						//~~var _ElInLP = new Vector3(-2.1,-1.5,0);\r\n						//~~var _ElOuLP = new Vector3(+2.5,-1.5,0);\r\n\r\n						var _ElInLP = new Vector3(-2.05,-1.45,0.20);\r\n						var _ElOuLP = new Vector3(+2.50,-1.45,0.17);\r\n						\r\n						var _ElInRP = new Vector3(+2.05,-1.45,0.20);\r\n						var _ElOuRP = new Vector3(-2.50,-1.45,0.17);\r\n\r\n						var _ElevLR = new Euler(0,D180,0);\r\n						var _ElevRR = new Euler(0,D180,0);\r\n\r\n						//var _ElevLR  = new Euler(0,D180,0, \"XYZ\");\r\n						\r\n\r\n\r\n						//var _ElevRP = _ElevLP.clone();//_ElevLP.clone().setX(-_ElevLP.x);\r\n						//var _ElevRR = _ElevLR.clone();\r\n\r\n						var _RuddLP = new Vector3(-0.65,-1.0, 0.15);\r\n						var _RuddLR = new Euler(0,0,0, \"XYZ\");\r\n						var _RuddRP = _RuddLP.clone();\r\n						var _RuddRR = _RuddLR.clone();\r\n\r\n						var _BoFlaP = new Vector3(+2.2,-1.3,0);\r\n						var _BoFlaR = new Euler(0,0,0, \"XYZ\");\r\n\r\n						//var _ElevonL = new Object3D();\r\n						//{\r\n							//_ElevonL.name = \"ElevonL\";\r\n							////_ElevonL.position = new Vector3(0,0,0);\r\n\r\n							//_ElevonL.add(BuranGeometry.CreateShape(BuranGeometry.Obj2, false, _ElevLP, _ElevLR, 0xffffff));\r\n							//_ElevonL.add(BuranGeometry.CreateShape(BuranGeometry.Obj1, false, _ElevLP, _ElevLR, 0x333333));\r\n							////_ElevonL.rotateY(1);\r\n						//}\r\n						//var _ElevonR = new Object3D();\r\n						//{\r\n							//_ElevonR.name = \"ElevonR\";\r\n							//_ElevonR.scale = new Vector3(-1,1,1);\r\n\r\n							//_ElevonR.add(BuranGeometry.CreateShape(BuranGeometry.Obj2, true, _ElevRP, _ElevRR,  0xffffff));\r\n							//_ElevonR.add(BuranGeometry.CreateShape(BuranGeometry.Obj1, true, _ElevRP, _ElevRR,  0x333333));\r\n						//}\r\n						var _ElevInL = new Object3D();\r\n						{\r\n							_ElevInL.name = \"ElevInL\";\r\n							//_ElevonL.position = new Vector3(0,0,0);\r\n\r\n							_ElevInL.add(BuranGeometry.CreateShape(BuranGeometry.ElevInT, false, _ElInLP, _ElevLR, _ElevLS, 0xffffff));\r\n							_ElevInL.add(BuranGeometry.CreateShape(BuranGeometry.ElevInB, false, _ElInLP, _ElevLR, _ElevLS, 0x333333));\r\n							//_ElevonL.rotateY(1);\r\n						}\r\n						var _ElevOuL = new Object3D();\r\n						{\r\n							_ElevOuL.name = \"ElevOuL\";\r\n							//_ElevonL.position = new Vector3(0,0,0);\r\n\r\n							_ElevOuL.add(BuranGeometry.CreateShape(BuranGeometry.ElevOuT, false, _ElOuLP, _ElevLR, _ElevLS, 0xffffff));\r\n							_ElevOuL.add(BuranGeometry.CreateShape(BuranGeometry.ElevOuB, false, _ElOuLP, _ElevLR, _ElevLS, 0x333333));\r\n							//_ElevonL.rotateY(1);\r\n						}\r\n						var _ElevInR = new Object3D();\r\n						{\r\n							_ElevInR.name = \"ElevInR\";\r\n							//_ElevonL.position = new Vector3(0,0,0);\r\n\r\n							_ElevInR.add(BuranGeometry.CreateShape(BuranGeometry.ElevInT, true, _ElInRP, _ElevRR, _ElevRS, 0xffffff));\r\n							_ElevInR.add(BuranGeometry.CreateShape(BuranGeometry.ElevInB, true, _ElInRP, _ElevRR, _ElevRS, 0x333333));\r\n							//_ElevonL.rotateY(1);\r\n						}\r\n						var _ElevOuR = new Object3D();\r\n						{\r\n							_ElevOuR.name = \"ElevOuR\";\r\n							//_ElevonL.position = new Vector3(0,0,0);\r\n							\r\n							_ElevOuR.add(BuranGeometry.CreateShape(BuranGeometry.ElevOuT, true, _ElOuRP, _ElevRR, _ElevRS, 0xffffff));\r\n							_ElevOuR.add(BuranGeometry.CreateShape(BuranGeometry.ElevOuB, true, _ElOuRP, _ElevRR, _ElevRS, 0x333333));\r\n							//_ElevonL.rotateY(1);\r\n						}\r\n\r\n\r\n						var _RudderL = new Object3D();\r\n						{\r\n							_RudderL.name = \"RudderL\";\r\n\r\n							_RudderL.add(BuranGeometry.CreateShape(BuranGeometry.Obj4, false, _RuddLP, _RuddLR, null, 0xffffff));\r\n							_RudderL.add(BuranGeometry.CreateShape(BuranGeometry.Obj3, false, _RuddLP, _RuddLR, null, 0x333333));\r\n						}\r\n						var _RudderR = new Object3D();\r\n						{\r\n							_RudderR.name  = \"RudderR\";\r\n							_RudderR.scale . set(1,1,-1);\r\n\r\n							_RudderR.add(BuranGeometry.CreateShape(BuranGeometry.Obj4, true, _RuddRP, _RuddRR, null,  0xffffff));\r\n							_RudderR.add(BuranGeometry.CreateShape(BuranGeometry.Obj3, true, _RuddRP, _RuddRR, null,  0x333333));\r\n						}\r\n						var _BodyFlap = new Object3D();\r\n						{\r\n							_BodyFlap.name  = \"BodyFlap\";\r\n							_BodyFlap.scale . set(1,1,-1);\r\n\r\n							_BodyFlap.add(BuranGeometry.CreateShape(BuranGeometry.Obj0, true, _BoFlaP, _BoFlaR, null, 0x333333));\r\n							//_BodyFlap.add(BuranGeometry.CreateShape(BuranGeometry.Obj3, true, _RuddRP, _RuddRR,  0x333333));\r\n						}\r\n						\r\n						//oObj.add(_ElevonL);\r\n						//oObj.add(_ElevonR);\r\n\r\n						oObj.add(_ElevInL);\r\n						oObj.add(_ElevOuL);\r\n						oObj.add(_ElevInR);\r\n						oObj.add(_ElevOuR);\r\n\r\n						oObj.add(_RudderL);\r\n						oObj.add(_RudderR);\r\n						oObj.add(_BodyFlap);\r\n					}\r\n				}\r\n				else\r\n				{\r\n					//~~oObj.add(Drafting.Object(\"\", \"Box\", 0xaaaaaa, new Vector3(0,+2.1,+3.6), null, new Vector3(23.9 / 2, 36.4 / 2,16.3 / 2)));\r\n					oObj.add\r\n					(\r\n						Drafting.Line\r\n						(\r\n							\"\", 0xffffff, 2, LineStrip,\r\n							[\r\n								  0,  +5,    -2, \r\n								-12,  -6,    -1,\r\n								+12,  -6,    -1,\r\n								  0,  +5,    -2, \r\n								  0, +19,    -1,\r\n								  0, +20,    -0.5, \r\n								  0, +14,    +4, \r\n								  0,  -5,    +4, \r\n								  0, -13,   +11.5, \r\n								  0, -14.5, +11.5, \r\n\r\n								  0,  -8.5,  +4, \r\n								 -2,  -8.5,   0, \r\n								 +2,  -8.5,   0, \r\n								  0,  -8.5,  +4, \r\n							]\r\n						)\r\n					);\r\n\r\n					oObj.add(Drafting.Object(\"\", \"Cross3D\", 0xffffff, 2, new Vector3(0,+1,0)));\r\n\r\n\r\n\r\n\r\n					oObj.add(BuranElements.CreateSurface(\"RudderL\",  6.5,   2,   1,  true, 0x00ffff));\r\n					oObj.add(BuranElements.CreateSurface(\"RudderR\",  6.5,   2,   1,  true, 0x00ffff));\r\n					//oObj.add(BuranElements.CreateSurface(\"ElevonL\",  8.5, 1.4, 2.8,  true, 0x00ff00));\r\n					//oObj.add(BuranElements.CreateSurface(\"ElevonR\",  8.5, 2.8, 1.4,  true, 0x00ff00));\r\n					\r\n					oObj.add(BuranElements.CreateSurface(\"ElevInL\",  4.3, 2.0, 2.6,  true, 0x00ff00));\r\n					oObj.add(BuranElements.CreateSurface(\"ElevOuL\",  4.5, 1.5, 2.0,  true, 0x00ff00));\r\n\r\n					oObj.add(BuranElements.CreateSurface(\"ElevInR\",  4.3, 2.6, 2.0,  true, 0x00ff00));\r\n					oObj.add(BuranElements.CreateSurface(\"ElevOuR\",  4.5, 2.0, 1.5,  true, 0x00ff00));\r\n\r\n\r\n					//oObj.add(BuranElements.CreateSurface(8.5, 2.8, 1.4,  true, 0x00aa00, \"ElevonL\"));\r\n					//oObj.add(BuranElements.CreateSurface(8.5, 1.4, 2.8,  true, 0x00aa00, \"ElevonR\"));\r\n					oObj.add(BuranElements.CreateSurface(\"BodyFlap\", 5.0,   2,   2,  true, 0xffff00));\r\n\r\n					oObj.add(BuranElements.CreateLandingGear(\"NoseGear\",  0.45, true));\r\n					oObj.add(BuranElements.CreateLandingGear(\"MainGearL\", 0.65));\r\n					oObj.add(BuranElements.CreateLandingGear(\"MainGearR\", 0.65));\r\n				}\r\n			}\r\n			return oObj;\r\n		 },\r\n	 }\r\n});\r\n\r\n\r\n\r\n\r\n",
	"../UVS/Imaging/FogLayer.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'Math',\r\n	],\r\n	\r\n	'UVS.Imaging' : \r\n	 {\r\n		'FogLayer' :\r\n		 {\r\n			Canvas  : obj,\r\n			Context : obj,\r\n\r\n			constructor : function(iAA)\r\n			 {\r\n				this.Canvas = document.createElement(\"canvas\");\r\n				{\r\n					this.Canvas.id = \"FOG\";\r\n					document.body.appendChild(this.Canvas);\r\n				}\r\n				this.Context = this.Canvas.getContext(\"2d\");\r\n\r\n				window.addEventListener(\"resize\", this.UpdateSize.Bind(this));\r\n				this.UpdateSize();\r\n			 },\r\n			UpdateSize : function()\r\n			 {\r\n				this.Canvas.width  = window.innerWidth;\r\n				this.Canvas.height = window.innerHeight;\r\n\r\n				this.Canvas.style.width  = this.Canvas.width  + \"px\";\r\n				this.Canvas.style.height = this.Canvas.height + \"px\";\r\n				\r\n				this.Context.UpdateSize();\r\n				\r\n\r\n				//this.Render();\r\n			 },\r\n\r\n			Render     : function()\r\n			 {\r\n				var _Aspect = this.Context.W / this.Context.H;\r\n				var _HdgA,_PitA,_BnkA, _EulerA = Geometry.EulerAngles.FromQuaternion(gSIM.Vehicle.Rotation, \"ZXY\");\r\n				{\r\n					_HdgA   = (D360 - _EulerA.Z) % D360;\r\n					_PitA   = _EulerA.X;\r\n					_BnkA   = _EulerA.Y;\r\n				}\r\n				\r\n\r\n				var _Ctx = this.Context;\r\n				{\r\n					_Ctx.ResetTransform();\r\n					_Ctx.Scale(this.Context.W, this.Context.W); //~~ 900x300 -> 900x900 -> 1x1;\r\n					_Ctx.Translate(1 / 2, (1 / _Aspect) / 2);\r\n\r\n					\r\n\r\n\r\n					_Ctx.Rotate    (-_BnkA);\r\n					//_Ctx.Translate (0, (_PitA / D090) / _Aspect);\r\n					_Ctx.Translate (0, (_PitA / D090));\r\n				}\r\n\r\n				\r\n				//_Ctx.ResetTransform();\r\n				//_Ctx.ZoomIn();\r\n					FogLayer.Drawing.DrawBackground(_Ctx);\r\n				//_Ctx.ZoomOut();\r\n				_Ctx.StrokeStyle = \"#ff6600\";\r\n				_Ctx.LineWidth   = 0.005;\r\n				_Ctx.GlobalAlpha = 1;\r\n				//_Ctx.StrokeRect(-0.1,-0.1, 0.2, 0.2);\r\n				\r\n				if(0)\r\n				{\r\n					_Ctx.StrokeRect(-0.5,-0.5,   1,   1);\r\n					_Ctx.BeginPath();\r\n					{\r\n						_Ctx.MoveTo(-0.5,-0.5);\r\n						_Ctx.LineTo(+0.5,+0.5);\r\n\r\n						_Ctx.MoveTo(-0.5,+0.5);\r\n						_Ctx.LineTo(+0.5,-0.5);\r\n\r\n						_Ctx.Stroke();\r\n					}\r\n				}\r\n			 },\r\n\r\n			static : \r\n			{\r\n				Drawing : \r\n				{\r\n					DrawBackground : function(iCtx)\r\n					 {\r\n						iCtx.FillStyle = \"#ff0000\";\r\n\r\n						var _Gradient = iCtx.CreateLinearGradient(0, -0.5, 0, 0.5);\r\n						{\r\n							//_Gradient.AddColorStop(0, (iFrame.Parent && iFrame.Parent.BackColor.AsString) || \"#ffffff\");\r\n							_Gradient.AddColorStop(0.0, \"#00ccff\");\r\n							_Gradient.AddColorStop(0.4, \"#00ccff\");\r\n							_Gradient.AddColorStop(0.5,  \"#ffffff\");\r\n							_Gradient.AddColorStop(0.6, \"#ffaa00\");\r\n							//_Gradient.AddColorStop(0.5, \"#000000\");\r\n							//_Gradient.AddColorStop(1.0, \"#66cc00\");\r\n							_Gradient.AddColorStop(1.0, \"#ffaa00\");\r\n						}\r\n						iCtx.FillStyle   = _Gradient;\r\n\r\n						iCtx.FillRect(-1,-1,2,2);\r\n					 }\r\n				}\r\n			}\r\n		 },\r\n	 }\r\n});",
	"../UVS/Imaging/Renderer3D.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'THREE : *, -Math, -Geometry (T*)',\r\n		'Math',\r\n		'Math.Geometry',\r\n	],\r\n	\r\n	'UVS.Imaging' : \r\n	 {\r\n		'Renderer3D' :\r\n		 {\r\n			ThreeRenderer  : nil('THREE.WebGLRenderer'),\r\n			Camera         : obj('THREE.Camera'),\r\n			Scene          : obj('THREE.Scene'),\r\n			\r\n			IsWebGL        : boo(false),\r\n			LastRenderTime : num,\r\n			LastTimeDelta  : num,\r\n			Resolution     : num(1),\r\n\r\n			constructor : function annex(iAA)\r\n			 {\r\n				//this << iAA.IsWebGL || false;\r\n\r\n				//this.ThreeRenderer = this.IsWebGL ? new WebGLRenderer() : new CanvasRenderer();\r\n				this.ThreeRenderer = this.IsWebGL ? new TWebGLRenderer() : new TCanvasRenderer();\r\n				{\r\n					\r\n\r\n\r\n					//this.ThreeRenderer.autoClear = false;//setClearColor(0x000000);\r\n					//this.ThreeRenderer.autoClearDepth = false;//setClearColor(0x000000);\r\n					this.ThreeRenderer.setClearColor(this.IsWebGL ? 0xffffff : 0x000000);\r\n					//this.ThreeRenderer.shadowMapEnabled = true;\r\n					this.ThreeRenderer.setSize(window.innerWidth, window.innerHeight);\r\n					this.ThreeRenderer.domElement.id = \"W3D\";\r\n					\r\n					document.body.appendChild(this.ThreeRenderer.domElement);\r\n\r\n					window.addEventListener(\"resize\", this.UpdateSize.Bind(this));\r\n				}\r\n				this.Camera = new TPerspectiveCamera(75, 1, 1, 1e6);\r\n				this.Scene  = iAA.Scene || new TScene;\r\n\r\n\r\n				// postprocessing\r\n				this.FxComposer = new TEffectComposer(this.ThreeRenderer);\r\n				{\r\n					this.FxComposer.addPass(new TRenderPass(this.Scene, this.Camera));\r\n\r\n					var _Effect = new TShaderPass(TATVShader);\r\n					{\r\n						$.gATVUniforms = _Effect.uniforms;\r\n\r\n						//_Effect.uniforms['scale'].value = 4;\r\n						_Effect.renderToScreen = true;\r\n					}\r\n					this.FxComposer.addPass(_Effect);\r\n\r\n					//var effect = new THREE.ShaderPass( THREE.RGBShiftShader );\r\n					//effect.uniforms[ 'amount' ].value = 0.0015;\r\n					//effect.renderToScreen = true;\r\n					//this.FxComposer.addPass( effect );\r\n				}\r\n\r\n				this.LastRenderTime = new Date() - 100;\r\n				this.LastTimeDelta  = 0.1;\r\n\r\n				this.UpdateSize();\r\n			 },\r\n\r\n			Render : function()\r\n			{\r\n				\r\n\r\n				this.UpdateCamera();\r\n\r\n				if(this.IsWebGL && 1) this.FxComposer.render(); else this.ThreeRenderer.render(this.Scene, this.Camera);\r\n				\r\n\r\n				//var _Now = new Date();\r\n				this.LastTimeDelta  = (new Date() - this.LastRenderTime) / 1000;\r\n				this.LastRenderTime = new Date().ValueOf();\r\n			},\r\n\r\n			//constructor : function(iAA)\r\n			 //{\r\n				//this << iAA.IsWebGL || false;\r\n\r\n				////this.ThreeRenderer = this.IsWebGL ? new WebGLRenderer() : new CanvasRenderer();\r\n				//this.ThreeRenderer = this.IsWebGL ? new TWebGLRenderer() : new TCanvasRenderer();\r\n				//{\r\n					////this.ThreeRenderer.autoClear = false;//setClearColor(0x000000);\r\n					////this.ThreeRenderer.autoClearDepth = false;//setClearColor(0x000000);\r\n					//this.ThreeRenderer.setClearColor(this.IsWebGL ? 0xf7f3e8 : 0x000000);\r\n					////this.ThreeRenderer.shadowMapEnabled = true;\r\n					//this.ThreeRenderer.setSize(window.innerWidth, window.innerHeight);\r\n					//this.ThreeRenderer.domElement.id = \"W3D\";\r\n					\r\n					//document.body.appendChild(this.ThreeRenderer.domElement);\r\n\r\n					//window.addEventListener(\"resize\", this.UpdateSize.Bind(this));\r\n				//}\r\n				//this.Camera = new TPerspectiveCamera(75, 1, 1, 1e6);\r\n				//this.Scene  = iAA.Scene || new TScene;\r\n\r\n				//this.LastRenderTime = new Date() - 100;\r\n				//this.LastTimeDelta  = 0.1;\r\n\r\n				//this.UpdateSize();\r\n			 //},\r\n\r\n			//Render : function()\r\n			//{\r\n				//this.UpdateCamera();\r\n				//this.ThreeRenderer.render(this.Scene, this.Camera);\r\n\r\n				////var _Now = new Date();\r\n				//this.LastTimeDelta  = (new Date() - this.LastRenderTime) / 1000;\r\n				//this.LastRenderTime = new Date().ValueOf();\r\n			//},\r\n\r\n			UpdateSize : function()\r\n			{\r\n				this.ThreeRenderer.setSize(window.innerWidth, window.innerHeight);\r\n				\r\n				\r\n\r\n				if(this.IsWebGL)\r\n				{\r\n					this.ThreeRenderer.setViewport(0,0, window.innerWidth * this.Resolution, window.innerHeight * this.Resolution);\r\n					this.ThreeRenderer.domElement.width  = window.innerWidth * this.Resolution;\r\n					this.ThreeRenderer.domElement.height = window.innerHeight * this.Resolution;\r\n				}\r\n				//else\r\n				//{\r\n					//var _Ctx = this.ThreeRenderer.domElement;\r\n					\r\n				//}\r\n				\r\n				\r\n\r\n				this.Camera.aspect = window.innerWidth / window.innerHeight;\r\n				this.Camera.updateProjectionMatrix();\r\n			},\r\n			UpdateCamera : function(iDeltaT)\r\n			{\r\n				var _VehP = gSIM.Vehicle.Position.Add(new Vector3(0,0,3));\r\n				var _VehR = gSIM.Vehicle.Rotation;\r\n\r\n				var _CamP = new Vector3(0,10,10);\r\n				var _TgtP = _VehP.Clone();\r\n\r\n				var _UpV  = new Vector3(0,0,1);\r\n				var _FoV  = 70;\r\n\r\n				switch(this.Camera.Mode)\r\n				{\r\n					case \"Num1\"  : //~~ Vehicle front view camera;\r\n					 {\r\n						_CamP = gSIM.Vehicle.Position.Add(new Vector3(0,+18, 2).Rotate(_VehR));\r\n						_TgtP = gSIM.Vehicle.Position.Add(new Vector3(0,+20, 2).Rotate(_VehR));\r\n\r\n						_UpV  = new Vector3(0,0,10).Rotate(_VehR);\r\n						\r\n						break;\r\n					 }\r\n					\r\n					case \"Num2\"  : //~~ Outer view;\r\n					 {\r\n						if(!$.gLastCamR) $.gLastCamR = {X : 3.7, Y : 0};\r\n						\r\n						if(gMouse.B2)\r\n						{\r\n							gLastCamR.X += gMouse.DX * 0.01; //~~ angle (rad);\r\n							gLastCamR.Y += gMouse.DY * 0.5;  //~~ Z bias (meters);\r\n\r\n							gLastCamR.Y = Clamp(gLastCamR.Y, 30);\r\n						}\r\n						var _AbsA = gLastCamR.X;\r\n\r\n						_CamP = new Vector3\r\n						(\r\n							//Sin(_AbsA) * 50000,\r\n							//Cos(_AbsA) * 50000,\r\n							Sin(_AbsA) * 10000,\r\n							Cos(_AbsA) * 10000,\r\n							gLastCamR.Y * 100\r\n						);\r\n						//_CamP\r\n						_TgtP = new Vector3;\r\n						//_TgtP = new Vector3(0,0,10000);\r\n						\r\n						var _TgtBias = new Vector3(0,14500,4500);\r\n						{\r\n							_CamP.Add(_TgtBias, self);\r\n							_TgtP.Add(_TgtBias, self);\r\n						}\r\n\r\n						_FoV = 40;\r\n\r\n						break;\r\n					 }\r\n					case \"Num3\"  : //~~ Near origin, flies around;\r\n					 {\r\n						var _Time = Date.Now.ValueOf();\r\n\r\n						_CamP = new Vector3(Sin(-Date.Now / 1000) * 30, Cos(-Date.Now / 1000) * 30, 10);\r\n						_TgtP = new Vector3(0,0,0);\r\n						_FoV  = 50;\r\n\r\n						break;\r\n					 }\r\n					case \"Num4\"  : //~~ Near vehicle, mouse controlled;\r\n					 {\r\n						if(!$.gLastCamR) $.gLastCamR = {X : 3.7, Y : 0};\r\n						\r\n						if(gMouse.B2)\r\n						{\r\n							gLastCamR.X += gMouse.DX * 0.01; //~~ angle (rad);\r\n							gLastCamR.Y += gMouse.DY * 0.5;  //~~ Z bias (meters);\r\n\r\n							gLastCamR.Y = Clamp(gLastCamR.Y, 30);\r\n						}\r\n						var _AbsA = gLastCamR.X - EulerAngles.FromQuaternion(_VehR, \"ZXY\").Z;\r\n\r\n						_CamP = _VehP.Add(new Vector3(Sin(_AbsA) * 30, Cos(_AbsA) * 30, gLastCamR.Y));\r\n						_TgtP.Add(new Vector3(0,0,2), self);\r\n						_FoV = 60;\r\n\r\n						break;\r\n					 }\r\n					case \"Num5\"  : //~~ Stationary high-zoom tracking camera;\r\n					 {\r\n						_CamP = new Vector3(-500,0,30);\r\n						_FoV = Clamp(3000 / _CamP.Subtract(_VehP).Length, 0.01, 50);\r\n\r\n						break;\r\n					 }\r\n					case \"Num6\"  : //~~ Camera looks to runway center through vehicle body;\r\n					 {\r\n						_CamP =_VehP.Add(_VehP.Normalize().MultiplyScalar(30));\r\n						_FoV  = 50;\r\n\r\n						break;\r\n					 }\r\n					case \"Num7\"  : //~~ Chases vehicle;\r\n					 {\r\n						_CamP = _VehP.Add(gSIM.Vehicle.Velocity.Linear.Normalize().MultiplyScalar(-30));\r\n						_UpV  = new Vector3(0,0,1).Rotate(_VehR);\r\n						_FoV  = 75;\r\n						\r\n						break;\r\n					 }\r\n					case \"Num8\": //~~ random fixed spot;\r\n					 {\r\n						var _VehV = gSIM.Vehicle.Velocity.Linear;\r\n\r\n						if(!$.gLastCamP || _VehP.DistanceTo($.gLastCamP) > Max(_VehV.Length * 10, 1000))\r\n						{\r\n							$.gLastCamP =\r\n							(\r\n								gSIM.Vehicle.Position\r\n								.Add(_VehV.MultiplyScalar(9.9).Rotate(Quaternion.Rotated(0,0,(Random() - 0.5) * 45 * DTR)))\r\n								//.Add(new Vector3((Random() - 0.5) * _VehV.Length * 10, (Random() - 0.5) * _VehV.Length * 10, 0))\r\n							);\r\n							gLastCamP.Z = Max(gLastCamP.Z, 10);\r\n						}\r\n						_CamP = gLastCamP;\r\n						_FoV = (3000 / _CamP.Subtract(_VehP).Length);\r\n\r\n						break;\r\n					 }\r\n					case \"Num0\": //~~ automatic;\r\n					 {\r\n						\r\n		\r\n\r\n						if(_VehP.Z < 5000) //~~ LOCALIZER;\r\n						{\r\n							var _SecTgtP = _TgtP.Clone().Set(0,null,null), _SecTgtW = 1 - Abs(Clamp(Magic(Scale(_VehP.X, 50), 0.3)));\r\n\r\n							if(_VehP.Z > 40)\r\n							{\r\n								_CamP = _TgtP.Add(new Vector3(0, Sign(_VehP.Y) * 100, 0)).Set(0,null,null);\r\n								_FoV  = 20;\r\n							}\r\n							else\r\n							{\r\n								_SecTgtP = _VehP.Set(null,0,0);\r\n								_CamP = new Vector3(0, Sign(_VehP.Y) * 5000, 30);\r\n								_FoV  = 1;\r\n							}\r\n							//_SecTgtW = \r\n							//~~_TgtP = Vector3.Add(_SecTgtP.MultiplyScalar(_SecTgtW), _TgtP.MultiplyScalar(1 - _SecTgtW));\r\n\r\n							_TgtP = Vector3.Mix(_TgtP, _SecTgtP, _SecTgtW);\r\n\r\n\r\n\r\n							//_TgtP = _SecTgtP;//.MultiplyScalar(_SecTgtW), _TgtP.MultiplyScalar(1 - _SecTgtW))\r\n\r\n							//if(Abs(_TgtP.X) < 50)\r\n							//{\r\n								\r\n								////var _TgtV = new Vector3, _TgtW = 0;\r\n\r\n								////Vector3.Add(_VehP.MultiplyScalar(1), _TgtV.MultiplyScalar(1 - )), \r\n								\r\n								\r\n								////~~_SecTgtP.X = Magic(_TgtP.X / 50, 0.2) * 50;\r\n\r\n\r\n								////_TgtP.Y = _VehP.Y;\r\n							//}\r\n						}\r\n						else //~~ HAC;\r\n						{\r\n							\r\n							var _GuideS  = UVS.Simulation.Vehicles.Buran.GuidanceSystem;\r\n							var _CylId   = _GuideS.Routines.GetSuitableHAC();\r\n							var _CylInfo = _GuideS.Routines.GetHACInfo(_CylId, gSIM.Vehicle);\r\n							\r\n							var _CamP = _CylInfo.CenPos.Add(_CylInfo.VehRelPos.Rotate(Quaternion.Rotated(0,0, +1 * DTR)).Normalize().MultiplyScalar(6000)).Set(null,null, _VehP.Z - 30);\r\n						\r\n							_FoV = Clamp(2000 / _CamP.DistanceTo(_TgtP),10, 90);\r\n						}\r\n						break;\r\n					 }\r\n					default : throw \"WTF\";\r\n				}\r\n\r\n				var _Cam = this.Camera;\r\n				{\r\n					_Cam.position . copy(_CamP.ToTHREE());\r\n					_Cam.up       . copy(_UpV.ToTHREE());\r\n					_Cam.fov      = _FoV;\r\n\r\n					_Cam.lookAt(_TgtP.ToTHREE());\r\n					_Cam.updateProjectionMatrix();\r\n				}\r\n			}\r\n		 },\r\n	 }\r\n});",
	"../UVS/Imaging/Renderer3D.Filters.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'THREE : *, -Math, -Geometry (T*)',\r\n		'Math',\r\n		'Math.Geometry',\r\n	],\r\n	\r\n	'UVS.Imaging' : \r\n	 {\r\n		'Renderer3D.Filters' :\r\n		 {\r\n			'Sepia' : \r\n			 {\r\n				/**\r\n					Based on glfx.js sepia shader\r\n					https://github.com/evanw/glfx.js\r\n				*/\r\n			 }\r\n		 },\r\n	 }\r\n});\r\n\r\n\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.EffectComposer = function ( renderer, renderTarget ) {\r\n\r\n	this.renderer = renderer;\r\n\r\n	if ( renderTarget === undefined ) {\r\n\r\n		var width = window.innerWidth || 1;\r\n		var height = window.innerHeight || 1;\r\n		var parameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };\r\n\r\n		renderTarget = new THREE.WebGLRenderTarget( width, height, parameters );\r\n\r\n	}\r\n\r\n	this.renderTarget1 = renderTarget;\r\n	this.renderTarget2 = renderTarget.clone();\r\n\r\n	this.writeBuffer = this.renderTarget1;\r\n	this.readBuffer = this.renderTarget2;\r\n\r\n	this.passes = [];\r\n\r\n	if ( THREE.CopyShader === undefined )\r\n		console.error( \"THREE.EffectComposer relies on THREE.CopyShader\" );\r\n\r\n	this.copyPass = new THREE.ShaderPass( THREE.CopyShader );\r\n\r\n};\r\n\r\nTHREE.EffectComposer.prototype = {\r\n\r\n	swapBuffers: function() {\r\n\r\n		var tmp = this.readBuffer;\r\n		this.readBuffer = this.writeBuffer;\r\n		this.writeBuffer = tmp;\r\n\r\n	},\r\n\r\n	addPass: function ( pass ) {\r\n\r\n		this.passes.push( pass );\r\n\r\n	},\r\n\r\n	insertPass: function ( pass, index ) {\r\n\r\n		this.passes.splice( index, 0, pass );\r\n\r\n	},\r\n\r\n	render: function ( delta ) {\r\n\r\n		this.writeBuffer = this.renderTarget1;\r\n		this.readBuffer = this.renderTarget2;\r\n\r\n		var maskActive = false;\r\n\r\n		var pass, i, il = this.passes.length;\r\n\r\n		for ( i = 0; i < il; i ++ ) {\r\n\r\n			pass = this.passes[ i ];\r\n\r\n			if ( !pass.enabled ) continue;\r\n\r\n			pass.render( this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive );\r\n\r\n			if ( pass.needsSwap ) {\r\n\r\n				if ( maskActive ) {\r\n\r\n					var context = this.renderer.context;\r\n\r\n					context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\r\n\r\n					this.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, delta );\r\n\r\n					context.stencilFunc( context.EQUAL, 1, 0xffffffff );\r\n\r\n				}\r\n\r\n				this.swapBuffers();\r\n\r\n			}\r\n\r\n			if ( pass instanceof THREE.MaskPass ) {\r\n\r\n				maskActive = true;\r\n\r\n			} else if ( pass instanceof THREE.ClearMaskPass ) {\r\n\r\n				maskActive = false;\r\n\r\n			}\r\n\r\n		}\r\n\r\n	},\r\n\r\n	reset: function ( renderTarget ) {\r\n\r\n		if ( renderTarget === undefined ) {\r\n\r\n			renderTarget = this.renderTarget1.clone();\r\n\r\n			renderTarget.width = window.innerWidth;\r\n			renderTarget.height = window.innerHeight;\r\n\r\n		}\r\n\r\n		this.renderTarget1 = renderTarget;\r\n		this.renderTarget2 = renderTarget.clone();\r\n\r\n		this.writeBuffer = this.renderTarget1;\r\n		this.readBuffer = this.renderTarget2;\r\n\r\n	},\r\n\r\n	setSize: function ( width, height ) {\r\n\r\n		var renderTarget = this.renderTarget1.clone();\r\n\r\n		renderTarget.width = width;\r\n		renderTarget.height = height;\r\n\r\n		this.reset( renderTarget );\r\n\r\n	}\r\n\r\n};\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\r\n\r\n	this.scene = scene;\r\n	this.camera = camera;\r\n\r\n	this.overrideMaterial = overrideMaterial;\r\n\r\n	this.clearColor = clearColor;\r\n	this.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 1;\r\n\r\n	this.oldClearColor = new THREE.Color();\r\n	this.oldClearAlpha = 1;\r\n\r\n	this.enabled = true;\r\n	this.clear = true;\r\n	this.needsSwap = false;\r\n\r\n};\r\n\r\nTHREE.RenderPass.prototype = {\r\n\r\n	render: function ( renderer, writeBuffer, readBuffer, delta ) {\r\n\r\n		this.scene.overrideMaterial = this.overrideMaterial;\r\n\r\n		if ( this.clearColor ) {\r\n\r\n			this.oldClearColor.copy( renderer.getClearColor() );\r\n			this.oldClearAlpha = renderer.getClearAlpha();\r\n\r\n			renderer.setClearColor( this.clearColor, this.clearAlpha );\r\n\r\n		}\r\n\r\n		renderer.render( this.scene, this.camera, readBuffer, this.clear );\r\n\r\n		if ( this.clearColor ) {\r\n\r\n			renderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\r\n\r\n		}\r\n\r\n		this.scene.overrideMaterial = null;\r\n\r\n	}\r\n\r\n};\r\n\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ShaderPass = function ( shader, textureID ) {\r\n\r\n	this.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\r\n\r\n	this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\r\n\r\n	this.material = new THREE.ShaderMaterial( {\r\n\r\n		uniforms: this.uniforms,\r\n		vertexShader: shader.vertexShader,\r\n		fragmentShader: shader.fragmentShader\r\n\r\n	} );\r\n\r\n	this.renderToScreen = false;\r\n\r\n	this.enabled = true;\r\n	this.needsSwap = true;\r\n	this.clear = false;\r\n\r\n\r\n	this.camera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );\r\n	this.scene  = new THREE.Scene();\r\n\r\n	this.quad = new THREE.Mesh( new THREE.PlaneGeometry( 2, 2 ), null );\r\n	this.scene.add( this.quad );\r\n\r\n};\r\n\r\nTHREE.ShaderPass.prototype = {\r\n\r\n	render: function ( renderer, writeBuffer, readBuffer, delta ) {\r\n\r\n		if ( this.uniforms[ this.textureID ] ) {\r\n\r\n			this.uniforms[ this.textureID ].value = readBuffer;\r\n\r\n		}\r\n\r\n		this.quad.material = this.material;\r\n\r\n		if ( this.renderToScreen ) {\r\n\r\n			renderer.render( this.scene, this.camera );\r\n\r\n		} else {\r\n\r\n			renderer.render( this.scene, this.camera, writeBuffer, this.clear );\r\n\r\n		}\r\n\r\n	}\r\n\r\n};\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MaskPass = function ( scene, camera ) {\r\n\r\n	this.scene = scene;\r\n	this.camera = camera;\r\n\r\n	this.enabled = true;\r\n	this.clear = true;\r\n	this.needsSwap = false;\r\n\r\n	this.inverse = false;\r\n\r\n};\r\n\r\nTHREE.MaskPass.prototype = {\r\n\r\n	render: function ( renderer, writeBuffer, readBuffer, delta ) {\r\n\r\n		var context = renderer.context;\r\n\r\n		// don't update color or depth\r\n\r\n		context.colorMask( false, false, false, false );\r\n		context.depthMask( false );\r\n\r\n		// set up stencil\r\n\r\n		var writeValue, clearValue;\r\n\r\n		if ( this.inverse ) {\r\n\r\n			writeValue = 0;\r\n			clearValue = 1;\r\n\r\n		} else {\r\n\r\n			writeValue = 1;\r\n			clearValue = 0;\r\n\r\n		}\r\n\r\n		context.enable( context.STENCIL_TEST );\r\n		context.stencilOp( context.REPLACE, context.REPLACE, context.REPLACE );\r\n		context.stencilFunc( context.ALWAYS, writeValue, 0xffffffff );\r\n		context.clearStencil( clearValue );\r\n\r\n		// draw into the stencil buffer\r\n\r\n		renderer.render( this.scene, this.camera, readBuffer, this.clear );\r\n		renderer.render( this.scene, this.camera, writeBuffer, this.clear );\r\n\r\n		// re-enable update of color and depth\r\n\r\n		context.colorMask( true, true, true, true );\r\n		context.depthMask( true );\r\n\r\n		// only render where stencil is set to 1\r\n\r\n		context.stencilFunc( context.EQUAL, 1, 0xffffffff );  // draw if == 1\r\n		context.stencilOp( context.KEEP, context.KEEP, context.KEEP );\r\n\r\n	}\r\n\r\n};\r\n\r\n\r\nTHREE.ClearMaskPass = function () {\r\n\r\n	this.enabled = true;\r\n\r\n};\r\n\r\nTHREE.ClearMaskPass.prototype = {\r\n\r\n	render: function ( renderer, writeBuffer, readBuffer, delta ) {\r\n\r\n		var context = renderer.context;\r\n\r\n		context.disable( context.STENCIL_TEST );\r\n\r\n	}\r\n\r\n};\r\n\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Full-screen textured quad shader\r\n */\r\n\r\nTHREE.CopyShader = {\r\n\r\n	uniforms: {\r\n\r\n		\"tDiffuse\": { type: \"t\", value: null },\r\n		\"opacity\":  { type: \"f\", value: 1.0 }\r\n\r\n	},\r\n\r\n	vertexShader: [\r\n\r\n		\"varying vec2 vUv;\",\r\n\r\n		\"void main() {\",\r\n\r\n			\"vUv = uv;\",\r\n			\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n		\"}\"\r\n\r\n	].join(\"\\n\"),\r\n\r\n	fragmentShader: [\r\n\r\n		\"uniform float opacity;\",\r\n\r\n		\"uniform sampler2D tDiffuse;\",\r\n\r\n		\"varying vec2 vUv;\",\r\n\r\n		\"void main() {\",\r\n\r\n			\"vec4 texel = texture2D( tDiffuse, vUv );\",\r\n			\"gl_FragColor = opacity * texel;\",\r\n\r\n		\"}\"\r\n\r\n	].join(\"\\n\")\r\n\r\n};\r\n\r\nTHREE.ATVShader = {\r\n	uniforms: {\r\n		\"tDiffuse\" : { type: \"t\", value: null },\r\n		\"time\"     : {type: \"f\",  value: 0.0 },\r\n		\"sheet\"    : {type: \"f\",  value: 0.0 },\r\n		\"signal\"   : {type: \"f\",  value: 0.0 },\r\n		//\"noise\"    : {type: \"f\",  value: 0.0 },\r\n	},\r\n	vertexShader: [\r\n\r\n		\"varying vec2 vUv;\",\r\n\r\n		\"void main()\",\r\n		\"{\",\r\n			\"vUv = uv;\",\r\n			\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n		\"}\"\r\n\r\n	].join(\"\\n\"),\r\n\r\n	fragmentShader :\r\n	[\r\n		\"uniform sampler2D tDiffuse;\",\r\n		\"uniform float time;\",\r\n		\"uniform float sheet;\",\r\n		\"uniform float signal;\",\r\n		\r\n		\"varying vec2 vUv;\",\r\n		\r\n		\"void main()\",\r\n		\"{\",\r\n			\"vec4  _Color = texture2D(tDiffuse, vUv);\",\r\n			\"float _Avg   = ((_Color.r + _Color.g + _Color.b) / 3.0) * 1.1;\",\r\n			\r\n			\"float _Noise  = clamp(fract((sin(time + fract(pow(vUv.x * 10.0 + 5.0, 2.0)) + fract(vUv.y * 10.0 + 5.0))) * 10000.0), 0.0, 1.0 - signal) * 5.0;\",\r\n			//\"float _Sheet  = sheet;\",\r\n			//\"float _Sheet  = sheet;\",\r\n			\"float _Image = mix(_Noise, mix(_Avg, 1.0, sheet), signal);\",\r\n			\r\n			\"float _Ripples  = sin(vUv.y * 200.0) * 0.01;\",\r\n			\"float _Gradient = clamp(1.5 - pow(abs(vUv.x - 0.5) * 2.0, 1.0), 0.0, 1.0);\",\r\n			\"float _Frame    = _Ripples + _Gradient;\",\r\n			\r\n			\"gl_FragColor = vec4(vec3(1.0,0.95,0.8) * _Image * _Frame * 1.0, 1.0);\",\r\n		\"}\"\r\n	].join(\"\\n\")\r\n};",
	"../UVS/Imaging/Scene1.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	 [\r\n		'THREE : *, -Math'     ,\r\n		'Math  : *, -Geometry' ,\r\n		'Math.Geometry (N*)'   ,\r\n		//'Math.Geometry'        ,\r\n	 ],\r\n	'UVS.Imaging.Routines' :\r\n	 {\r\n		'ImgDir' : \"assets/images/\",\r\n		'VertexData' : \r\n		 {\r\n			BuranPath88        :\r\n			 {\r\n				get once()\r\n				{\r\n					var oVV = []; for(var _EE = gApp.ApproachDiagram.VymData.Entries, cE,Ei = 0; cE = _EE[Ei], Ei < _EE.Length; Ei+=100)\r\n					{\r\n						//oVV.Add(cE.Value.Z, cE.Value.X, cE.Value.H);\r\n						oVV.Add(cE.Value.Position.X, cE.Value.Position.Y, cE.Value.Position.Z);\r\n					}\r\n					return oVV;\r\n				}\r\n			 },\r\n		 },\r\n		'Drafting' : \r\n		 {\r\n			Line          : function(iName, iColor, iWidth, iType, iPointVV, iPosV, iRotQ, iScaV, oObj$Line)\r\n			 {\r\n				if(!iPointVV || iPointVV.Length == 0 || iPointVV.Length % 3 != 0) throw \"ARGS: invalid point data\";\r\n\r\n				if(iName  == undefined) iName  = \"\";\r\n				if(iColor == undefined) iColor = \"#ffff00\";\r\n				if(iWidth == undefined) iWidth = 2;\r\n				if(iType  == undefined) iType  = LineStrip;\r\n				if(iPosV  == undefined) iPosV  = new Vector3;\r\n				if(iRotQ  == undefined) iRotQ  = new Quaternion;\r\n				if(iScaV  == undefined) iScaV  = new Vector3(1,1,1);\r\n\r\n				oObj = new Line(new Geometry(), new LineBasicMaterial({color : iColor, linewidth : iWidth}));\r\n				{\r\n					for(var cP,Vi = 0; cP = new Vector3(iPointVV[Vi], iPointVV[Vi + 1], iPointVV[Vi + 2]), Vi < iPointVV.Length; Vi += 3)\r\n					{\r\n						oObj.geometry.vertices.push(cP);\r\n					}\r\n					oObj.name       = iName;\r\n					oObj.type       = iType;\r\n					oObj.position   . copy(iPosV);\r\n					oObj.quaternion . copy(iRotQ);\r\n					oObj.scale      . copy(iScaV);\r\n				}\r\n				return oObj;\r\n			 },\r\n			Object        : function(iName, iType, iColor, iWidth,  iPosV, iRotQ, iScaV, oObj$Line)\r\n			 {\r\n				if(iType  == undefined) iType  = \"Cross3D\";\r\n\r\n\r\n				var _VV = [], _LineT = LineStrip; switch(iType)\r\n				{\r\n					case \"Cross2D\"   : _LineT = LinePieces; _VV = [-1, 0,0, +1, 0,0,   0,-1,0,  0,+1,0];                             break;\r\n					case \"Cross3D\"   : _LineT = LinePieces; _VV = [-1, 0,0, +1, 0,0,   0,-1,0,  0,+1,0,  0,0,-1, 0,0,+1];            break;\r\n					case \"XSign\"     : _LineT = LinePieces; _VV = [-1,-1,0, +1,+1,0,  -1,+1,0, +1,-1,0];                             break;\r\n					case \"Rectangle\" :                      _VV = [-1,-1,0, +1,-1,0,  +1,+1,0, -1,+1,0, -1,-1,0];                    break;\r\n					case \"Diamond\"   :                      _VV = [-1, 0,0,  0,+1,0,  +1, 0,0,  0,-1,0, -1, 0,0];                    break;\r\n					\r\n					case \"Circle\"    : for(var _Step = 30 * DTR, cI = -_Step; cI < D360; cI += _Step) _VV.Add(Sin(cI), Cos(cI), 0);  break;\r\n					case \"Box\"       :\r\n					 {\r\n						_LineT = LinePieces;\r\n\r\n						_VV = \r\n						[\r\n							-1,-1,-1, +1,-1,-1,\r\n							+1,-1,-1, +1,+1,-1,\r\n							+1,+1,-1, -1,+1,-1,\r\n							-1,+1,-1, -1,-1,-1,\r\n\r\n							-1,-1,+1, +1,-1,+1,\r\n							+1,-1,+1, +1,+1,+1,\r\n							+1,+1,+1, -1,+1,+1,\r\n							-1,+1,+1, -1,-1,+1,\r\n\r\n							-1,-1,-1, -1,-1,+1,\r\n							+1,-1,-1, +1,-1,+1,\r\n							+1,+1,-1, +1,+1,+1,\r\n							-1,+1,-1, -1,+1,+1,\r\n						];\r\n						break;\r\n					 }\r\n					\r\n					default : throw \"WTF\";\r\n				}\r\n				return new Drafting.Line(iName, iColor, iWidth, _LineT, _VV, iPosV, iRotQ, iScaV);\r\n			 },\r\n			\r\n			Waypoint      : function(iX,iY,iZ, iRadius, iColor, oObj)\r\n			 {\r\n				\r\n			 },\r\n			NEP           : function(iX,iY,iZ, iRadius, iColor, oObj)\r\n			 {\r\n				return new Drafting.Object\r\n				(\r\n					\"\", \"Circle\", iColor, 3,\r\n					new Vector3(iX,iY,iZ),\r\n					NQuaternion.Rotated(D090,0,0).ToTHREE(),\r\n					new Vector3(iRadius,iRadius,iRadius)\r\n				);\r\n			 },\r\n		 },\r\n		\r\n		\r\n		CreateSkydome       : function(iName, iFileName, iSize, iAlt, iRepeatX, iIsTransparent, oSphere)\r\n		 {\r\n			if(iSize    == undefined) iSize    = 50000;\r\n			if(iRepeatX == undefined) iRepeatX = 1;\r\n\r\n			oSphere = new Mesh(new SphereGeometry(iSize));\r\n			{\r\n				oSphere.name       = iName;\r\n				oSphere.position.z = iAlt;\r\n				oSphere.rotateX(D090);\r\n\r\n\r\n				\r\n				var _Texture = ImageUtils.loadTexture(ImgDir + iFileName);\r\n				{\r\n					//_Texture.wrapS = RepeatWrapping;\r\n					//_Texture.wrapT = RepeatWrapping;\r\n\r\n					//_Texture.repeat.set(1,1);\r\n				}\r\n				//new MeshBasicMaterial({transparent : iIsTransparent, side: BackSide}\r\n				oSphere.material = new MeshBasicMaterial({map : _Texture, transparent : iIsTransparent, side: BackSide, fog : false});\r\n			}\r\n			return oSphere;\r\n		 },\r\n		CreateTerrain       : function(iFileN,  iWidth, iHeight,  iWidSegs, iHeiSegs, iX, iY, iAngZ, iUniqTiles, oObj)\r\n		 {\r\n			if(iWidSegs * iHeiSegs != iUniqTiles.Length) throw \"WTF\";\r\n\r\n			//var _Te\r\n			var _FileNameRgx = /(.*)(\\..*?)$/;\r\n			//var _GenericTile = ;\r\n			\r\n\r\n			oObj = new Mesh();\r\n			{\r\n				oObj.name = \"Terrain\";\r\n				//oObj.rotateZ(1.15);\r\n				oObj.rotateZ(iAngZ);\r\n				oObj.position.set(iX, iY, -0.1);\r\n				\r\n				\r\n				\r\n				//var _AiptM = new Mesh();\r\n\r\n				var _Geom = new PlaneGeometry(iWidth,iHeight,iWidSegs,iHeiSegs);\r\n				{\r\n					//debugger;\r\n					for(var cMatI = 0, Ti = 0; Ti < iUniqTiles.length; Ti++)\r\n					{\r\n						if(!iUniqTiles[Ti]) continue;\r\n\r\n						_Geom.faces[Ti * 2 + 0].materialIndex =\r\n						_Geom.faces[Ti * 2 + 1].materialIndex = ++cMatI;\r\n					}\r\n					//for(var _Uvs = _Geom.faceVertexUvs[0], Si = 0; Si < iWidSegs * iHeiSegs * 2; Si += 2)\r\n					//{\r\n						//_Uvs[Si]     = [new Vector2(0,1),new Vector2(0,0),new Vector2(1,1)];\r\n						//_Uvs[Si + 1] = [new Vector2(0,0),new Vector2(1,0),new Vector2(1,1)];\r\n					//}\r\n					//debugger;\r\n					for(var _Uvs = _Geom.faceVertexUvs[0], Si = 0; Si < _Uvs.Length; Si += 2)\r\n					{\r\n						_Uvs[Si]     = [new Vector2(0,1),new Vector2(0,0),new Vector2(1,1)];\r\n						_Uvs[Si + 1] = [new Vector2(0,0),new Vector2(1,0),new Vector2(1,1)];\r\n					}\r\n					\r\n					for(var _VV = _Geom.vertices, cV, Vi = 0; cV = _VV[Vi]; Vi++)\r\n					{\r\n						cV.z = Random() * Max(0, cV.length() -  4000) * 0.02;\r\n					}\r\n					_Geom.computeFaceNormals();\r\n					_Geom.computeVertexNormals();\r\n\r\n					//_Geom.faceVertexUvs = []; for(var Si = 0; Si < Pow(iSegments, 2) * 2; Si += 2)\r\n					//{\r\n						//_Geom.faceVertexUvs.Add([new Vector2(0,0.1),new Vector2(0,0),new Vector2(0.1,0.1)]);\r\n						//_Geom.faceVertexUvs.Add([new Vector2(0,0),new Vector2(0.1,0),new Vector2(0.1,0.1)]);\r\n					//}\r\n\r\n					//_Geom.buffersNeedUpdate = true;\r\n					//console.info(_Geom);\r\n				}\r\n				\r\n\r\n\r\n				var _MM = [];\r\n				{\r\n					//debugger;\r\n					var _DiffC = 0xffffff;\r\n					var _SpecC = 0x000000;\r\n					var _EmisC = 0xaaaaaa;\r\n\r\n					_MM.Add(new MeshLambertMaterial({map : ImageUtils.loadTexture(ImgDir + \"terrain/\" + iFileN.Replace(_FileNameRgx, \"$1generic$2\")), color : _DiffC, specular : _SpecC,  emissive : _EmisC}));\r\n//new MeshLambertMaterial({map: cTileT, color : 0xffffff, specular : 0x555555,  emissive : 0xaaaaaa})\r\n\r\n					for(var cX = 0; cX < iWidSegs; cX++) for(var cY = 0; cY < iHeiSegs; cY++) \r\n					{\r\n						if(!iUniqTiles[(cY * iWidSegs) + cX]) continue;\r\n\r\n						var cTileT = ImageUtils.loadTexture(ImgDir + \"terrain/\" + iFileN.Replace(_FileNameRgx, \"$1\" + cX + \"x\" + cY + \"$2\"));\r\n						{\r\n							//cTex.wrapS = RepeatWrapping;\r\n							//cTex.wrapT = RepeatWrapping;\r\n\r\n							//cTex.repeat.set(1,1);\r\n						}\r\n						_MM.Add(new MeshLambertMaterial({map: cTileT, color : _DiffC, specular : _SpecC,  emissive : _EmisC}));\r\n						 \r\n					}\r\n				}\r\n				//oObj.geometry = _Geom;\r\n				oObj.geometry = _Geom;\r\n				oObj.material = new MeshFaceMaterial(_MM);\r\n				//debugger;\r\n\r\n				//cio\r\n			}\r\n			return oObj;\r\n		 },\r\n		\r\n		CreateLayer        : function(iName, iPos, iSize, iHNoise, iColor, iTexFileN, iTexRepeat$num, oObj)\r\n		 {\r\n			//debugger;\r\n			//if(iHNoise)\r\n			\r\n			var _Texture; if(iTexFileN)\r\n			{\r\n				_Texture = ImageUtils.loadTexture(ImgDir + iTexFileN);\r\n				{\r\n					if(iTexRepeat != undefined)\r\n					{\r\n						_Texture.wrapS = RepeatWrapping;\r\n						_Texture.wrapT = RepeatWrapping;\r\n\r\n						_Texture.repeat.set(iTexRepeat,iTexRepeat);\r\n					}\r\n				}\r\n			}\r\n\r\n			oObj = new Mesh(new PlaneGeometry(1,1, iHNoise ? 100 : 1, iHNoise ? 100 : 1), new MeshBasicMaterial({map : _Texture, color : iColor, transparent: true, opacity : 1, side : DoubleSide}));\r\n			{\r\n				oObj.name = iName;\r\n				oObj.position.copy(iPos);\r\n				oObj.scale.set(iSize,iSize,1);\r\n\r\n\r\n				if(iHNoise) for(var _VV = oObj.geometry.vertices, cV, Vi = 0; cV = _VV[Vi]; Vi++)\r\n				{\r\n					cV.z = Random() * iHNoise;\r\n				}\r\n\r\n				oObj.geometry.computeFaceNormals();\r\n				oObj.geometry.computeVertexNormals();\r\n			}\r\n			return oObj;\r\n		 },\r\n	\r\n		CreateRunway        : function(oObj)\r\n		 {\r\n			oObj = new Object3D();\r\n			{\r\n				oObj.add(Drafting.Object(\"\", \"Rectangle\", 0xffffff, 3, null, null, new Vector3(84 / 2, 4500 / 2, 1)));\r\n				oObj.add(Drafting.Object(\"\", \"Cross2D\",   0xffff00, 1, null, null, new Vector3(35,2100,1)));\r\n				\r\n				oObj.add(Drafting.Object(\"\", \"Diamond\", 0xffffff, 2, new Vector3(0,+1500,0), null, new Vector3(20,50,1)));\r\n				oObj.add(Drafting.Object(\"\", \"Diamond\", 0xffffff, 2, new Vector3(0,-1500,0), null, new Vector3(20,50,1)));\r\n			}\r\n			return oObj;\r\n		 },\r\n		CreateLight         : function(iX,iY,iZ, iIntensity, oObj)\r\n		 {\r\n			oObj = new PointLight(new Color(0xffffff));\r\n			oObj.position.set(iX,iY,iZ);\r\n			\r\n			return oObj;\r\n		 },\r\n		CreateShadow        : function(iObjName, iDiameter, oObj)\r\n		 {\r\n			if(!iObjName) throw \"WTF\";\r\n\r\n			oObj = new Mesh();\r\n			{\r\n				oObj.name     = iObjName;\r\n\r\n				oObj.geometry = new PlaneGeometry(iDiameter, iDiameter);\r\n				oObj.material = new MeshBasicMaterial( {map: ImageUtils.loadTexture(ImgDir + \"shadow.png\"), color : 0x000000, transparent : true, opacity : 1});\r\n			}\r\n			return oObj;\r\n		 },\r\n		\r\n		CreateFrame         : function(iName, iSize, oObj)\r\n		 {\r\n			if(!iName) throw \"WTF\";\r\n\r\n			var _VV = [];\r\n			{\r\n				for(var cX = -0.5; cX < +0.5; cX += 0.2)\r\n				{\r\n					for(var cY = -0.5; cY < +0.5; cY += 0.2)\r\n					{\r\n						for(var cZ = -0.5; cZ < +0.5; cZ += 0.2)\r\n						{\r\n							_VV.Add\r\n							(\r\n								cX, cY - 0.01, cZ,\r\n								cX, cY + 0.01, cZ\r\n							);\r\n						}\r\n					}\r\n				}\r\n			}\r\n\r\n			return new Drafting.Line(iName, 0xffffff, 1, LinePieces, _VV, null,null,new Vector3(iSize,iSize,iSize));\r\n		 },\r\n		CreateScene         : function()\r\n		 {\r\n			//console.info(\"TODO: CreateXXX(AA) -> new XXX(AA)\");\r\n			var _Scene = gApp.Renderer.Scene;\r\n			{\r\n				if(gApp.Renderer.IsWebGL)\r\n				{\r\n					\r\n					_Scene.fog = new Fog(0xffffff, 1, 15000);\r\n				\r\n\r\n					_Scene.add(CreateSkydome(\"Troposphere\",  \"tropo2.jpg\",    150000, 12000, 1, true));\r\n					_Scene.add(CreateSkydome(\"Stratosphere\", \"strato1.jpg\",   200000, 17000, 1, false));\r\n\r\n					_Scene.add(CreateLayer(\"Clouds\",     new Vector3(5000,5000,1000), 100000, 0, 0xffffff, \"clouds.png\", 10));\r\n\r\n					_Scene.add\r\n					(\r\n						CreateTerrain\r\n						(\r\n							\".jpg\", 512 * 106.25, 512 * 106.25,  81, 81,   0, 0, D090 - 0.002,\r\n							[\r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n\r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n\r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n\r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n\r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n\r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n\r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n\r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n\r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n								0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0, \r\n							]\r\n						)\r\n					);\r\n					\r\n					\r\n					//_Scene.add(new AmbientLight(0x222222));\r\n\r\n					_Scene.add(CreateLight(0, -100000, 30000, 1));\r\n					_Scene.add(CreateShadow(\"VehicleShadow\", 40));\r\n				}\r\n				else\r\n				{\r\n					_Scene.add(Drafting.Object(\"\", \"XSign\", 0xffffff, 3, new Vector3(0,0,0), null, new Vector3(10,10,10)));\r\n\r\n					_Scene.add(CreateRunway());\r\n\r\n					_Scene.add(Drafting.Object(\"\", \"XSign\", 0xff0000, 3, new Vector3(0,+3500,0), null, new Vector3(50,50,50)));\r\n					_Scene.add(Drafting.Object(\"\", \"XSign\", 0xff0000, 3, new Vector3(0,-3500,0), null, new Vector3(50,50,50)));\r\n\r\n\r\n					//_Scene.add(Drafting.NEP(0, -14500, 4000,   500, 0xff0000));\r\n					_Scene.add(Drafting.NEP(0, +14500, 4000,   500, 0xff0000));\r\n\r\n					_Scene.add(Drafting.Line(\"\", 0x00cc00, 3, LineStrip, VertexData.BuranPath88));\r\n\r\n\r\n					\r\n					_Scene.add(Drafting.Object(\"ShadowNG\", \"Cross2D\", 0xffff00, 3));\r\n					_Scene.add(Drafting.Object(\"ShadowLG\", \"Cross2D\", 0xffff00, 3));\r\n					_Scene.add(Drafting.Object(\"ShadowRG\", \"Cross2D\", 0xffff00, 3));\r\n\r\n					_Scene.add(CreateFrame(\"EnvFrame\", 1000));\r\n\r\n					//_Scene.add(CreateCylinder (-6000, +15000, 0,   6000, 15000,   10, 5, -1,   0xaaaaaa));\r\n					//_Scene.add(CreateCylinder (+6000, +15000, 0,   6000, 15000,   10, 5, +1,   0xaaaaaa));\r\n					//_Scene.add(CreateCylinder (+6000, -15000, 0,   6000, 15000,   10, 5, +1,   0xaaaaaa));\r\n					//_Scene.add(CreateCylinder (-6000, -15000, 0,   6000, 15000,   10, 5, -1,   0xaaaaaa));\r\n				}\r\n			}\r\n		 },\r\n	 }\r\n});\r\n\r\n\r\n\r\n",
	"../UVS/Equipment/Autopilot.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'Math',\r\n		'Math.Geometry',\r\n\r\n		'UVS',\r\n		//'UVS.Pr	\r\n		//'UVS.World',\r\n		//'UVS.',\r\n	],\r\n	'UVS' : \r\n	 {\r\n		//(iV, iForce)\r\n\r\n		//gVehicle.Autopilot.Enable        ();\r\n		//gVehicle.Autopilot.AdjustHeading (270,  true);\r\n		//gVehicle.Autopilot.SetNav        (1,    true);\r\n		//gVehicle.Autopilot.SetNav        (2,    true);\r\n\r\n		//gVehicle.Autopilot.SetNav        (true);\r\n		//gVehicle.Autopilot.SetAltitude   (5000, true);\r\n		//gVehicle.Autopilot.SetAirspeed   (200,  true);\r\n		//gVehicle.Autopilot.Disable       ();\r\n\r\n		//gVehicle.Autopilot.\r\n\r\n		//'AutopilotMode' : \r\n		 //{\r\n			///**\r\n				//Disabled     : parseInt('00000000000',2),  //~~ All modes off; \r\n				\r\n				////~~ Engine power and air brakes;\r\n				//SHold        : parseInt('00000000001',2),  //~~ Constant air speed;\r\n				//SHoldAoA     : parseInt('00000000001',2),  //~~ Constant vehicle AoA;\r\n				//SGround      : parseInt('00000000001',2),  //~~ ;\r\n\r\n				////BHold        : parseInt('00000000001',2),  //~~ Constant air speed;\r\n				//////~~ Constant air speed;\r\n				////BHoldAoA     : parseInt('00000000001',2),  //~~ Constant vehicle AoA;\r\n				////BGround      : parseInt('00000000001',2),  //~~ ;\r\n\r\n				//BankHold       :\r\n				//Wingfly        :\r\n				//HCircle        :\r\n				//GPSEightFigure :\r\n				//GPSEightFigure :\r\n\r\n\r\n				//VAntiOverspeedManeuvers     : \r\n\r\n				//HHold        : parseInt('00000000010',2), //~~;\r\n				//VHold        : parseInt('00000000100',2), //~~;\r\n\r\n				//HRadio       : parseInt('00000000001',2), //~~;\r\n				//VRadio       : parseInt('00000000001',2), //~~;\r\n\r\n				//HGPS         : parseInt('00000000000',2), //~~;\r\n				//VGPS         : parseInt('00000000000',2), //~~;\r\n\r\n				//HInertial    \r\n				//VInertial    \r\n\r\n				//VBaroHold\r\n				//VSurface\r\n			//*/\r\n		 //},\r\n		//'Autopilot' : \r\n		 //{\r\n			//Settings : obj,\r\n\r\n			//constructor : function()\r\n			 //{\r\n				//this.Settings = new function AutopilotSettings()\r\n				//{\r\n					//this.Horizontal = {};\r\n					//this.Vertical   = {};\r\n					//this.Throttle   = {};\r\n				//};\r\n			 //},\r\n			\r\n			//static : \r\n			 //{\r\n				\r\n			 //}\r\n		 //}\r\n	 }\r\n});",
	"../UVS/Equipment/Panels/HUD.Aircraft.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'System.Drawing: *, -Vector',\r\n		'Math',\r\n		'Math.Geometry',\r\n\r\n		'UVS.Equipment',\r\n	],\r\n	\r\n	'UVS.Equipment.HUD' :\r\n	 {\r\n		'Layouts' : \r\n		 {\r\n			'Vehicles/Aircraft' : jso\r\n			 ({\r\n				Indicators :\r\n				[\r\n					{ID : \"Vehicles/Aircraft/Heading\",        Bounds : [.25, .175, .50, .07]},\r\n					{ID : \"Vehicles/Aircraft/Attitude\",       Bounds : [.25, .25,  .50, .50]},\r\n					\r\n					{ID : \"Vehicles/Aircraft/Speeds\",         Bounds : [.08, .25,  .165, .165]},\r\n					{ID : \"Vehicles/Aircraft/Misc1\",          Bounds : [.08, .415, .165, .165]},\r\n					{ID : \"Vehicles/Aircraft/Surfaces\",       Bounds : [.08, .58,  .165, .165]},\r\n					\r\n\r\n					{ID : \"Vehicles/Aircraft/Altimeter\",      Bounds : [.755, .25,  .165, .165]},\r\n					{ID : \"Vehicles/Aircraft/Situation\",      Bounds : [.755, .415, .165, .165]},\r\n					{ID : \"Vehicles/Aircraft/Inputs\",         Bounds : [.755, .58,  .165, .165]},\r\n					//{ID : \"Generic/Watch\",               Bounds : [.755, .58,  .165, .165]},\r\n\r\n					//{ID : \"Generic/DebugInfo\",                Bounds : [.08, .755,  .84, .15]},\r\n					{ID : \"Generic/DebugInfo\",                Bounds : [.23, .755,  .84, .15]},\r\n				]\r\n			 }),\r\n		 },\r\n		'Indicators' : \r\n		 {\r\n			'Vehicles/Aircraft' :\r\n			 {\r\n				'Heading        : Indicator' :\r\n				 {\r\n					Draw : function(iCtx, iObj)\r\n					{\r\n						if(isNaN(iObj.Data.Attitude.Heading))\r\n						{\r\n							Indicator.Drawing.DrawError(iCtx, this.Bounds);\r\n							return;\r\n						}\r\n\r\n						iCtx.ZoomIn(0, 100);\r\n						{\r\n							//iCtx.Font = \"75% lucida sans\";\r\n							iCtx.Font = \"75% quartz\";\r\n							iCtx.TextBaseline = \"middle\";\r\n							iCtx.TextAlign    = \"center\";\r\n							\r\n							iCtx.FillText(Round(iObj.Data.Attitude.Heading), iCtx.W / 2, iCtx.H / 2);\r\n						}\r\n						iCtx.ZoomOut();\r\n					}\r\n				 },\r\n				'Attitude       : Indicator' :\r\n				 {\r\n					Draw : function(iCtx, iObj)\r\n					{\r\n						var _IsPrimaryIndicator = iCtx.W > 200;\r\n						var _Data = iObj.Data.Attitude;\r\n\r\n						if(isNaN(_Data.Pitch * _Data.Bank *  _Data.Heading))\r\n						{\r\n							Indicator.Drawing.DrawError(iCtx, true);\r\n							return;\r\n						}\r\n						\r\n						iCtx.BeginPath();\r\n						iCtx.AddRect(0,0,iCtx.W,iCtx.H);\r\n						iCtx.Clip();\r\n\r\n\r\n						iCtx.ZoomIn(100);\r\n						iCtx.Translate(50,50);\r\n						{\r\n							iCtx.TextAlign    = \"center\";\r\n							iCtx.TextBaseline = \"middle\";\r\n							iCtx.FontSize     = \"5%\";\r\n\r\n							var _PitchStep  = 3;\r\n\r\n							var _ScaleWidth = 30;\r\n							var _LabelOffs  = _ScaleWidth + 10;\r\n\r\n							//~~ center 'bird';\r\n							iCtx.BeginPath();\r\n							{\r\n								iCtx.MoveTo(-6,  0);\r\n								iCtx.LineTo(-3,  0);\r\n								iCtx.LineTo( 0, +3);\r\n								iCtx.LineTo(+3,  0);\r\n								iCtx.LineTo(+6,  0);\r\n\r\n								iCtx.LineWidth = 1;\r\n								iCtx.Stroke();\r\n							}\r\n							\r\n							iCtx.Save();\r\n							iCtx.Rotate(-_Data.Bank * DTR);\r\n							iCtx.Translate(0, (_Data.Pitch / 90) * (_PitchStep * 90));\r\n							{\r\n								//~~ zenith & nadir;\r\n								iCtx.BeginPath();\r\n								{\r\n									iCtx.Save();\r\n									{\r\n										iCtx.Translate(0,-90 * _PitchStep);\r\n										iCtx.MoveTo(-2,  0); iCtx.LineTo(+2,  0);\r\n										iCtx.MoveTo( 0, -2); iCtx.LineTo( 0, +2);\r\n\r\n										iCtx.Translate(0, +180 * _PitchStep);\r\n										iCtx.MoveTo(-2,  0); iCtx.LineTo(+2,  0);\r\n										iCtx.MoveTo( 0, -2); iCtx.LineTo( 0, +2);\r\n									}\r\n									iCtx.Restore();\r\n\r\n									iCtx.LineWidth = 1;\r\n									iCtx.Stroke();\r\n								}\r\n\r\n								//~~ horizon line;\r\n								iCtx.BeginPath();\r\n								{\r\n									iCtx.MoveTo(-7,0); iCtx.LineTo(-50,0);\r\n									iCtx.MoveTo(+7,0); iCtx.LineTo(+50,0);\r\n\r\n									iCtx.LineWidth = 1;\r\n									iCtx.Stroke();\r\n								}\r\n								\r\n								//~~ pitch grid;\r\n\r\n								if(iObj.Data.RAlt > 100)\r\n								{\r\n									iCtx.BeginPath();\r\n									{\r\n										for(var cA = +80; cA >= -80; cA -= 10)\r\n										{\r\n											var cY = -cA * _PitchStep;\r\n\r\n											if(cA < 0)\r\n											{\r\n												iCtx.MoveTo(-7, cY + 1); for(var cX = -10; cX >= -_ScaleWidth; cX -= 6) iCtx.LineTo(cX, cY - 1), iCtx.LineTo(cX - 3, cY + 1);\r\n												iCtx.MoveTo(+7, cY + 1); for(var cX = +10; cX <= +_ScaleWidth; cX += 6) iCtx.LineTo(cX, cY - 1), iCtx.LineTo(cX + 3, cY + 1);\r\n											}\r\n											else \r\n											{\r\n												iCtx.MoveTo(-7, cY); iCtx.LineTo(-_ScaleWidth, cY);\r\n												iCtx.MoveTo(+7, cY); iCtx.LineTo(+_ScaleWidth, cY);\r\n											}\r\n\r\n											if(_IsPrimaryIndicator)\r\n											{\r\n												iCtx.Save();\r\n													iCtx.Translate(-_LabelOffs,cY);\r\n													iCtx.Rotate(+_Data.Bank * DTR);\r\n													iCtx.FillText(cA, 0, 0);\r\n												iCtx.Restore();\r\n												iCtx.Save();\r\n													iCtx.Translate(+_LabelOffs,cY);\r\n													iCtx.Rotate(+_Data.Bank * DTR);\r\n													iCtx.FillText(cA, 0, 0);\r\n												iCtx.Restore();\r\n											}\r\n										}\r\n										iCtx.LineWidth = 0.5;\r\n										iCtx.Stroke();\r\n									}\r\n								}\r\n								\r\n								//~~ flight path vector;\r\n								var _Vel = iObj.Velocity.Linear; if(_Vel.Length > 10)\r\n								{\r\n									var _HrzVel  = Sqrt((_Vel.X * _Vel.X) + (_Vel.Y * _Vel.Y));\r\n									var _VrtVel  = _Vel.Z;\r\n\r\n									var _HrzA = Angle((_Data.Heading - _Data.HdgFix) * DTR, Atan2(_Vel.X, _Vel.Y));\r\n									var _VrtA  = Atan2(_VrtVel, _HrzVel);\r\n\r\n									iCtx.Save();\r\n									iCtx.Translate((_HrzA * RTD) * _PitchStep, -(_VrtA * RTD) * _PitchStep);\r\n									iCtx.BeginPath();\r\n									{\r\n										iCtx.MoveTo( -5, +2);\r\n										iCtx.LineTo( -2, +2);\r\n										iCtx.LineTo(  0,  0);\r\n										iCtx.LineTo(  0, -2);\r\n\r\n										iCtx.MoveTo(  0,  0);\r\n										iCtx.LineTo( +2, +2);\r\n										iCtx.LineTo( +5, +2);\r\n									}\r\n									iCtx.LineWidth = 1;\r\n									iCtx.Stroke();\r\n									iCtx.Restore();\r\n								}\r\n							}\r\n							iCtx.Restore();\r\n\r\n							//~~ messages;\r\n							var _Alt = iObj.Position.Z;\r\n							{\r\n								if((_Alt < 500 && _Vel.Z < -10) || (_Alt < 35 && _Vel.Z < -3))\r\n								{\r\n									iCtx.GlobalAlpha = Date.Now.Millisecond % 1000 > 500 ? 1 : 0.2;\r\n									iCtx.TextAlign = \"center\";\r\n									iCtx.FontSize = \"10%\";\r\n									iCtx.FillText(\"FLARE\", 0, 40);\r\n								}\r\n							}\r\n						 }\r\n						\r\n						iCtx.ZoomOut();\r\n					}\r\n					\r\n				 },\r\n				//'Accelerometer  : Indicator' :\r\n				 //{\r\n					//Draw : function(iCtx, iObj)\r\n					//{\r\n						//var _Acc = iObj.Data.Accelerometer; if(isNaN(_Acc.Length))\r\n						//{\r\n							//Indicator.Drawing.DrawError(iCtx, true);\r\n							//return;\r\n						//}\r\n\r\n						//iCtx.ZoomIn(100);\r\n						//{\r\n							//iCtx.TextBaseline = \"middle\";\r\n							//iCtx.TextAlign    = \"center\";\r\n\r\n							//iCtx.GlobalAlpha  = 0.2;\r\n							//iCtx.Font         = \"75% tahoma\";\r\n							//iCtx.FillText(\"G\", 50, 50);\r\n\r\n							//iCtx.GlobalAlpha  = 1.0;\r\n							//iCtx.Font         = \"20% tahoma\";\r\n							//iCtx.FillText(_Acc.Z.ToString2(2), 50, 50);\r\n						//}\r\n						//iCtx.ZoomOut();\r\n					//}\r\n					\r\n				 //},\r\n				'Surfaces  : Indicator' :\r\n				 {\r\n					Draw : function(iCtx, iObj)\r\n					{\r\n						var _SS = iObj.Surfaces; if(isNaN(_SS.Rudder))\r\n						{\r\n							Indicator.Drawing.DrawError(iCtx, true);\r\n							return;\r\n						}\r\n\r\n						iCtx.ZoomIn(100);\r\n						//iCtx.Save();\r\n						//iCtx.Translate(50,50);\r\n						{\r\n							//iCtx.BeginPath();\r\n							//{\r\n								//iCtx.MoveTo(0,0);\r\n								//iCtx.LineTo(0,-10);\r\n\r\n								//iCtx.MoveTo(0,0); iCtx.LineTo(-10,+20);\r\n								//iCtx.MoveTo(0,0); iCtx.LineTo(+10,+20);\r\n							//}\r\n							//iCtx.LineWidth = 3;\r\n							//iCtx.Stroke();\r\n\r\n\r\n							iCtx.TextBaseline = \"middle\";\r\n							iCtx.TextAlign    = \"left\";\r\n							iCtx.Font         = \"13% quartz\";\r\n							//iCtx.Font         = \"13% courier\";\r\n\r\n							iCtx.FillText(\"ELE \"  + _SS.Elevator.ToString2(1), 20,10);\r\n							iCtx.FillText(\"AIL \"  + _SS.Aileron.ToString2(1),  20,25);\r\n							iCtx.FillText(\"RUD \"  + _SS.Rudder.ToString2(1),   20,40);\r\n							iCtx.FillText(\" BF \"  + _SS.Actuators.BodyFlap.CurrValue.ToFixed(1),   20,55);\r\n							iCtx.FillText(\" SB \"  + _SS.Actuators.SpdBrake.CurrValue.ToFixed(1),   20,70);\r\n\r\n							if(iObj.Control.Inputs.Balance < 1)\r\n							{\r\n								iCtx.FillText(\"ENG \" + iObj.Engine.Factor.ToFixed(2), 20,85);\r\n							}\r\n						}\r\n						//iCtx.Restore();\r\n						iCtx.ZoomOut();\r\n					}\r\n					\r\n				 },\r\n				'Speeds         : Indicator' :\r\n				 {\r\n					Draw : function(iCtx, iObj)\r\n					{\r\n						var _IAS  = iObj.Data.IAS;\r\n						var _MSpd = iObj.Data.MSpd;\r\n						//var _MSpd = iObj.Velocity.Linear.Length  / 340;//.Data.MSpd;iObj.Velocity..Data.MSpd;\r\n						{\r\n							if(isNaN(_IAS))// || _IAS > 1000)\r\n							{\r\n								Indicator.Drawing.DrawError(iCtx);\r\n								return;\r\n							}\r\n						}\r\n						\r\n						\r\n						iCtx.ZoomIn(100);\r\n						{\r\n							Clock : \r\n							{\r\n								if(_IAS < 250) break Clock;\r\n								\r\n								iCtx.Save();\r\n								iCtx.Translate(50,50);\r\n								iCtx.Rotate(-D090);\r\n								{\r\n									Zones:\r\n									{\r\n										var _Radius = 40, _FlashState = Date.Now.Millisecond > 500;//, _FrAng = -D090, _ToAng, \r\n										iCtx.LineWidth = 10; iCtx.GlobalAlpha = 0.5; iCtx.BeginPath();\r\n										\r\n										if(iObj.Data.BAlt > 500)\r\n										{\r\n											if(_FlashState == true || (_IAS >= 400 && _IAS <= 550))\r\n											{\r\n												iCtx.AddArc(0,0, _Radius, -50 * DTR, +30 * DTR);\r\n											}\r\n										}\r\n										else\r\n										{\r\n											if(_FlashState == true || (_IAS >= 250 &&  _IAS <= 360))\r\n											{\r\n												iCtx.AddArc(0,0, _Radius, -120 * DTR, -70 * DTR);\r\n											}\r\n										}\r\n										iCtx.Stroke();\r\n									}\r\n									Scale:\r\n									{\r\n										var _InR = 35, _OuR = 45; iCtx.LineWidth = 2;\r\n										{\r\n											iCtx.BeginPath(); for(var cA = 0; cA < D360; cA += D360 / 4)\r\n											{\r\n												iCtx.MoveTo(Sin(cA) * _InR, Cos(cA + PI) * _InR);\r\n												iCtx.LineTo(Sin(cA) * _OuR, Cos(cA + PI) * _OuR);\r\n											}\r\n											iCtx.Stroke();\r\n										}\r\n										var _InR = 40, _OuR = 45; iCtx.LineWidth = 1;\r\n										{\r\n											iCtx.BeginPath(); for(var cA = 0; cA < D360; cA += D360 / 12)\r\n											{\r\n												iCtx.MoveTo(Sin(cA) * _InR, Cos(cA + PI) * _InR);\r\n												iCtx.LineTo(Sin(cA) * _OuR, Cos(cA + PI) * _OuR);\r\n											}\r\n											iCtx.Stroke();\r\n										}\r\n									}\r\n									Pointer : \r\n									{\r\n										var _InR = 40, _OuR = 45;\r\n										var _ArrAng = Scale(_IAS,400,600);\r\n										\r\n										iCtx.BeginPath(); \r\n										{\r\n											iCtx.MoveTo(Cos(_ArrAng) * _InR, Sin(_ArrAng) * _InR);\r\n											iCtx.LineTo(Cos(_ArrAng) * _OuR, Sin(_ArrAng) * _OuR);\r\n										}\r\n										iCtx.LineWidth = 10; \r\n										iCtx.GlobalAlpha = 1;\r\n										iCtx.Stroke();\r\n									}\r\n								}\r\n								iCtx.Restore();\r\n							}\r\n							Text : \r\n							{\r\n								//iCtx.Font         = \"20% lucida sans\";\r\n								iCtx.Font         = \"20% quartz\";\r\n\r\n								iCtx.TextBaseline = \"middle\";\r\n								iCtx.TextAlign    = \"center\";\r\n								\r\n								\r\n								if(_IAS < 1000)\r\n								{\r\n									//iCtx.GlobalAlpha = 0.2;\r\n									//iCtx.FontSize = \"20%\";\r\n									//iCtx.FillText(\"IAS\", 50, 75);\r\n									\r\n									iCtx.GlobalAlpha = 1;\r\n									iCtx.FontSize = \"25%\";\r\n									iCtx.FillText(Round(_IAS), 50, 45);\r\n								}\r\n								if(_MSpd >= 0.3)\r\n								{\r\n									//iCtx.Save();\r\n									//iCtx.Translate(50,75);\r\n									//iCtx.Scale(1,0.7);\r\n\r\n									iCtx.GlobalAlpha = 1;\r\n									iCtx.FontSize = \"12%\";\r\n									iCtx.FillText(_MSpd.ToString2(3, false), 50, 65);\r\n\r\n									//iCtx.Restore();\r\n								}\r\n							}\r\n						}\r\n						iCtx.ZoomOut();\r\n					}\r\n				 },\r\n				'Altimeter      : Indicator' :\r\n				 {\r\n					Draw : function(iCtx, iObj)\r\n					{\r\n						var _Alt    = iObj.Data.BAlt;\r\n						var _VSpd   = iObj.Data.VSpd;\r\n\r\n						\r\n						\r\n						if(isNaN(_Alt) ||  _Alt < -1 || _Alt > 1e5)\r\n						{\r\n							Indicator.Drawing.DrawError(iCtx);\r\n							return;\r\n						}\r\n\r\n						iCtx.ZoomIn(100);\r\n						{\r\n							Clock :\r\n							{\r\n								if(_Alt < 1000) break Clock;\r\n\r\n								var _ArrAng = _Alt * (Math.PI * 2) / 100;\r\n\r\n								iCtx.Save();\r\n								iCtx.Translate(iCtx.W / 2, iCtx.H / 2);\r\n								iCtx.BeginPath();\r\n								{\r\n									var _InR = 45, _OuR = 49;\r\n\r\n									iCtx.MoveTo(Math.Sin(_ArrAng) * _InR, Math.Cos(_ArrAng + Math.PI) * _InR);\r\n									iCtx.LineTo(Math.Sin(_ArrAng) * _OuR, Math.Cos(_ArrAng + Math.PI) * _OuR);\r\n\r\n									iCtx.MoveTo(Math.Sin(_ArrAng) * _InR, Math.Cos(_ArrAng + Math.PI) * _InR);\r\n									iCtx.LineTo(Math.Sin(_ArrAng) * _OuR, Math.Cos(_ArrAng + Math.PI) * _OuR);\r\n\r\n									iCtx.LineWidth = 10;\r\n									iCtx.Stroke();\r\n								}\r\n								iCtx.Restore();\r\n							}\r\n							Text :\r\n							{\r\n								//iCtx.Font = \"20% lucida sans\";\r\n								iCtx.Font = \"20% quartz\";\r\n								iCtx.TextBaseline = \"middle\";\r\n\r\n								if(_Alt > 0)\r\n								{\r\n									if(_Alt >= 1000 && _Alt < 100000)\r\n									{\r\n										var _KMeters = Math.Floor(_Alt / 1000);\r\n										var _Meters  = Math.Floor(_Alt - (_KMeters * 1000));\r\n										{\r\n											if(_Meters < 100) _Meters = \"0\" + _Meters;\r\n											if(_Meters < 10)  _Meters = \"0\" + _Meters;\r\n										}\r\n\r\n										iCtx.TextAlign = \"right\";\r\n\r\n										iCtx.FontSize = \"30%\";\r\n										iCtx.FillText(_KMeters, 50, 50);\r\n\r\n										iCtx.FontSize = \"20%\";\r\n										iCtx.FillText(_Meters, 90, 50);\r\n									}\r\n									else if(_Alt < 1000)\r\n									{\r\n										iCtx.TextAlign    = \"left\";\r\n										iCtx.FillText(\"R\", 10, 50);\r\n\r\n										iCtx.TextAlign    = \"right\";\r\n										iCtx.FillText(_Alt.ToString2(3,false), 90, 50);\r\n									}\r\n									else\r\n									{\r\n										//~~ ;\r\n									}\r\n\r\n\r\n\r\n									if(Abs(_VSpd) > 0.1)\r\n									{\r\n										iCtx.TextAlign = \"center\";\r\n										iCtx.FontSize = \"14%\";\r\n										iCtx.FillText(_VSpd.ToString2(), 50, 75);\r\n									}\r\n								}\r\n								else\r\n								{\r\n									\r\n									iCtx.TextAlign = \"center\";\r\n									iCtx.FillText(\"GND\", 50, 50);\r\n								}\r\n							}\r\n						}\r\n						iCtx.ZoomOut();\r\n					}\r\n				 },\r\n				'Situation      : Indicator' :\r\n				 {\r\n					Draw : function(iCtx, iObj)\r\n					{\r\n						if(isNaN(iObj.Position.X))\r\n						{\r\n							Indicator.Drawing.DrawError(iCtx);\r\n							return;\r\n						}\r\n						\r\n						var _VehAtt    = iObj.Data.Attitude;\r\n						var _VehPos    = iObj.Position.Set(null,null,0);\r\n\r\n						var _AipDist   = _VehPos.Length;\r\n						var _AipDir    = (Atan2(-_VehPos.X, _VehPos.Y) * RTD) - _VehAtt.HdgFix;\r\n\r\n						var _ToAipTrk  = _AipDir + _VehAtt.Heading;\r\n						var _RnwTrkA   = (_VehAtt.Heading - _VehAtt.HdgFix) * DTR;\r\n						\r\n						iCtx.ZoomIn(100);\r\n						iCtx.Translate(50,50);\r\n						{\r\n							Vehicle:\r\n							{\r\n								var _RwPos = Clamp01(Scale01(_AipDist, 0, 3000));\r\n								//if(_AipDist < 1000) break Direction;\r\n\r\n								iCtx.Save();\r\n								iCtx.Translate(-Sin(_ToAipTrk * DTR) * _RwPos * 43, -Cos(_ToAipTrk * DTR) * _RwPos * 43);\r\n								{\r\n									iCtx.BeginPath();\r\n									\r\n									iCtx.MoveTo(0,-7);\r\n									iCtx.LineTo(7,7);\r\n									iCtx.LineTo(-7,7);\r\n									//iCtx.LineTo(0,-10);\r\n									iCtx.ClosePath();\r\n\r\n									//iCtx.LineWidth = 2;\r\n									//iCtx.Stroke();\r\n									iCtx.Fill();\r\n								}\r\n								iCtx.Restore();\r\n							}\r\n							Runway :\r\n							{\r\n								if(_AipDist > 100000) break Runway;\r\n								{\r\n									iCtx.BeginPath();\r\n									\r\n									var _PerspF = 0.5, cA,cD, cxA,cyA,  cX,cY;\r\n									{\r\n										cA = _RnwTrkA;\r\n										cD = (Cos(cA) / 2 + 0.5) * _PerspF;\r\n\r\n										cxA = cA      - 0.01 - cD; iCtx.MoveTo(+Sin(cxA) * 40, +Cos(cxA) * 40);\r\n										cyA = cA      + 0.01 + cD; iCtx.LineTo(+Sin(cyA) * 40, +Cos(cyA) * 40);\r\n\r\n\r\n										cA = _RnwTrkA + PI;\r\n										cD = (Cos(cA) / 2 + 0.5) * _PerspF;\r\n\r\n										cxA = cA - 0.01 - cD; iCtx.LineTo(+Sin(cxA) * 40, +Cos(cxA) * 40);\r\n										cyA = cA + 0.01 + cD; iCtx.LineTo(+Sin(cyA) * 40, +Cos(cyA) * 40);\r\n									}\r\n									\r\n									iCtx.ClosePath();\r\n\r\n									//iCtx.MoveTo(Sin(_RnwTrkA) * _InR, Cos(_RnwTrkA) * _InR);\r\n									//iCtx.LineTo(Sin(_RnwTrkA) * _OuR, Cos(_RnwTrkA) * _OuR);\r\n\r\n									iCtx.LineWidth = 10;\r\n									iCtx.GlobalAlpha = 0.5;\r\n\r\n									//iCtx.Stroke();\r\n									iCtx.Fill();\r\n								}\r\n							}\r\n							Localizer:\r\n							{\r\n								if(_AipDist < 1000 || _AipDist > 50000) break Localizer;\r\n								\r\n								//var _LatErr = Clamp(Scale(_VehPos.X * Sign(_VehPos.Y), 3000));\r\n								var _LatErr = Magic(Clamp(Scale(_VehPos.X / _VehPos.Y, 0.20)), 1.4);\r\n\r\n								\r\n\r\n								iCtx.BeginPath();\r\n								\r\n								iCtx.MoveTo(_LatErr * 43,-20); iCtx.LineTo(_LatErr * 43,-40);\r\n								iCtx.MoveTo(_LatErr * 43,+20); iCtx.LineTo(_LatErr * 43,+40);\r\n\r\n								iCtx.LineWidth = Abs(_LatErr) >= 1 && Date.Now.Millisecond > 500 ? 4 : 2;\r\n								iCtx.GlobalAlpha = 1;\r\n								//iCtx.\r\n								//iCtx.S\r\n								iCtx.Stroke();\r\n							}\r\n							Glideslope:\r\n							{\r\n								//if(_AipDist < 3000 || _AipDist > 30000) break Glideslope;\r\n								if(_AipDist < 3000) break Glideslope;\r\n								\r\n								var _VrtErr = Clamp(Scale((iObj.Data.BAlt / Tan(20 * DTR)) / (_AipDist - 3200), 1) - 1);\r\n\r\n								iCtx.BeginPath();\r\n\r\n								iCtx.MoveTo(-21, _VrtErr * 43); iCtx.LineTo(-40, _VrtErr * 43);\r\n								iCtx.MoveTo(+21, _VrtErr * 43); iCtx.LineTo(+40, _VrtErr * 43);\r\n\r\n								iCtx.LineWidth = Abs(_VrtErr) >= 1 && Date.Now.Millisecond > 500 ? 4 : 2;\r\n								iCtx.GlobalAlpha = 1;\r\n\r\n								iCtx.Stroke();\r\n							}\r\n							\r\n							Text :\r\n							{\r\n								if(_AipDist < 3000) break Text;\r\n\r\n								//iCtx.Font = \"20% lucida sans\";\r\n								iCtx.Font = \"20% quartz\";\r\n								iCtx.TextAlign = \"center\";\r\n								iCtx.TextBaseline = \"middle\";\r\n								\r\n								if(_AipDist < 100000)\r\n								{\r\n									iCtx.FillText((_AipDist / 1000).ToString2(1,false), 0, 0);\r\n								}\r\n								else\r\n								{\r\n									iCtx.FillText(Math.Round(_AipDist / 1000), 0, 0);\r\n								}\r\n							}\r\n						}\r\n						iCtx.ZoomOut();\r\n\r\n						//iCtx.Translate(iCtx.W / 2, iCtx.H / 2);\r\n						//{\r\n							\r\n						//}\r\n						//iCtx.ZoomOut();\r\n						//iCtx.Restore();\r\n						\r\n						\r\n						\r\n					}\r\n				 },\r\n				'Misc1          : Indicator' :\r\n				 {\r\n					Draw : function(iCtx, iObj)\r\n					{\r\n						var _Att = iObj.Data.Attitude; if(isNaN(_Att.Pitch * _Att.Bank * _Att.Heading))\r\n						{\r\n							Indicator.Drawing.DrawError(iCtx, true);\r\n							return;\r\n						}\r\n\r\n						iCtx.ZoomIn(100);\r\n						{\r\n							//iCtx.TextBaseline = \"middle\";\r\n							//iCtx.TextAlign    = \"left\";\r\n							//iCtx.Font         = \"15% courier\";\r\n							iCtx.Font         = \"15% quartz\";\r\n\r\n							iCtx.FillText(\"G   \" + iObj.Data.Accelerometer.Z.ToString2(2), 10, 20);\r\n							iCtx.FillText(\"AoA \" + (iObj.Data.IAS > 10 ? iObj.Data.AoA.ToString2(2) : \"--\"), 10, 35);\r\n							\r\n							//iCtx.TextBaseline = \"top\";\r\n							//iCtx.TextAlign    = \"left\";\r\n							iCtx.Font         = \"10% courier\";\r\n\r\n							iCtx.FillText(\"Pit = \" + _Att.Pitch   .ToString2(), 13, 60);\r\n							iCtx.FillText(\"Bnk = \" + _Att.Bank    .ToString2(), 13, 70);\r\n							iCtx.FillText(\"Hdg = \" + _Att.Heading .ToString2(), 13, 80);\r\n						}\r\n						iCtx.ZoomOut();\r\n					}\r\n					\r\n				 },\r\n				'Inputs          : Indicator' :\r\n				 {\r\n					Draw : function(iCtx, iObj)\r\n					{\r\n						var _CPit = iObj.Cockpit;\r\n						var _AupF = iObj.Control.Inputs.Balance;\r\n\r\n						iCtx.ZoomIn(100);\r\n						{\r\n							//iCtx.TextBaseline = \"middle\";\r\n							//iCtx.TextAlign    = \"left\";\r\n							iCtx.Font         = \"12% courier\";\r\n\r\n							iCtx.FillText(_AupF == 0 ? \"MANUAL\" : _AupF == 1 ? \"A/P\" : \"MAN-AP \" + _AupF.ToFixed(2), 10, 20);\r\n\r\n							\r\n							//iCtx.FillText(\"AoA    \" + (iObj.Data.IAS > 10 ? iObj.Data.AoA.ToString2(2) : \"--\"), 10, 25);\r\n							\r\n							//iCtx.TextBaseline = \"top\";\r\n							//iCtx.TextAlign    = \"left\";\r\n\r\n							if(_AupF != 1)\r\n							{\r\n								//iCtx.Font         = \"12% courier\";\r\n								iCtx.Font         = \"12% quartz\";\r\n								//iCtx.FillText(\"AttRates: \", 13, 45);\r\n\r\n								iCtx.Font         = \"10% courier\";\r\n								iCtx.FillText(\"X = \" + _CPit.AttRates.X.ToFixed(2), 13, 60);\r\n								iCtx.FillText(\"Y = \" + _CPit.AttRates.Y.ToFixed(2), 13, 70);\r\n								iCtx.FillText(\"Z = \" + _CPit.AttRates.Z.ToFixed(2), 13, 80);\r\n							}\r\n						}\r\n						iCtx.ZoomOut();\r\n					}\r\n					\r\n				 },\r\n				\r\n				'Autopilot      : Indicator' :\r\n				 {\r\n					Draw : function(iCtx, iObj)\r\n					{\r\n						//this.overriden.Draw(arguments);\r\n\r\n						iCtx.ZoomIn(0,0.01);\r\n						{\r\n							iCtx.Font         = \"15% courier\";\r\n							iCtx.TextAlign    = \"left\";\r\n							iCtx.TextBaseline = \"top\";\r\n\r\n							iCtx.Save();\r\n							{\r\n								iCtx.Translate(10,0);\r\n							}\r\n							iCtx.Restore();\r\n						}\r\n						iCtx.ZoomOut();\r\n					}\r\n				 },\r\n			 }\r\n		 }\r\n	},\r\n});",
	"../UVS/Equipment/Panels/HUD.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'System.Drawing',\r\n		'Math',\r\n	],\r\n	//'UVS.Equipment' : {},\r\n	'UVS.Equipment.HUD' :\r\n	 {\r\n		'Screen : GraphicsLayer' : \r\n		 {\r\n			Type        : str(\"Unknown\"),\r\n			Color       : obj('Color'),\r\n			//Canvas      : obj,\r\n			//Context     : obj,\r\n			Layout      : obj,\r\n			DataSource  : obj,\r\n			//Validated   : boo,\r\n			\r\n			constructor : function annex(iAA)\r\n			 {\r\n				//debugger;\r\n				//this.Indicators = HUDScreen.CreateLayout(this, this.Type);\r\n				//this.Layout     = new Layout([Indicators.Create(\"Generic/Watch\", {Bounds : new CircleBounds(0.5, 0.5,  \"CC\", 0.25, 1, \"H\")})]);\r\n				this.Layout     = Layouts.Create(\"Vehicles/Aircraft\");//.([Indicators.Create(\"Generic/Watch\", {Bounds : new CircleBounds(0.5, 0.5,  \"CC\", 0.25, 1, \"H\")})]);\r\n				this.DataSource = iAA.DataSource || null;\r\n\r\n				this.Validated     = false;\r\n				\r\n				//~~this.UpdateSize();\r\n				this.Layout.UpdateSize(this);\r\n\r\n				//~~window.addEventListener(\"resize\", this.UpdateSize.Bind(this));\r\n			 },\r\n			//constructor : function(iAA)\r\n			 //{\r\n				//this.Type  = iAA.Type || \"Unknown\";\r\n				//this.Color = iAA.Color;\r\n				\r\n\r\n				//this.Canvas  = document.createElement(\"canvas\");\r\n				//this.Context = this.Canvas.getContext(\"2d\");\r\n				//{\r\n					//this.Canvas.id = \"HUD\";\r\n					////this.Canvas.\r\n					//document.body.appendChild(this.Canvas);\r\n				//}\r\n				////this.Indicators = HUDScreen.CreateLayout(this, this.Type);\r\n				////this.Layout     = new Layout([Indicators.Create(\"Generic/Watch\", {Bounds : new CircleBounds(0.5, 0.5,  \"CC\", 0.25, 1, \"H\")})]);\r\n				//this.Layout     = Layouts.Create(\"Vehicles/Aircraft\");//.([Indicators.Create(\"Generic/Watch\", {Bounds : new CircleBounds(0.5, 0.5,  \"CC\", 0.25, 1, \"H\")})]);\r\n				//this.DataSource = iAA.DataSource || null;\r\n\r\n				//this.Validated     = false;\r\n				\r\n				//this.UpdateSize();\r\n\r\n				//window.addEventListener(\"resize\", this.UpdateSize.Bind(this));\r\n				////window.setInterval(this.Validate.Bind(this), 30);\r\n			 //},\r\n			\r\n			UpdateBounds : function()\r\n			 {\r\n				this.overriden.UpdateBounds();\r\n\r\n				\r\n				if(0)\r\n				{\r\n					this.Context.Scale     (1,-1);\r\n					this.Context.Translate (0, -this.Context.H);\r\n				}\r\n				\r\n				if(this.Layout) this.Layout.UpdateSize(this);\r\n				////this.LastSizeChange = new Date();\r\n				//this.Invalidate();\r\n			 },\r\n			UpdateBackground   : function()\r\n			 {\r\n				var _Ctx = this.Context;\r\n				{\r\n					_Ctx.ClearRect(0,0,_Ctx.W,_Ctx.H);\r\n\r\n					//_Ctx.FillStyle = \"rgba(0,0,0,0.2)\";\r\n					_Ctx.FillStyle = \"rgba(0,0,0,0.5)\";\r\n					\r\n					_Ctx.FillRect(0,0,_Ctx.W,_Ctx.H);\r\n					\r\n					//_Ctx.BeginPath();\r\n					//_Ctx.ClearRect();\r\n					//_Ctx.FillRect();\r\n				}\r\n\r\n				if(0) for(var _II = this.Layout.Indicators, cI,Ii = 0; cI = _II[Ii]; Ii++)\r\n				{\r\n					_Ctx.Save();\r\n					{\r\n						_Ctx.Translate(cI.Bounds.AX, cI.Bounds.AY);\r\n\r\n						_Ctx.W = cI.Bounds.AW;\r\n						_Ctx.H = cI.Bounds.AH;\r\n\r\n						_Ctx.BeginPath();\r\n						{\r\n							_Ctx.AddRect(0,0,_Ctx.W,_Ctx.H);\r\n							_Ctx.FillStyle = cI.Color;\r\n							_Ctx.Stroke();\r\n						}\r\n					}\r\n					_Ctx.Restore();\r\n				}\r\n			 },\r\n			UpdateForeground   : function()\r\n			 {\r\n				\r\n				for(var _Ctx = this.Context, _II = this.Layout.Indicators, cI,Ii = 0; cI = _II[Ii]; Ii++)\r\n				{\r\n					_Ctx.Save();\r\n					{\r\n						_Ctx.Translate(cI.Bounds.AX, cI.Bounds.AY);\r\n\r\n						_Ctx.W = cI.Bounds.AW;\r\n						_Ctx.H = cI.Bounds.AH;\r\n\r\n						//_Ctx.scale(1,_Ctx.W / _Ctx.H);\r\n\r\n						\r\n\r\n						_Ctx.FillStyle   = cI.Color;\r\n						_Ctx.StrokeStyle = cI.Color;\r\n						\r\n						_Ctx.BeginPath();\r\n						{\r\n							_Ctx.ClearRect(0,0,_Ctx.W,_Ctx.H);\r\n\r\n\r\n							//_Ctx.AddRect  (0,0,_Ctx.W,_Ctx.H);\r\n							//_Ctx.Clip();\r\n							_Ctx.BeginPath();\r\n						}\r\n						//~~_Ctx.BeginPath();\r\n						cI.Draw(this.Context, this.DataSource);\r\n					}\r\n					_Ctx.Restore();\r\n				}\r\n			 },\r\n			SetLayout  : function(iLout)\r\n			 {\r\n				this.Layout = iLout;\r\n				this.Layout.UpdateSize();\r\n				this.Invalidate();\r\n			 },\r\n		 },\r\n		'Layout' : \r\n		 {\r\n			ID         : str,\r\n			Indicators : arr('Indicator'),\r\n\r\n			constructor : function(iIndiA, iLoutID)\r\n			{\r\n				this.ID         = iLoutID || this.constructor.name;\r\n				this.Indicators = iIndiA  || [];\r\n				\r\n				//HUDLayout.Register(this);\r\n			},\r\n\r\n			UpdateSize : function(iHudS)\r\n			{\r\n				\r\n				var _H = iHudS.Canvas.height;\r\n				var _W = _H;\r\n				//~~var _W = _H * 2.55;\r\n				//var _W = iHudS.Canvas.width;\r\n				\r\n				var _X = (iHudS.Canvas.width / 2) - (_W / 2);  //~~ ??;\r\n				var _Y = 0;\r\n\r\n\r\n				//iHudS.Canvas.height * 2.5;\r\n				for(var cI,Ii = 0; cI = this.Indicators[Ii]; Ii++)\r\n				{\r\n					//cI.Bounds.SyncR2A(Bounds.FromAbsolute(_X,_Y,_W,_H));\r\n					cI.Bounds.SyncR2A(Bounds.FromAbsolute(_X,_Y,_W,_H));\r\n				}\r\n			},\r\n\r\n			//var _LoutJson = HUDLayout.ToJson(_Lout);\r\n\r\n\r\n			static : \r\n			 {\r\n				ToJson   : function(iLayout,  oJsonO){throw \"NI\"},\r\n				FromJson : function(iJsonO$obj, oLout)\r\n				{\r\n					/**\r\n						{\r\n							ID    : \"MyLayout\",\r\n							Color : \"#ff0000\",\r\n\r\n							Indicators :\r\n							[\r\n								{Type : \"Aircraft.Altimeter\", Color : \"#ff0000\", Bounds : [0.5, 0.5, \"CC\", 0.25, 1, \"H\"]},\r\n								{Type : \"Aircraft.Airspeed\",  Color : \"#ff0000\", Bounds : [0.5, 0.5, \"CC\", 0.25, 1, \"H\"]},\r\n								{Type : \"Aircraft.Heading\",   Color : \"#ff0000\", Bounds : [0.5, 0.5, \"CC\", 0.25, 1, \"H\"]},\r\n							]\r\n						}\r\n					*/\r\n					oLout = new Layout();\r\n					{\r\n						//oLout.ID = iJsonO.ID;\r\n\r\n						for(var cI,Ii = 0; cI = iJsonO.Indicators[Ii], Ii < iJsonO.Indicators.Length; Ii++)\r\n						{\r\n							//console.info([cI]);\r\n							//;\r\n							//var cBounds = new CircleBounds\r\n							oLout.Indicators.Push(Indicators.Create(cI.ID, {Bounds : Object.Construct(Bounds, cI.Bounds)}));\r\n						}\r\n					}\r\n					return oLout;\r\n					\r\n					//for(var cIO Object.getPropertiesiJson;\r\n				},\r\n				//initializer : function()\r\n				 //{\r\n					////new HUDLayout([], \"Empty\");\r\n					////new HUDLayout([], \"Default\");\r\n\r\n					//for(var _NN = Object.getOwnPropertyNames(this), cN,Ni = 0; cN = _NN[Ni], Ni < _NN.Length; Ni++)\r\n					//{\r\n						//console.info(cN);\r\n					//}\r\n				 //},\r\n				Register : function(iLayout)\r\n				 {\r\n					if(this[iLayout.ID]) throw \"HUD Layout '\" + iLayout.ID + \"' already exists\";\r\n					this[iLayout.ID] = iLayout;\r\n				 },\r\n			 }\r\n		 },\r\n\r\n		 //gfGetByPath : function()\r\n		 //{\r\n		 \r\n		 //},\r\n		\r\n		'Indicator' : \r\n		 {\r\n			//Owner  : obj('HUDScreen'),\r\n			Color  : obj('Color', 255,255,0),\r\n			Bounds : obj('Bounds', 0.5,0.5,0.25,0.25),\r\n\r\n			//Draw : function(iCtx)\r\n			 //{\r\n				//return;\r\n				////iCtx.ClearRect(0,0,iCtx.W,iCtx.H);\r\n\r\n				////iCtx.StrokeStyle = this.Color;\r\n				////iCtx.FillStyle   = Color.ModifyAlpha(this.Color, 0.5);\r\n\r\n				//iCtx.BeginPath();\r\n				//{\r\n					////iCtx.GlobalAlpha = 0.1;\r\n					//iCtx.AddRect(1,1, Max(iCtx.W - 2,1), Max(iCtx.H - 2,1), 10);\r\n\r\n					//iCtx.FillStyle = \"#000000\";//\"rgba(255,255,255,1)\";\r\n					//iCtx.GlobalAlpha = 0.15;\r\n					//iCtx.Fill();\r\n\r\n					//iCtx.FillStyle = this.Color;\r\n\r\n					//iCtx.GlobalAlpha = 0.3;\r\n					////iCtx.GlobalAlpha = 1;\r\n					\r\n					////iCtx.MoveTo(0,0);\r\n					////iCtx.LineTo(iCtx.W,iCtx.H);\r\n					////iCtx.MoveTo(0,iCtx.H);\r\n					////iCtx.LineTo(iCtx.W,0);\r\n					//iCtx.Stroke();\r\n					//iCtx.GlobalAlpha = 1;\r\n				//}\r\n				\r\n			 //},\r\n			static :\r\n			 {\r\n				Drawing : \r\n				{\r\n					DrawError : function(iCtx)\r\n					 {\r\n						if(iCtx.UnzoomData) iCtx.ZoomOut();\r\n\r\n						iCtx.ZoomIn(100);\r\n						//iCtx.BeginPath(); var iW = iCtx.W, iH = iCtx.H;\r\n						//{\r\n							//iCtx.MoveTo(     10,      10);\r\n							//iCtx.LineTo(     30,      30);\r\n							//iCtx.MoveTo(iW - 30, iH - 30);\r\n							//iCtx.LineTo(iW - 10, iH - 10);\r\n\r\n							//iCtx.MoveTo(     10, iH - 10);\r\n							//iCtx.LineTo(     30, iH - 30);\r\n							//iCtx.MoveTo(iW - 30,      30);\r\n							//iCtx.LineTo(iW - 10,      10);\r\n							\r\n							//iCtx.LineWidth = 1;\r\n							//iCtx.Stroke();\r\n						//}\r\n						iCtx.Font         = \"20% courier\";\r\n						iCtx.TextAlign    = \"center\";\r\n						iCtx.TextBaseline = \"middle\";\r\n						iCtx.FillStyle    = \"#ff0000\";\r\n						iCtx.FillText     (\"ERROR\", 50,50);\r\n\r\n						iCtx.ZoomOut();\r\n					 },\r\n\r\n					//DrawError : function(iCtx)\r\n					 //{\r\n						//if(iCtx.IsZoomed) iCtx.ZoomOut();\r\n\r\n						//iCtx.ZoomIn();\r\n						//{\r\n						\r\n						//}\r\n						//var iW = iCtx.W, iH = iCtx.H;\r\n\r\n						//iCtx.BeginPath();\r\n						//{\r\n							//iCtx.MoveTo(     10,      10);\r\n							//iCtx.LineTo(     30,      30);\r\n							//iCtx.MoveTo(iW - 30, iH - 30);\r\n							//iCtx.LineTo(iW - 10, iH - 10);\r\n\r\n							//iCtx.MoveTo(     10, iH - 10);\r\n							//iCtx.LineTo(     30, iH - 30);\r\n							//iCtx.MoveTo(iW - 30,      30);\r\n							//iCtx.LineTo(iW - 10,      10);\r\n							\r\n							//iCtx.LineWidth = 1;\r\n							//iCtx.Stroke();\r\n						//}\r\n						\r\n						//iCtx.Font         = \"20% lucida sans\";\r\n						//iCtx.TextAlign    = \"center\";\r\n						//iCtx.TextBaseline = \"middle\";\r\n						//iCtx.FillStyle    = Colors.Red;\r\n						//iCtx.FillText     (\"N/A\", iCtx.W / 2, iCtx.H / 2);\r\n					 //}\r\n\r\n				}\r\n			 }\r\n		 },\r\n\r\n		'Layouts' : \r\n		 {\r\n			Create    : function(iPath, oLout)\r\n			{\r\n				var _LoutJson = Object.GetNode(this, iPath);\r\n				return Layout.FromJson(_LoutJson);\r\n			}\r\n		 },\r\n		'Indicators' :\r\n		 {\r\n			//GetByPath : {get once(){return Object.GetByPath.Bind(this)}},\r\n			Create    : function(iPath, iArgs, oIndi)\r\n			{\r\n				var _Indi = Object.GetNode(this, iPath);\r\n				return new _Indi(iArgs);\r\n			}\r\n		 }\r\n	 },\r\n});",
	"../UVS/Equipment/Panels/HUD.Debug.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'System.Drawing',\r\n		'Math',\r\n	],\r\n	\r\n	'UVS.Equipment.HUD' :\r\n	 {\r\n		\r\n	 },\r\n});",
	"../UVS/Equipment/Panels/HUD.Indicators.chs" : "\"use strict\";\r\n\r\nstuff\r\n({\r\n	uses :\r\n	[\r\n		'Math',\r\n		'Math.Geometry',\r\n		'System.Drawing',\r\n	],\r\n	//'UVS.Equipment' : {},\r\n	'UVS.Equipment.HUD' :\r\n	 {\r\n		'Indicators/Generic' : \r\n		 {\r\n			'DebugInfo : Indicator' :\r\n			 {\r\n				Draw : function(iCtx, iObj)\r\n				 {\r\n					iCtx.ZoomIn(0,100);\r\n					{\r\n//						iCtx.Font         = \"15% courier\";\r\n						iCtx.Font         = \"15% quartz\";\r\n						iCtx.TextAlign    = \"left\";\r\n						iCtx.TextBaseline = \"top\";\r\n\r\n						iCtx.Save();\r\n						{\r\n							iCtx.Translate(10,0);\r\n\r\n							var _Table =\r\n							[\r\n								[\"Position\", iObj.Position],\r\n								//[\"Rotation\", iObj.Rotation],\r\n								[\"Velocity\", iObj.Velocity.Linear],\r\n								\r\n								//[\"AngVel\", iObj.Velocity.Angular],\r\n								[\"Wind\", gSIM.Vehicle.Data.Wind],\r\n							];\r\n\r\n							//for(var _NN = [\"PosV\",\"PosD\",\"RotV\",\"RotD\"], cV,cN,Ni = 0; cN = _NN[Ni], cV = gApp.Vehicle.Dynamics[cN]; Ni++)\r\n							for(var cR,Ri = 0; cR = _Table[Ri]; Ri++)\r\n							{\r\n								iCtx.BeginPath(), iCtx.MoveTo(2,32), iCtx.LineTo(2,90), iCtx.Stroke();\r\n\r\n								iCtx.FillStyle  = \"rgba(255,255,255,0.7)\";\r\n								iCtx.FontWeight = \"bold\";\r\n									iCtx.FillText  (cR[0],          0, 10);\r\n\r\n								iCtx.FillStyle  = this.Color;\r\n								iCtx.FontWeight = \"normal\";\r\n									iCtx.FillText  (\"X:\" + cR[1].X.ToString2(), 10, 30);\r\n									iCtx.FillText  (\"Y:\" + cR[1].Y.ToString2(), 10, 45);\r\n									iCtx.FillText  (\"Z:\" + cR[1].Z.ToString2(), 10, 60);\r\n\r\n								var _L = cR[1].Length; if(_L != undefined)\r\n								{\r\n									iCtx.FillStyle  = \"#ffffff\";\r\n									iCtx.FillText(\"M:\" + _L.ToString2(), 10, 75);\r\n								}\r\n								\r\n								if(cR[1] instanceof Quaternion) iCtx.FillText  (\"W:\" + cR[1].W.ToString2(), 10, 75);\r\n								//if(cR[1] instanceof Rotation)   iCtx.FillText  (\"A:\" + cR[1].A.ToString2(), 10, 75);\r\n\r\n								iCtx.Translate(120,0);\r\n							}\r\n						}\r\n						iCtx.Restore();\r\n					}\r\n					iCtx.ZoomOut();\r\n				 }\r\n			 },\r\n			'Watch     : Indicator' :\r\n			 {\r\n				Draw : function(iCtx, iObj)\r\n				{\r\n					var _Time     = new Date();\r\n					var _MinAngle = _Time.Minute / 60 * (PI * 2);\r\n					var _SecAngle = _Time.Second / 60 * (PI * 2);\r\n					var _MsAngle  = (_Time.ValueOf() % 1000 / 1e3) * (PI * 2);\r\n					\r\n					iCtx.ZoomIn(100);\r\n					iCtx.Translate(50,50);\r\n					{\r\n						Clock:\r\n						{\r\n							Scale:\r\n							{\r\n								var _InR = 35, _OuR = 45; iCtx.LineWidth = 2;\r\n								{\r\n									iCtx.BeginPath(); for(var cA = 0; cA < D360; cA += D360 / 4)\r\n									{\r\n										iCtx.MoveTo(Sin(cA) * _InR, Cos(cA + PI) * _InR);\r\n										iCtx.LineTo(Sin(cA) * _OuR, Cos(cA + PI) * _OuR);\r\n									}\r\n									iCtx.Stroke();\r\n								}\r\n								var _InR = 40, _OuR = 45; iCtx.LineWidth = 1;\r\n								{\r\n									iCtx.BeginPath(); for(var cA = 0; cA < D360; cA += D360 / 12)\r\n									{\r\n										iCtx.MoveTo(Sin(cA) * _InR, Cos(cA + PI) * _InR);\r\n										iCtx.LineTo(Sin(cA) * _OuR, Cos(cA + PI) * _OuR);\r\n									}\r\n									iCtx.Stroke();\r\n								}\r\n							}\r\n							Minutes:\r\n							{\r\n								var _Radius = 40; iCtx.LineWidth = 10; iCtx.GlobalAlpha = 0.7; \r\n								\r\n								iCtx.BeginPath();\r\n								iCtx.AddArc(0,0, _Radius, -D090, _MinAngle - D090, _Time.Minute >= 30);\r\n								iCtx.Stroke();\r\n							}\r\n							Seconds:\r\n							{\r\n								var _InR = 40, _OuR = 45;\r\n								\r\n								iCtx.BeginPath();\r\n								iCtx.MoveTo(Sin(_SecAngle) * _InR, Cos(_SecAngle + PI) * _InR);\r\n								iCtx.LineTo(Sin(_SecAngle) * _OuR, Cos(_SecAngle + PI) * _OuR);\r\n								\r\n								iCtx.LineWidth   = 5;\r\n								iCtx.GlobalAlpha = 1;\r\n								iCtx.Stroke();\r\n							}\r\n						}\r\n						Text : \r\n						{\r\n							iCtx.Font = \"30% tahoma\";\r\n							iCtx.TextBaseline = \"middle\";\r\n							\r\n							iCtx.TextAlign = \"center\";\r\n							iCtx.FillText(_Time.Minute < 30 ? _Time.Hour : _Time.AddHours(1).Hour, 0, -1);\r\n						}\r\n					}\r\n					iCtx.ZoomOut();\r\n				}\r\n			 },\r\n		 }\r\n	 },\r\n});",
});